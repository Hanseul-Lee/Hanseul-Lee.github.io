<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>HS&#39;s blog</title>
    <link>https://hanseul-lee.github.io/</link>
    
    <atom:link href="https://hanseul-lee.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Sun, 07 Mar 2021 15:00:03 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[프로젝트] SweetyPie - Airbnb 클론코딩</title>
      <link>https://hanseul-lee.github.io/2021/02/26/SweetyPie_README/</link>
      <guid>https://hanseul-lee.github.io/2021/02/26/SweetyPie_README/</guid>
      <pubDate>Fri, 26 Feb 2021 14:26:40 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt -->]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/project/">project</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/">프로젝트</category>
      
      <category domain="https://hanseul-lee.github.io/tags/Fastcampus/">Fastcampus</category>
      
      <category domain="https://hanseul-lee.github.io/tags/SweetyPie/">SweetyPie</category>
      
      
      <comments>https://hanseul-lee.github.io/2021/02/26/SweetyPie_README/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[프로젝트] SweetyPie - Airbnb 클론코딩 TIL (4주차: 21.02.22 ~ 21.02.26)</title>
      <link>https://hanseul-lee.github.io/2021/02/22/SweetyPie_4%EC%A3%BC%EC%B0%A8/</link>
      <guid>https://hanseul-lee.github.io/2021/02/22/SweetyPie_4%EC%A3%BC%EC%B0%A8/</guid>
      <pubDate>Mon, 22 Feb 2021 14:26:27 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;SweetyPie - Airbnb 클론코딩 TIL (2주차: 21.02.08 ~ 21.02.14)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;21.02.17(수) ~ 21.02.27(일) : 홍대 에어비앤비 합숙&lt;/li&gt;
&lt;li&gt;배포 전 디테일한 작업 마무리, 모든 페이지 통합 및 netlify를 이용한 배포&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><!-- toc -->]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/project/">project</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/">프로젝트</category>
      
      <category domain="https://hanseul-lee.github.io/tags/Fastcampus/">Fastcampus</category>
      
      <category domain="https://hanseul-lee.github.io/tags/SweetyPie/">SweetyPie</category>
      
      
      <comments>https://hanseul-lee.github.io/2021/02/22/SweetyPie_4%EC%A3%BC%EC%B0%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[프로젝트] SweetyPie - Airbnb 클론코딩 TIL (3주차: 21.02.15 ~ 21.02.21)</title>
      <link>https://hanseul-lee.github.io/2021/02/15/SweetyPie_3%EC%A3%BC%EC%B0%A8/</link>
      <guid>https://hanseul-lee.github.io/2021/02/15/SweetyPie_3%EC%A3%BC%EC%B0%A8/</guid>
      <pubDate>Mon, 15 Feb 2021 14:26:21 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;SweetyPie - Airbnb 클론코딩 TIL (3주차: 21.02.15 ~ 21.02.21)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;21.02.17(수) ~ 21.02.27(일) : 홍대 에어비앤비 합숙&lt;/li&gt;
&lt;li&gt;api 연동 및 개별 페이지 통합&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><!-- toc --><h2 id="21-02-17-수-21-02-27-일-홍대-에어비앤비-합숙"><a href="#21-02-17-수-21-02-27-일-홍대-에어비앤비-합숙" class="headerlink" title="21.02.17(수) ~ 21.02.27(일) : 홍대 에어비앤비 합숙"></a>21.02.17(수) ~ 21.02.27(일) : 홍대 에어비앤비 합숙</h2><h3 id="1일차-21-02-15-월요일"><a href="#1일차-21-02-15-월요일" class="headerlink" title="1일차 - 21.02.15 월요일"></a>1일차 - 21.02.15 월요일</h3><ul><li>오늘 한 것<ul><li>Payment에서 RoomDetailGuestEditPopup 구현<ul><li>UI 구현</li><li>성인, 어린이, 유아 클릭 시, url query에 변경사항 실시간 반영 로직 구현<br>(참고: <a href="https://www.fbchandra.com/developers/add-remove-query-string-url-without-reloading-page">https://www.fbchandra.com/developers/add-remove-query-string-url-without-reloading-page</a> )</li></ul></li></ul></li><li>오늘의 이슈<ul><li>팀 로고 정하기!<br>백엔드 재복님이 갑자기 너무 예쁜 디자인의 로고 5개를 만들어서 투표에 올리셨다. 각자 원하는 걸 투표했는데 정말 센스있고 예뻐서 감동받았다. 최종 후보에 오른 5가지 중에 가장 인기가 많았던 아래 로고가 우리 SweetyPie의 로고로 뽑혔다.<div class="figure center" style="width:;"><img class="fig-img" src="logo_PK.png" alt=""></div></li></ul></li></ul><br><h3 id="2일차-21-02-16-화요일"><a href="#2일차-21-02-16-화요일" class="headerlink" title="2일차 - 21.02.16 화요일"></a>2일차 - 21.02.16 화요일</h3><ul><li>오늘 한 것<ul><li>Payment에서 RoomDetailGuestEditPopup에서 totalGuest 계산 및 url 반영 구현<ul><li>문제점 : setState가 비동기로 작동하므로 url에 반영이 한 박자 늦어짐.<br>=&gt; totoalGuest를 직접 url에 반영해 빼오지 말고, 필요한 부분에서 url의 adult, child, infant를 더해서 계산할 것</li></ul></li></ul></li></ul><br><ul><li><p>우영강사님 트러블 슈팅(14:00 ~ 14:50)</p><ul><li>release 단계에서 하는 것 - ex. gulf를 통한 테스트 자동화</li><li>commit을 잘게 잘라서 할 것<br>이는 나중에 회사에서 업무 시, 인사 고과 평가에서도 좋음<br>git organization의 Insights -&gt; Contributions에 들어가면 아래와 같이 각 팀원 별 commit과 같은 기여도를 한 눈에 파악할 수 있다.</li></ul><div class="figure center" style="width:900px;"><img class="fig-img" src="commit.png" style="width:900px;"alt="git organization -> Insights -> Contributions"><span class="caption">git organization -> Insights -> Contributions</span></div><ul><li>release finish할때 commit창 3번 떠야 함</li><li>pull request의 이슈close는 미처 파악하지 못한 이슈를 정리, 이슈에 대한 명시 용도로 사용하고 git project에서 실시간 진행 사항을 반영할 것</li><li>저번 hard reset을 통한 교훈을 얻은 것으로 우리 프로젝트의 역할은 다했다<br>  =&gt; 실제 프로젝트에서 탕비실에 갈 일은 없겠구나~ 감사하게 생각할 것~</li><li>내 주언어가 JS일때 node.js로 코테가 진행될 수 있으므로 조금씩 다른 부분이 있을 때 당황할 수 있으므로 잘 준비해 놓아야 함.</li><li>중간발표 준비<ul><li>중간발표.md로 간략히 정리</li><li>백엔드와 융화되어 발표할 수 있도록 준비할 것</li></ul></li></ul></li></ul><br><h3 id="3일차-21-02-17-수요일"><a href="#3일차-21-02-17-수요일" class="headerlink" title="3일차 - 21.02.17 수요일"></a>3일차 - 21.02.17 수요일</h3><ul><li>오늘 한 것<ul><li>네비게이션 Header 스크롤 이동 기능 구현<br>이렇게 컴포넌트에 id넣는게 아니라 컴포넌트 내부 최상위 div에 적용할 것!!!<div class="figure center" style="width:600px;"><img class="fig-img" src="id.png" style="width:600px;"alt=""></div></li></ul></li></ul><br><ul><li>중간 발표 준비<ul><li><a href="https://github.com/hanseul-lee/SweetyPie_Frontend/blob/main/%EC%A4%91%EA%B0%84%EB%B0%9C%ED%91%9C.md">중간발표.md</a> 파일 템플릿 생성 및 내용 작성</li><li>백엔드와 각 페이지 별 기능 및 api 설명 데모 시연 연습<br></li></ul></li><li>중간발표 피드백<ul><li>mark 강사님<ul><li>완성도는 프론트엔드에서 나옴<br>따라서 앞으로는 최대한 디테일을 올리는 방향으로, 시간 여유롭다고 다른 걸 추가하지 말 것</li></ul></li><li>백엔드 강사님<ul><li>팀 로고 정한 게 너무 좋음<br>책같은 거 쓸 때 동물 고르는 게 더 중요<br>ex) 조시룽 - 책 1년동안 쓰면 동물 고르는 건 2년ㅋㅋㅋ</li></ul></li></ul></li></ul><br><h3 id="4일차-21-02-18-목요일"><a href="#4일차-21-02-18-목요일" class="headerlink" title="4일차 - 21.02.18 목요일"></a>4일차 - 21.02.18 목요일</h3><ul><li><p>오늘 할 것</p><ul><li><input checked="" disabled="" type="checkbox"> Review - 리뷰 모달 완성</li><li><input checked="" disabled="" type="checkbox"> Calendar - 지우기 기능 구현</li><li><input checked="" disabled="" type="checkbox"> Calendar - url의 checkIn, checkOut 가져와 표시 기능 구현</li><li><input disabled="" type="checkbox"> Payment - 달력모달 넣기</li><li><input disabled="" type="checkbox"> Payment - 달력모달과 CalendarDetail 컴포넌트 연동</li><li><input checked="" disabled="" type="checkbox"> Payment - 1박 당 7%로 수수료 변경</li><li><input disabled="" type="checkbox"> <del>GuestPopup - 인원수에 따라 버튼 조정</del></li><li><input checked="" disabled="" type="checkbox"> Payment - 입력된 값에 따라 버튼 조정</li></ul><hr><ul><li><input disabled="" type="checkbox"> -박 나오는 것 고치기</li><li><input checked="" disabled="" type="checkbox"> 예약하기 클릭 시 url에 정보 담아 예약페이지로 이동</li><li><input checked="" disabled="" type="checkbox"> 이슈 템플릿 만들기</li></ul></li><li><p>오늘 배운 것</p><ul><li><p>null의 type은 object</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>  <span class="comment">//object</span></span><br></pre></td></tr></table></figure></li><li><p>url 쿼리 쉽게 가져다 쓰기</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="keyword">new</span> URL(<span class="built_in">window</span>.location.href);</span><br><span class="line">url.searchParams.delete(<span class="string">&#x27;checkIn&#x27;</span>);</span><br><span class="line">url.searchParams.delete(<span class="string">&#x27;checkOut&#x27;</span>);</span><br><span class="line">history.push(url.search);</span><br></pre></td></tr></table></figure><br></li></ul></li><li><p>오늘의 이슈</p><ul><li>우리 팀 커버곡 : Pink Sweat$ - At My Worst<br>오늘 영서가 튼 노래가 좋아서 이곡 뭐야? 했더니 저번에도 내가 좋아서 물어봤던 노래였다. 재민이도 좋아하는 노래고 가사도 너무 달달해서 바로 우리팀 SweetyPie 커버곡으로 정했다. 이제 로고에 이어 노래까지 완성~<div class="figure center" style="width:700px;"><img class="fig-img" src="music2.png" style="width:700px;"alt="우리 팀 단체로 프로필 뮤직 맞춘 모습"><span class="caption">우리 팀 단체로 프로필 뮤직 맞춘 모습</span></div></li></ul></li></ul><h3 id="5일차-21-02-19-금요일"><a href="#5일차-21-02-19-금요일" class="headerlink" title="5일차 - 21.02.19 금요일"></a>5일차 - 21.02.19 금요일</h3><ul><li>오늘 할 것<ul><li><input checked="" disabled="" type="checkbox"> GuestPopup - 인원수에 따라 버튼 조정 (이어서)<br>url과 state의 인원수 값 역시 초기화 되도록 하기</li><li><input checked="" disabled="" type="checkbox"> GuestPopup, 달력 - URLSearchParams로 리팩토링</li><li><input checked="" disabled="" type="checkbox"> Payment - 달력모달 넣기</li><li><input disabled="" type="checkbox"> <del>Payment - 달력모달과 CalendarDetail 컴포넌트 연동</del></li><li><input checked="" disabled="" type="checkbox"> -박 나오는 것 고치기</li><li><input disabled="" type="checkbox"> lazyloading 구현</li></ul><hr><ul><li><input disabled="" type="checkbox"> 예약하기 버튼 클릭 시 url에 adultNum,childNum,infantNum 중 존재하지 않는 값에 null이 아니라 0넣어주기</li></ul></li></ul><br><ul><li><p>오늘 배운 것</p><ul><li><p>url.searchParams 이용해서 쉽게 url 파라미터 가져오기</p><ul><li><p>수정 전 코드</p><div class="figure center" style="width:600px;"><img class="fig-img" src="url.png" style="width:600px;"alt=""></div><br></li><li><p>수정 후 코드</p><div class="figure center" style="width:600px;"><img class="fig-img" src="url2.png" style="width:600px;"alt=""></div></li></ul></li></ul></li></ul><br><h3 id="6-7일차-21-02-20-21-토-일요일"><a href="#6-7일차-21-02-20-21-토-일요일" class="headerlink" title="6,7일차 - 21.02.20,21 토,일요일"></a>6,7일차 - 21.02.20,21 토,일요일</h3><ul><li>주말에 할 것<ul><li><input checked="" disabled="" type="checkbox"> meta 태그 설정하기</li><li><input disabled="" type="checkbox"> <del>북마크 api 요청(POST, DELETE)</del></li><li><input checked="" disabled="" type="checkbox"> Payment - 달력모달과 CalendarDetail 컴포넌트 연동 에러 고치기(이어서)</li><li><input checked="" disabled="" type="checkbox"> 예약하기 버튼 클릭 시 url에 adultNum,childNum,infantNum 중 존재하지 않는 값에 null이 아니라 0넣어주기</li><li><input disabled="" type="checkbox"> <del>Header - 스크롤 시 nav Header보이게 하기</del></li><li><input disabled="" type="checkbox"> <del>lazyloading 구현</del></li><li><input disabled="" type="checkbox"> <del>환불 모달 만들기</del></li><li><input disabled="" type="checkbox"> 후기 0개 일 때, 레이아웃 만들기</li></ul></li></ul><br>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/project/">project</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/">프로젝트</category>
      
      <category domain="https://hanseul-lee.github.io/tags/Fastcampus/">Fastcampus</category>
      
      <category domain="https://hanseul-lee.github.io/tags/SweetyPie/">SweetyPie</category>
      
      
      <comments>https://hanseul-lee.github.io/2021/02/15/SweetyPie_3%EC%A3%BC%EC%B0%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[프로젝트] SweetyPie - Airbnb 클론코딩 TIL (2주차: 21.02.08 ~ 21.02.14)</title>
      <link>https://hanseul-lee.github.io/2021/02/08/SweetyPie_2%EC%A3%BC%EC%B0%A8/</link>
      <guid>https://hanseul-lee.github.io/2021/02/08/SweetyPie_2%EC%A3%BC%EC%B0%A8/</guid>
      <pubDate>Mon, 08 Feb 2021 14:26:14 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;SweetyPie - Airbnb 클론코딩 TIL (2주차: 21.02.08 ~ 21.02.14)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;21.02.10(수) ~ 21.02.14(일) : 설연휴 연남동 에어비앤비 합숙&lt;/li&gt;
&lt;li&gt;UI 작업 마무리 및 api 연동 시작&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><!-- toc --><h2 id="21-02-10-수-21-02-14-일-설연휴-연남동-에어비앤비-합숙"><a href="#21-02-10-수-21-02-14-일-설연휴-연남동-에어비앤비-합숙" class="headerlink" title="21.02.10(수) ~ 21.02.14(일) : 설연휴 연남동 에어비앤비 합숙"></a>21.02.10(수) ~ 21.02.14(일) : 설연휴 연남동 에어비앤비 합숙</h2><h3 id="이번-주-해야할-것"><a href="#이번-주-해야할-것" class="headerlink" title="이번 주 해야할 것"></a>이번 주 해야할 것</h3><ul><li>상세보기 페이지 (슬)<ul><li>건강 및 환불 모달 구현 (월)</li><li>반응형 Header</li><li>지도 UI 구현 -&gt; 검색한 위치 렌더링</li><li>API 요청해서 정보 받아오기 (GET)</li><li>달력 UI 구현 -&gt; 선택한 날짜 정보 받아오기</li><li>달력 UI 구현 -&gt; 여행 일정에 따른 예약 기능 구현</li></ul></li></ul><br><h3 id="1일차-21-02-08-월요일"><a href="#1일차-21-02-08-월요일" class="headerlink" title="1일차 - 21.02.08 월요일"></a><strong>1일차 - 21.02.08 월요일</strong></h3><ul><li><p>백엔드, 프론트엔드 2주차 스프린트 회의</p><ul><li>각자 진행사항 및 이번주 예정 계획 발표</li><li>백엔드 업무 이해 안되는 부분 질문<br>(입력한 데이터를 잘 정리해서 검증, 예쁘게 가공해서 넣어놓고 보내주고)</li></ul></li><li><p>오늘 한 일</p><ul><li>모달창 구현<ul><li>safetyModal - 레이아웃 완성, onShowModal 애니메이션 적용</li><li>reviewModal - 레이아웃 구현 중</li><li>스크롤</li></ul></li></ul></li><li><p>배운 점</p><ul><li><p>동찬오빠 말투 - 같은 말을 하더라도 부드럽게 하는 것<br>ex) 재민이한테 이슈 작성이 늦어서 이를 요청하는 상황<br>재민아 이슈 작성 좀 지금 해줘 (X)<br>→ 재민아 시간나면 혹시 이슈 작성 좀 해줄 수 있겠니~?<br>→ 재민아 시간나면 혹시 이슈 작성 좀 부탁해도 될까? <br></p><p>나 역시도 같은 말이라도 왠지 동찬오빠가 해주면 기분 나쁜 적이 없고 항상 부드럽게 넘어가게 되었던 것 같다.<br>함께 일하고 싶은 사람이 되기 위해 제일 중요한 것 중 하나이면서 내가 부족한 부분이 바로 이런 작은 부분에서의 세심함이라 생각한다.</p></li></ul></li></ul><br><h3 id="2일차-21-02-09-화요일"><a href="#2일차-21-02-09-화요일" class="headerlink" title="2일차 - 21.02.09 화요일"></a>2일차 - 21.02.09 화요일</h3><ul><li><p>오늘 한 일</p><ul><li>RoomDetailHeader 레이아웃 구현</li><li>Map에 구글지도 API 렌더링</li></ul></li><li><p>배운 점</p><ul><li>Potal을 쓰는 경우</li><li>이벤트 버블링통해 이벤트 조절<br>ex. onCloseModal을 최상위 요소에만 적용하고 버블링 통해 나머지 요소에 적용될 수 있게 하기</li><li>요소에 data-name 달고 target.dataset.name으로 조절<br><a href="https://developer.mozilla.org/ko/docs/Web/API/HTMLElement/dataset">https://developer.mozilla.org/ko/docs/Web/API/HTMLElement/dataset</a></li><li>onClick 내 화살표 함수 이해하기<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;button</span><br><span class="line">   className=<span class="string">&quot;flex items-center underline text-#717171&quot;</span></span><br><span class="line">   onClick=&#123;<span class="function">() =&gt;</span> onShowModal(<span class="string">&#x27;refund&#x27;</span>)&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><br></li></ul></li><li><p>우영강사님 트러블슈팅(16:00 ~ 16:50)</p><ul><li><p>release<br>  배포를 위한 용도<br>  auth 디버깅용 패스워드 찍었을 때 가리는 용도<br>  css comfile 같은 것 등등<br>  배포를 위한 작업이 끝나면 </p>  <br><p>  merge commit 2번뜸<br>  1st - main<br>  2nd - develop </p>  <br><p>  v0.0.1 과 같은 식으로 네이밍 할 것<br>  두번째 자리는 베타버전 - 사용자가 사용할 수준의 개발이 이뤄졌을때</p><br></li><li><p>코딩 컨벤션 수정 - git issue와 pull request 연결</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git commit</span><br><span class="line"></span><br><span class="line">docs: Create README.md </span><br><span class="line"></span><br><span class="line">resloved: #1 // 최종 커밋할 때만 작성</span><br><span class="line"></span><br><span class="line">// 이후 :wq 누르고 나가기</span><br></pre></td></tr></table></figure><ul><li>(주의) <code>git commit -m</code> 하지 말고 <code>git commit</code> 한 후 들어가서 내용 수정할 것</li><li>만약 최종 커밋 때 이슈 번호 다는 것 까먹었다면 pull request 내용 란에 작성해서 연동도 가능</li></ul></li><li><p>코드리뷰 예시</p><div class="figure center" style="width:;"><img class="fig-img" src="코드리뷰_01.png" alt=""></div> <br><div class="figure center" style="width:;"><img class="fig-img" src="코드리뷰_02.png" alt=""></div></li><li><p>Windows 꿀팁<br><a href="https://docs.microsoft.com/en-us/windows/powertoys/">https://docs.microsoft.com/en-us/windows/powertoys/</a><br><a href="https://docs.microsoft.com/en-us/windows/wsl/">https://docs.microsoft.com/en-us/windows/wsl/</a></p></li></ul></li></ul><br><ul><li>Mark강사님 트러블슈팅(20:00 ~ 20:50)<ul><li>(질문1) Potal을 쓰면 좋은 이유, 모달 생성시 z-index에 대한 이해<br>  =&gt; potal을 쓰는 게 다 좋은 게 아니다<br>  사실 컴포넌트를 이용해 모달은 만드는 게 더 많이 사용하는 방법임<br>  모달이 index.html에서 <code>&lt;div id=&#39;modal&#39;&gt;</code>이 root보다 더 아래에 있으므로 우선순위가 위임<br>  따라서 z-index를 조절하는 게 아님<br>  우리가 이를 조절하려면 tailwind.config에서 모달의 z-index를 조절할 것</li><li>(질문2) Hash로 header nav 이동방법<br>React에서 Link가 아닌 a태그를 직접적으로 사용해도 되는지?<br>  =&gt; a태그로 이동하자!<br>  <a href="https://github.com/ReactTraining/react-router/issues/394">https://github.com/ReactTraining/react-router/issues/394</a><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src &gt; components &gt; roomDetail &gt; RoomDetailHeader.jsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> RoomDetailHeader = <span class="function">(<span class="params">&#123; scrollHeader &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// nav 메뉴 클릭 시 해당 컴포넌트로 스크롤 이동</span></span><br><span class="line">  <span class="keyword">const</span> onScrollNav = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    <span class="keyword">const</span> id = e.target.href.split(<span class="string">&#x27;#&#x27;</span>)[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">const</span> scrollTargetId = <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">    <span class="built_in">window</span>.scrollTo(&#123;</span><br><span class="line">      left: <span class="number">0</span>,</span><br><span class="line">      top: scrollTargetId.offsetTop - <span class="number">89</span>,</span><br><span class="line">      behavior: <span class="string">&#x27;smooth&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div &gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;a href=<span class="string">&quot;#photos&quot;</span> onClick=&#123;onScrollNav&#125;&gt;</span><br><span class="line">          사진</span><br><span class="line">        &lt;/a&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><br><h3 id="3일차-21-02-10-수요일"><a href="#3일차-21-02-10-수요일" class="headerlink" title="3일차 - 21.02.10 수요일"></a>3일차 - 21.02.10 수요일</h3><ul><li><p>이슈 잘게 쪼개서 branch 생성하기 위해 현재까지의 작업 git organization merge<br>  =&gt; 여기서 git rebase 및 git reset –hard 로 인한 문제 발생😡😡😡<br>  cf) 참고 자료<br>  <a href="https://www.google.com/search?q=Not+possible+to+fast-forward,+aborting.&oq=Not+possible+to+fast-forward,+aborting.&aqs=chrome..69i57j0j0i30j0i30i395j0i5i30i395l3j69i60.479j1j1&sourceid=chrome&ie=UTF-8">https://www.google.com/search?q=Not+possible+to+fast-forward%2C+aborting.&amp;oq=Not+possible+to+fast-forward%2C+aborting.&amp;aqs=chrome..69i57j0j0i30j0i30i395j0i5i30i395l3j69i60.479j1j1&amp;sourceid=chrome&amp;ie=UTF-8</a><br>  <a href="https://stackoverflow.com/questions/13106179/fatal-not-possible-to-fast-forward-aborting/43460847">https://stackoverflow.com/questions/13106179/fatal-not-possible-to-fast-forward-aborting/43460847</a><br>  <a href="https://junwoo45.github.io/2019-10-23-rebase/">https://junwoo45.github.io/2019-10-23-rebase/</a><br>  <a href="https://git-scm.com/book/ko/v2/Git-%EB%B8%8C%EB%9E%9C%EC%B9%98-Rebase-%ED%95%98%EA%B8%B0">https://git-scm.com/book/ko/v2/Git-%EB%B8%8C%EB%9E%9C%EC%B9%98-Rebase-%ED%95%98%EA%B8%B0</a></p><br></li><li><p>github 순서 다시 정리</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">팀장 레포에서 이슈 생성</span><br><span class="line"></span><br><span class="line">git flow feature start 브랜치명(새 작업 브랜치 생성)</span><br><span class="line">코드 작성</span><br><span class="line"></span><br><span class="line">git add</span><br><span class="line">git commit</span><br><span class="line">&gt; feat: 로그인 모달 구현 (#123)</span><br><span class="line"></span><br><span class="line">git flow feature finish 브랜치명 (작업 브랜치 닫고 develop으로 이동)</span><br><span class="line"></span><br><span class="line">만약 conflict 발생 시</span><br><span class="line">git pull upstream develop (내쪽에서 conflict 해결)</span><br><span class="line">git push origin develop</span><br><span class="line"></span><br><span class="line">Github에서 Pull request</span><br><span class="line">1. 제목 및 내용에 이슈 및 작업 내용 상세히 작성</span><br><span class="line">2. 내용 마지막에 closed: #123</span><br><span class="line">3. 풀리퀘 올린 후, 옆에 Labels, Projects, Milestone, Linked issues 꼭 지정</span><br></pre></td></tr></table></figure><br></li><li><p>우영강사님 트러블슈팅 (00:10 ~ 1:00)</p><ul><li>git reset –hard로 인해<br>저번 주 금요일 merge한 후, 내 local에 저장되었던 모든 commit과 작업 내역들이 날라갔다.<ul><li>git push origin develop으로 내 origin에 log를 찍지 않았기 때문에 복구 방법은 X</li><li>Reabse 과정에서 문제가 생긴다면 rebase abort를 해야한다.<br>→ abort를 한다면 reabase 하기 전으로 돌아간다</li><li>만약 git pull upstream develop에서 또 fast-foword 에러가 난다면 rebase로 해결하지말고<br><code>git fetch upstream develop</code> -&gt; <code>git merge FETCH_HEAD</code> 로 처리할 것<br>pull = fetch + merge</li></ul></li></ul><p>사실 처음에 얘기를 듣고 예전에 연남동 때처럼 모든게 정지된 것처럼 굳거나 당황하지는 않았다. 오히려 웃으면서 아~ 정말요~? 이랬는데 강사님께서 계속 괜찮다고, 너무 걱정하지 말라고, 액땜한 거라고, 실무에서도 실수할 수 있는 걸 미리 겪어서 다행이라고(만약 그렇다면 탕비실로…..ㅎ) 말씀해 주셨다. 심지어 이어서 1시간 가량 깃 관련 질문하고 끝난 이후에 동찬오빠한테 우리 에어비앤비 주소도 물어보고 치킨 기프티콘까지 보내주셨다ㅠㅠㅠ감동ㅠㅠㅠ<br>덕분에 한 걸음 뒤로 물러나지긴 해도 깃에 대해 이해도 좀 더 높아지고 조심해야 할 reset –hard에 대해서도 확실히 경각심을 갖게 되었다.</p><br><ul><li><strong>git pull request와 issue 연결</strong>하는 방법 제대로 하고 있는지 확인</li><li>git pull upstream develop 후 conflict 해결 후 commit message<br>‘머지 컨플릭, 풀리퀘번호, 이슈번호 해결했다’는 내용 담을 것</li><li><strong>pull request message</strong><br>내용에 closed 외에 이슈 내용에 대해 ‘<strong>어떻게</strong>‘ 해결했는지에 대한 코멘트 상세히 작성할 것!!!</li><li><strong>이슈를 잘게 나눠서 save point를 많이 만들어두는것이 좋다</strong><br>이슈 상세히 작성하고 이에 따른 브랜치 만들 때 팁</li></ul><p><strong>브랜치 이름 -&gt; 겹치지 않는 첫 대문자 이후 기능을 설명할 두 단어 정도 붙여라</strong><br>ex) Main에서 리스트 만드는 작업 시, M_makeList</p></li></ul><br><h3 id="4일차-21-02-11-목요일"><a href="#4일차-21-02-11-목요일" class="headerlink" title="4일차 - 21.02.11 목요일"></a>4일차 - 21.02.11 목요일</h3><ul><li><p>배운 점</p><ul><li><p><code>npm start</code>할 때 다음과 같은 에러가 나는 건 conflict 해결 안 된 게 남아있다는 것<br>따라서 conflict 해결하고 다시 npm start 할 것</p><div class="figure center" style="width:;"><img class="fig-img" src="2021-02-11.png" alt=""></div> <Br></li><li><p>git 파일이름 변경</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git mv ./src/assets/Svg.js ./src/assets/svg.js</span><br></pre></td></tr></table></figure><p>오른쪽 클릭 후 변경하는 게 아니라 bash에서 위 커멘드로 입력해 주어야 commit 해서 이력남기기 가능</p><br></li><li><p>동찬오빠 redux module과 코드 보면서 미들웨어, 사가, 스토어 및 전체적인 구조와 흐름에 대한 이해</p><ul><li>직접 saga를 도입해서 api와 연결하기 전에 궁금한 점에 대해 집요하게 오빠에게 물어봤는데 시간을 보니 어느새 3시간 넘게 얘기를 하고 있었다. 이해가 안되는 부분에 대해 끈질기게 질문했는데 하나하나 이해될 때까지 설명해 주려고 한 동찬오빠에게 너무 고맙고 감사하다.</li><li>내가 get한 정보를 store에 관리해야하는 이유 -&gt; 다른 팀원들이 사용하기 때문(ex. 결제페이지에서 해당 room 정보 받아오기)</li></ul></li></ul></li></ul><br><h3 id="5일차-21-02-12-금요일"><a href="#5일차-21-02-12-금요일" class="headerlink" title="5일차 - 21.02.12 금요일"></a>5일차 - 21.02.12 금요일</h3><ul><li><p>오늘 한 것</p><ul><li>roomDetail saga 및 API 연동중</li><li>roomDetail saga 연동 오류 해결</li></ul></li><li><p>배운 점</p><ul><li><p>스토어에 있는 상태들은 container에서 useSelector로 가져올 것</p></li><li><p>payload로 room_id를 보낸다. 왜냐하면 url room_id에 따라 DB를 보내주기 때문!</p></li><li><p>유효성 검사의 중요성 (roomDetail saga 연동 오류 해결)</p><p>⇒ 각 컴포넌트에서 api로 받아오는 정보들이 props로 전달되는데 saga 과정에서 loading이 false과 되기 전에 실행이 된다면 data와 연동되기 전에 코드가 실행되어 에러가 뜬다.<br>따라서 <code>loading === false &amp;&amp; (props...)</code> 와 같은 유효성검사를 받드시 시행해 주어야 data가 제대로 받아온 후 컴포넌트의 렌더링이 진행될 수 있다. </p></li></ul></li></ul><br><h3 id="6-7일차-21-02-13-14-토-일요일"><a href="#6-7일차-21-02-13-14-토-일요일" class="headerlink" title="6,7일차 - 21.02.13,14 토, 일요일"></a>6,7일차 - 21.02.13,14 토, 일요일</h3><ul><li>오늘 한 것<ul><li>roomDetail API 연동</li><li>safetyModal 구현</li><li>Map API 연동</li></ul></li></ul><Br><ul><li>백엔드와 ZOOM 미팅(18:30 ~ 19:30)<ul><li>문제점<ol><li>백엔드와 프론트의 업무가 다르다는 이유로 우리의 업무사항을 시시각각 공유하지 못한 것. 나아가 설 연휴 및 에어비앤비로 따로 떨어져 작업했기 때문에 이러한 점이 더욱 심화되었음.</li><li>백엔드 분들이 맡은 부분을 정확히 파악하지 못함. 따라서 백엔드 팀장님인 재복님께만 계속해서 질문함. 이로인해 소통의 양극화가 심해짐.</li><li>api를 연동하는 데 있어 어디까지가 백엔드의 영역이고 어디까지가 프론트의 영역인지를 파악하는데 서로 어려움을 겪음. 프론트쪽에서 api에 대해 수정하고 싶은 부분이 있을 때 바로바로 백엔드 분들께 수정 사항에 대해 요청했는데, 이 부분에 있어 백엔드 분들의 어려움을 충분히 고려하지 않았음.</li></ol></li><li>해결과정 및 결론<ul><li>zoom 회의를 통해 백엔드 분들의 문제점과 불만사항에 대해 정중하게 얘기를 듣고 생각하는 시간을 가짐.</li><li>api를 연동하는 데 있어 어디까지가 프론트 선에서 해결가능한지 우선적으로 생각하고 요청해보기로 함.</li><li>이번 주 이후 학원 외에 에어비앤비에서 작업함에 있어 진행사항에 대해 소통이 원할하지 못할 경우를 대비해 오늘 진행한 일과 더불어 앞으로 남은 일에 대해 매일 정리해 slack에 공유하기로 함.</li></ul></li></ul></li></ul><br>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/project/">project</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/">프로젝트</category>
      
      <category domain="https://hanseul-lee.github.io/tags/Fastcampus/">Fastcampus</category>
      
      <category domain="https://hanseul-lee.github.io/tags/SweetyPie/">SweetyPie</category>
      
      
      <comments>https://hanseul-lee.github.io/2021/02/08/SweetyPie_2%EC%A3%BC%EC%B0%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[프로젝트] SweetyPie - Airbnb 클론코딩 TIL (1주차: 21.02.01 ~ 21.02.07)</title>
      <link>https://hanseul-lee.github.io/2021/02/02/SweetyPie_1%EC%A3%BC%EC%B0%A8/</link>
      <guid>https://hanseul-lee.github.io/2021/02/02/SweetyPie_1%EC%A3%BC%EC%B0%A8/</guid>
      <pubDate>Tue, 02 Feb 2021 14:05:05 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;SweetyPie - Airbnb 클론코딩 TIL (1주차: 21.02.01 ~ 21.02.07)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;전반적인 UI 작업&lt;/li&gt;
&lt;li&gt;git 초기화 및 project 셋팅&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><!-- toc --><h3 id="1일차-21-02-01-월요일"><a href="#1일차-21-02-01-월요일" class="headerlink" title="1일차 - 21.02.01 월요일"></a>1일차 - 21.02.01 월요일</h3><ul><li><p>git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git flow init</span><br><span class="line">$ git flow feature start RoomDetail</span><br><span class="line">$ git checkout develop</span><br><span class="line">$ npm ci &#x2F;&#x2F; npm i를 대체하면서 모든 걸 통합해주는 것</span><br><span class="line">$ nvm use 14.15.1</span><br></pre></td></tr></table></figure></li><li><p>index.css</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">html &#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">  font-size: 10px;</span><br><span class="line">&#125;</span><br><span class="line">@import url(&#39;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;moonspam&#x2F;NanumBarunGothic@latest&#x2F;nanumbarungothicsubset.css&#39;);</span><br><span class="line">*,</span><br><span class="line">*::before,</span><br><span class="line">*::after &#123;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line">a &#123;</span><br><span class="line">  color: inherit;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">&#125;</span><br><span class="line">.a11y-hidden,</span><br><span class="line">legend &#123;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  position: absolute;</span><br><span class="line">  clip: rect(0 0 0 0);</span><br><span class="line">  &#x2F;* IE 6,7 *&#x2F;</span><br><span class="line">  clip: rect(0, 0, 0, 0);</span><br><span class="line">  width: 1px;</span><br><span class="line">  height: 1px;</span><br><span class="line">  margin: -1px;</span><br><span class="line">  border: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">.clearfix::after &#123;</span><br><span class="line">  content: &#39;&#39;;</span><br><span class="line">  display: block;</span><br><span class="line">  clear: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>git rebase</p></li></ul><div class="figure center" style="width:;"><img class="fig-img" src="rebase.png" alt=""></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin develop --rebase</span><br></pre></td></tr></table></figure><br><h3 id="2일차-21-02-02-화요일"><a href="#2일차-21-02-02-화요일" class="headerlink" title="2일차 - 21.02.02 화요일"></a>2일차 - 21.02.02 화요일</h3><ul><li><p>roomDetail 컴포넌트 구현</p><ul><li>Title.jsx</li><li>Photos.jsx - 구현중</li><li>Introduction.jsx</li><li>Icons.jsx</li><li>Description.jsx</li><li>Beds.jsx</li><li>CalendarDetail.jsx</li><li>Payment.jsx - 구현중</li></ul></li><li><p>해야할 것</p><ol><li>Payment.jsx 구현 마무리</li><li>react potals 이용한 팝업창 구현 &amp; 이해하기 (<a href="https://ko.reactjs.org/docs/portals.html">https://ko.reactjs.org/docs/portals.html</a>)</li><li>roomDetail 나머지 아랫부분 구현 완성</li><li>DB에서 받아온 accommodationDesc 개행 문자마다 개행 처리해주기</li><li>금액 세자리수마다 , 찍어주기</li><li>금액 소수점 버리기 적용하기</li></ol></li></ul><br><h3 id="3일차-21-02-03-수요일"><a href="#3일차-21-02-03-수요일" class="headerlink" title="3일차 - 21.02.03 수요일"></a>3일차 - 21.02.03 수요일</h3><ul><li><p>오늘 한 것</p><ol><li><p>금액 소수점 버리기 적용하기<br><code>Math.round()</code>: 인수로 전달된 숫자의 소수점 이하를 반올림한 정수 반환</p><p><code>toFixed()</code>: 숫자를 반올림하여 문자열로 반환, 인수 생략 시 기본값 0</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Number.prototype.toFixed</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fees = (price * <span class="number">0.07</span>).toFixed();</span><br><span class="line"><span class="keyword">const</span> fees = <span class="built_in">Math</span>.round(price * <span class="number">0.07</span>)</span><br></pre></td></tr></table></figure></li><li><p>Payment에서 자식 엘리먼트들이 div에 종속되지 않는 문제 해결</p></li><li><p>동찬오빠와 전체 레이아웃 비율 통일</p></li><li><p>PM 트러블 슈팅 (3시 ~ 3시 50분)</p><ul><li><p>Github 이슈관리 체크</p></li><li><p>문서화<br>꼭 문서화로 남길 것!!<br>Technical writer</p><ul><li>github 해당 이슈 댓글 관리로 관리할 것 </li><li>README.md 템플릿으로 작성해놓고 실시간으로 추가하고 수정할 것</li><li>API관리 - 나중에 backend에서 만들어주면 POSTMAN으로 확인할 것</li></ul></li><li><p>git commit - 컴포넌트 단위로 잘게 쪼개서 commit할 것</p></li><li><p>git - reset보다는 revert</p></li><li><p>git - rebase 지양할 것</p></li><li><p>각 스프린트가 끝나면 메인 브랜치에 완성된 프로덕트 커밋 찍을 것<br><code>$ git flow release start(finish) &#123;version_name&#125;</code></p></li><li><p>페이스를 꾸준히 유지할 것 - 정해진 시간에 자고, 일어난 이후에 계속 키보드에 손을 잡고 있을 것</p></li></ul></li><li><p>git revert<br>이전에 작업했던 기록들을 <code>git add .</code>로 처리한 걸 다시 컴포넌트 별로 commit하기 위해 git revert를 사용했다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog // 이전 기록 확인</span><br><span class="line">$ git revert HEAD@&#123;번호&#125; // 돌아가고 싶은 번호로 revert</span><br></pre></td></tr></table></figure></li><li><p>git revert 취소</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog // 이전 기록 확인</span><br><span class="line">$ git reset --hard HEAD@&#123;번호&#125; // 원하는 곳으로 이동</span><br></pre></td></tr></table></figure><div class="figure center" style="width:;"><img class="fig-img" src="revert.png" alt=""></div></li><li><p>Mark 강사님 트러블 슈팅 (19시 ~ 19시 30분)</p></li></ol></li></ul><br><h3 id="4일차-21-02-04-목요일"><a href="#4일차-21-02-04-목요일" class="headerlink" title="4일차 - 21.02.04 목요일"></a>4일차 - 21.02.04 목요일</h3><ul><li><p>roomDetail 컴포넌트 구현</p><ul><li>Map</li><li>Host</li><li>ThingsToKnow</li><li>Payment - 금액 소수점 3째자리 콤마(,)찍기 함수 추가</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">numberWithCommas</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x.toString().replace(<span class="regexp">/\B(?=(\d&#123;3&#125;)+(?!\d))/g</span>, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ReviewProfile - 날짜 년, 월만 나오게 하기</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> createdDate = <span class="string">&#x27;2021 - 02 - 06&#x27;</span></span><br><span class="line">&#123;createdDate.split(<span class="string">&#x27; -&#x27;</span>)[<span class="number">0</span>]&#125;년 &#123;createdDate.split(<span class="string">&#x27; -&#x27;</span>)[<span class="number">1</span>]&#125;월</span><br></pre></td></tr></table></figure></li><li><p>해야할 것</p><ul><li>Map, Calendar - API 연결</li><li>ThingsToKnow - 링크에 SVG 화살표 넣고 팝업창 구현</li><li>Payment - 날짜, 인원 팝업 만들기 &amp; 연결</li><li>DB data 연동 제대로 변수 넣었는지 확인</li></ul></li></ul><br><h3 id="5일차-21-02-05-금요일"><a href="#5일차-21-02-05-금요일" class="headerlink" title="5일차 - 21.02.05 금요일"></a>5일차 - 21.02.05 금요일</h3><ul><li><p>github merge로 1주차 스프린트 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git flow feature finish RoomDetail</span><br><span class="line">$ git push origin develop</span><br><span class="line">내 레포에서 pull request</span><br><span class="line"></span><br><span class="line">이후</span><br><span class="line">$ git remote add upstream 주소</span><br><span class="line">$ git pull upstream develop</span><br><span class="line">$ npm ci</span><br></pre></td></tr></table></figure></li><li><p>github rebase 관련 이슈</p></li><li><p>트러블슈팅 - Mark강사님 (18:00 ~ 18:50)</p><ul><li>DOM에 접근해 data를 쓰려면 -&gt; dataset 사용해볼 것</li><li>컴포넌트에도 ref를 달 수 있음 -&gt; forwardRef</li></ul></li></ul><br><h3 id="6-7일차-21-02-06-21-02-07-토-일요일"><a href="#6-7일차-21-02-06-21-02-07-토-일요일" class="headerlink" title="6,7일차 - 21.02.06, 21.02.07 토, 일요일"></a>6,7일차 - 21.02.06, 21.02.07 토, 일요일</h3><ul><li>google map API 연습</li><li>팝업 UI 구현중</li><li>팀 회식❤</li></ul>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/project/">project</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/">프로젝트</category>
      
      <category domain="https://hanseul-lee.github.io/tags/Fastcampus/">Fastcampus</category>
      
      <category domain="https://hanseul-lee.github.io/tags/SweetyPie/">SweetyPie</category>
      
      
      <comments>https://hanseul-lee.github.io/2021/02/02/SweetyPie_1%EC%A3%BC%EC%B0%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[프로젝트] SweetyPie - Airbnb 클론코딩 기획 TIL (0주차: 21.01.25 ~ 21.01.31)</title>
      <link>https://hanseul-lee.github.io/2021/01/24/SweetyPie_0%EC%A3%BC%EC%B0%A8(%EA%B8%B0%ED%9A%8D)/</link>
      <guid>https://hanseul-lee.github.io/2021/01/24/SweetyPie_0%EC%A3%BC%EC%B0%A8(%EA%B8%B0%ED%9A%8D)/</guid>
      <pubDate>Sun, 24 Jan 2021 14:58:31 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;미니프로젝트 기획 TIL (0주차: 21.01.25 ~ 21.01.31)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PM특강&lt;/li&gt;
&lt;li&gt;주제 선정 및 전반적인 기획&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><!-- toc --><h2 id="1일차-21-01-25-월요일"><a href="#1일차-21-01-25-월요일" class="headerlink" title="1일차 - 21.01.25 월요일"></a>1일차 - 21.01.25 월요일</h2><ul><li><p>PM특강</p><ul><li>소프트웨어 개발 생명주기</li><li>Agile 방법론</li></ul></li><li><p>백엔드분들과 첫 만남 - 나영원, 이재복, 임준철님</p></li><li><p>주제 선정 - Airbnb</p></li><li><p>Requirement Analysis - 고객, 기능, 외부 인터페이스</p><ul><li>구현하고자하는 페이지 선정</li><li>크롤링에 대한 고민(벡엔드)</li></ul></li><li><p>Wireframe 및 figma로 페이지 레이아웃 및 기능 설명 역할 분배</p></li></ul><br><h2 id="2일차-21-01-26-화요일"><a href="#2일차-21-01-26-화요일" class="headerlink" title="2일차 - 21.01.26 화요일"></a>2일차 - 21.01.26 화요일</h2><ul><li>Zoom 회의 1차 - FrontEnd<ul><li>wireframe 및 기능 figma와 노션으로 정리</li></ul></li><li>Zoom 회의 2차 - FrontEnd &amp; BackEnd<ul><li>wireframe 변경사항 공유</li><li>실제 레이아웃 디자인 노션에 정리한 것 공유</li><li>각 페이지별 상세 기능 및 필요한 DB 정리 공유</li><li>DB에서 받을 수 있는 것과 default로 둘 것 논의</li></ul></li></ul><br><h2 id="3일차-21-01-27-수요일"><a href="#3일차-21-01-27-수요일" class="headerlink" title="3일차 - 21.01.27 수요일"></a>3일차 - 21.01.27 수요일</h2><ul><li><p>중간 기획 발표 준비</p><ul><li>Wireframe 및 figma 다듬기</li></ul></li><li><p>중간 기획 발표</p></li><li><p>중간 기획 발표 피드백</p><ul><li>기획에 필요한 계획들에 대한 내용이 많이 빠져있음</li><li>결제 및 SNS와 연동한 로그인 부분(카카오, 페이스북 등) 뺄 것. 휴대폰 로그인 인증도 더미로 처리하는 것이 좋음.</li><li>계획한 페이지가 너무 많아보임. 더 쳐내도 될 듯함.</li><li>API 문서화 필요</li><li>그 외 백엔드 부분 피드백</li><li>백엔드와 충분한 대화가 부족해 보임. 팀 프로젝트인 만큼 백엔드와 프론트가 서로 기능 및 인터페이스에 대해 사전에 충분히 논의할 것.</li></ul><p>=&gt; 불완전한 걸 많이 하기보다 조금이라도 완성도 있게 나가는 방향으로 할 것<br>별 거 없지 하고 하다보면 계속 할일이 늘어날 것임.</p></li></ul><ul><li><p>중간 기획 발표 후 전체 회의</p><ul><li><p>매니저님 최종 프로젝트 당시 기획안 PPT 구경</p><p>=&gt; 우리는 레이아웃만 준비한 것, 회사 및 매니저님 기획 발표에서 준비하는 것의 90% 이상이 빠져있었음. 따라서 강사님들의 피드백이 부족할 수밖에 없었고 </p></li><li><p>최종 기획 보충 및 추가할 내용 정리(목표, 주제 선정 이유, 세부 기능 정리, API Design, Directory Structure, 코딩 컨벤션, 팀 이름, Daily Scrum &amp; Sprint 계획 등)</p></li><li><p>피드백 바탕으로 빼야할 부분 정리</p></li></ul></li></ul><br><h2 id="4일차-21-01-28-목요일"><a href="#4일차-21-01-28-목요일" class="headerlink" title="4일차 - 21.01.28 목요일"></a>4일차 - 21.01.28 목요일</h2><ul><li>최종 기획 발표 준비<ol><li>최종 기획안 발표 PPT 개요 짜기</li><li>공동목표 및 백엔드, 프론트엔드팀 목표 설정</li><li>각 페이지 별 세부 기능 정리(엑셀)</li><li>API Design - DB mockup 설계 (JSON형식) </li><li>1, 2차 구현 페이지 목표 설정</li><li>세부 페이지 레이아웃 수정 및 노션에 정리</li><li>github project로 Sprint Backlog 준비</li></ol></li></ul><br><h2 id="5일차-21-01-29-금요일"><a href="#5일차-21-01-29-금요일" class="headerlink" title="5일차 - 21.01.29 금요일"></a>5일차 - 21.01.29 금요일</h2><ul><li>최종 기획 발표 준비</li><li>최종 기획 발표<ul><li>slides.com/youngseo/deck</li></ul></li><li>최종 기획 발표 피드백<ul><li>배포에 대한 계획과 실행이 빠져있음 - 보충할 것</li><li>세션에서 인증 처리하는 것</li><li>엑셀보다는 최대한 문서화를 줄이고 공유가능한 github 하나에만 집중할 것</li></ul></li></ul><br><h2 id="6일차-21-01-30-토요일"><a href="#6일차-21-01-30-토요일" class="headerlink" title="6일차 - 21.01.30 토요일"></a>6일차 - 21.01.30 토요일</h2><ul><li>Tailwind Starter Kit 공부</li><li>Tailwind 공식 문서 읽고 React에 적용</li><li>react에서 Tailwind로 적용한 버튼 컴포넌트로 쪼개는 것 연습</li></ul><br><h2 id="7일차-21-01-31-일요일"><a href="#7일차-21-01-31-일요일" class="headerlink" title="7일차 - 21.01.31 일요일"></a>7일차 - 21.01.31 일요일</h2><ul><li><p>Tailwind Button.jsx 컴포넌트 완성</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ButtonColor = &#123;</span><br><span class="line">  pink:</span><br><span class="line">    <span class="string">&#x27;bg-red-500 hover:bg-red-600 text-white font-bold rounded transition-all duration-150 shadow-md focus:outline-none hover:animation-gradient&#x27;</span>,</span><br><span class="line">  gray:</span><br><span class="line">    <span class="string">&#x27;bg-gray-400 hover:bg-gray-500 text-white font-bold rounded transition-all duration-150 shadow-md focus:outline-none &#x27;</span>,</span><br><span class="line">  white:</span><br><span class="line">    <span class="string">&#x27;bg-white hover:bg-gray-100 text-grey-700 font-bold rounded transition-colors duration-150 shadow-md focus:outline-none focus:ring-2 focus:ring-indigo-400 border&#x27;</span>,</span><br><span class="line">  green:</span><br><span class="line">    <span class="string">&#x27;bg-green-600 hover:bg-green-700 text-white font-bold rounded transition-colors duration-150 shadow-md focus:outline-none &#x27;</span>,</span><br><span class="line">  black:</span><br><span class="line">    <span class="string">&#x27;bg-black hover:bg-gray-600 text-white font-bold rounded transition-colors duration-150 shadow-md focus:outline-none &#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ButtonSize = &#123;</span><br><span class="line">  sm: <span class="string">&#x27;h-9 px-5 m-2 text-xs transform focus:scale-90 &#x27;</span>,</span><br><span class="line">  md: <span class="string">&#x27;h-10 px-5 m-2 text-sm transform focus:scale-90&#x27;</span>,</span><br><span class="line">  lg: <span class="string">&#x27;w-full h-11 px-6 m-2 text-md transform focus:scale-90&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Button = <span class="function">(<span class="params">&#123; color, size, children &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> classNames = ButtonColor[color] + <span class="string">&#x27; &#x27;</span> + ButtonSize[size];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&#123;classNames&#125;</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Button;</span><br></pre></td></tr></table></figure></li></ul><div class="figure cetner" style="width:;"><img class="fig-img" src="button.png" alt=""></div>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/project/">project</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/">프로젝트</category>
      
      <category domain="https://hanseul-lee.github.io/tags/Fastcampus/">Fastcampus</category>
      
      <category domain="https://hanseul-lee.github.io/tags/SweetyPie/">SweetyPie</category>
      
      
      <comments>https://hanseul-lee.github.io/2021/01/24/SweetyPie_0%EC%A3%BC%EC%B0%A8(%EA%B8%B0%ED%9A%8D)/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[React] 리액트 라우터로 SPA 개발하기</title>
      <link>https://hanseul-lee.github.io/2021/01/05/React-13/</link>
      <guid>https://hanseul-lee.github.io/2021/01/05/React-13/</guid>
      <pubDate>Tue, 05 Jan 2021 04:33:09 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;리액트 라우터를 이용해 SPA를 개발하는 과정과 기본적인 사용법에 대해 알아보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><!-- toc --><h3 id="프로젝트-생성-및-라이브러리-설치"><a href="#프로젝트-생성-및-라이브러리-설치" class="headerlink" title="프로젝트 생성 및 라이브러리 설치"></a>프로젝트 생성 및 라이브러리 설치</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npx create-react-app router-tutorial</span><br><span class="line">$ cd router-tutorial</span><br><span class="line">$ npm i react-router-dom</span><br></pre></td></tr></table></figure><h3 id="라우터-적용-BrowserRouter로-감싸기"><a href="#라우터-적용-BrowserRouter로-감싸기" class="headerlink" title="라우터 적용 - BrowserRouter로 감싸기"></a>라우터 적용 - BrowserRouter로 감싸기</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;BrowserRouter&gt;</span><br><span class="line">        &lt;App /&gt;</span><br><span class="line">    &lt;/BrowserRouter&gt;</span><br><span class="line">    documnet.getElementById(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="Route-컴포넌트로-특정-주소에-연결"><a href="#Route-컴포넌트로-특정-주소에-연결" class="headerlink" title="Route 컴포넌트로 특정 주소에 연결"></a><strong>Route 컴포넌트로 특정 주소에 연결</strong></h3><p>정확한 path만을 명시하려면 <code>exact</code>를 붙여준다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">&quot;주소규칙&quot;</span> component=&#123;보여줄 컴포넌트&#125; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;Route path=<span class="string">&quot;/profile&quot;</span> exact component=&#123;Profile&#125; /&gt;</span><br></pre></td></tr></table></figure><h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h3><p><code>&lt;a&gt;</code> 태그와 비슷하지만 페이지 전환되지 X</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Link to=<span class="string">&quot;주소&quot;</span>&gt;내용&lt;/Link&gt;</span><br><span class="line"></span><br><span class="line">&lt;Link to=<span class="string">&quot;/profile&quot;</span>&gt;프로필&lt;/Link&gt;</span><br></pre></td></tr></table></figure><h3 id="URL-parameter와-query"><a href="#URL-parameter와-query" class="headerlink" title="URL parameter와 query"></a>URL parameter와 query</h3><p>페이지에 유동적인 값을 전달할 때 사용</p><ul><li><strong>parameter</strong><br>특정 아이디나 이름을 사용하여 조회할 때<br>ex.  <code>/profile/lemon</code></li></ul><br><ul><li><strong>query</strong><br>특정 키워드를 검색하거나 페이지에 필요한 옵션을 전달할 때<br>ex. <code>/about?details=ture</code> <br><br>location의 search값에서 조회 가능<br>search에서 특정 값을 읽어오려면 문자열 → 객체 형태로 변환해야 함<br>쿼리 문자열을 객체로 변환할 때 qs 라이브러리 사용 <code>npm install qs</code></li></ul><p><strong>쿼리의 파싱 결과값</strong>은 항상 <strong>문자열</strong>이라는 것에 주의할 것 (숫자는 parseInt사용)</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> qs form <span class="string">&#x27;qs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> query = qs.parse(location.search, &#123;</span><br><span class="line">  ignoreQueryPrefix: <span class="literal">true</span>                  <span class="comment">// 문자열 맨 앞의 ? 생략</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br><h3 id="서브라우트-sub-Route"><a href="#서브라우트-sub-Route" class="headerlink" title="서브라우트(sub Route)"></a>서브라우트(sub Route)</h3><p>라우트 내부에 또 라우트를 정의하는 것</p><br><h3 id="withRouter"><a href="#withRouter" class="headerlink" title="withRouter"></a>withRouter</h3><p>HoC(High-order Component)로 라우트로 사용된 컴포넌트가 아니더라도 history, location, match에 접근가능하게 해 줌</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; withRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br></pre></td></tr></table></figure><br><h3 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h3><p>여러 Route를 감싸서 그 중 일치하는 단 하나의 라우트만을 렌더링<br>Not Found 페이지도 구현 가능</p><br><hr><p><strong>Reference</strong></p><ul><li>김민준, 리액트를 다루는 기술</li></ul>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/">StudyLog</category>
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/React/">React</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/React/">React</category>
      
      
      <comments>https://hanseul-lee.github.io/2021/01/05/React-13/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[React] Hooks</title>
      <link>https://hanseul-lee.github.io/2021/01/01/React-8/</link>
      <guid>https://hanseul-lee.github.io/2021/01/01/React-8/</guid>
      <pubDate>Fri, 01 Jan 2021 04:34:22 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;리액트 v16.8에 새로 도입된 Hooks에 대해 알아보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><!-- toc --><p>*표시는 가장 빈번하게 사용되는 대표 Hooks 입니다.</p><br><h1 id="1-useState"><a href="#1-useState" class="headerlink" title="1. useState*"></a>1. useState*</h1><blockquote><p><strong>동적 상태 관리</strong></p></blockquote><p><code>const [state, setState] = useState(initialState);</code></p><ul><li>상태 유지 값과 그 값을 갱신하는 함수를 반환</li></ul><p><code>state</code> = initial state<br><code>setState</code> : state갱신 시 사용(Setter함수)</p><br><ul><li><p>주의<br>함수를 호출 (X) / 함수를 전달 (O)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onIncrease&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span> // 전달</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onIncrease()&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span> // 호출하면 안됨</span><br></pre></td></tr></table></figure></li><li><p>함수형 업데이트는 주로 나중에 컴포넌트를 최적화를 하게 될 때 사용</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> onIncrease = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//    setNumber(number + 1);</span></span><br><span class="line">    setNumber(<span class="function"><span class="params">prevNumber</span> =&gt;</span> prevNumber + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><br><h1 id="2-useEffect"><a href="#2-useEffect" class="headerlink" title="2. useEffect*"></a>2. useEffect*</h1><blockquote><p>리액트 컴포넌트가 <strong>렌더링될 때마다</strong> 특정 작업을 수행하도록 설정 <strong>(2번째 파라미터가 바뀔때)</strong></p></blockquote><br><ul><li><p>사용 예시</p><ol><li>마운트 될 때만 실행 (componentDidmount)<ul><li>2번째 파라미터(deps)로 <strong>[] 빈배열</strong></li></ul></li><li>특정 값이 업데이트될 때만 실행 (componentDidUpdate)<ul><li>2번째 파라미터(deps)로 <strong>검사하고 싶은 값</strong></li></ul></li><li>화면이 사라질때 실행 (componentWillUnmount)<br>컴포넌트 언마운트 전이나 업데이트 직전<ul><li>clean up함수 return</li></ul></li></ol></li><li><p>cf. componentDidUpdate만 하고 싶을 때 패턴 (componentDidmount는 X)</p></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mounted = useRef(<span class="literal">false</span>);</span><br><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!mounted.current) &#123;</span><br><span class="line">        mounted.currnet = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 실행하고 싶은 것</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;, [바뀌는 값])</span><br></pre></td></tr></table></figure><br><h1 id="3-useReducer"><a href="#3-useReducer" class="headerlink" title="3. useReducer"></a>3. useReducer</h1><blockquote><p><strong>상태관리 (상태 업데이트 로직 분리)</strong></p></blockquote><br><ul><li>리액트에서 리덕스 구현 가능 (+ Contexted API)</li><li>useState가 많아졌을 때, 이를 하나로 묶어 처리할 수 있게 줄여줌</li></ul><p><code>const [state, dispatch] = useReducer(reducer, &#123; 기본값 &#125;);</code><br><code>state</code> : 현재 상태<br><code>dispatch</code> : action을 발생시키는 함수<br><code>reducer</code> : state와 action을 전달받아 새로운 상태를 반환하는 함수</p><br><ul><li>state는 직접 변경할 수 없고, 이벤트에서 action을 dispatch해서 변경<br>어떻게 바꿀 것인지는 reducer에 기록</li><li>reducer함수에서 새로운 상태를 만들때는 반드시 불변성 지킬 것</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, dispatch] = useReducer(reducer, &#123; <span class="attr">value</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line">&lt;button onClick=&#123;<span class="function">() =&gt;</span> dispatch(&#123; <span class="attr">type</span>: <span class="string">&#x27;INCREMENT&#x27;</span> &#125;)&#125;&gt;+<span class="number">1</span>&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;...&#125;; <span class="comment">// 불변성을 지키면서 업데이트한 새로운 상태</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><ul><li>acrion의 이름은 대문자, 상수로 빼놓으면 좋음<br><code>const SET_WINNER = &#39;SET_WINNER&#39;;</code></li></ul><br><h1 id="4-useMemo"><a href="#4-useMemo" class="headerlink" title="4. useMemo"></a>4. useMemo</h1><blockquote><p><strong>복잡한 함수 결과값을 기억해 연산 최적화(2번째 파라미터가 바뀌기 전까지)</strong></p></blockquote><p>ex. 특정 값이 바뀌었을 때만 연산 실행 (list에 숫자 추가되었을때만 평균 계산)</p><ul><li>처음엔 함수 안에 console.log 넣고 필요할 때만 실행되는지 꼭 확인! (Hook은 함수의 전체를 재실행하는 문제 존재)</li><li>/ cf. useCallback: 함수 자체를 기억<br>/ cf. useRef: 일반 값을 기억</li></ul><br><h1 id="5-useCallback"><a href="#5-useCallback" class="headerlink" title="5. useCallback"></a>5. useCallback</h1><blockquote><p><strong>함수 재사용 - 함수 자체를 기억 (2번째 파라미터가 바뀌기 전까지)</strong><br>자식 컴포넌트에 props를 전달할 때 useCallback을 사용하지 않으면<br>렌더링 될 때마다 함수가 다시 생성되므로 자식은 props가 바뀌었다고 생각해 불필요한 리렌더링 발생<br>⇒ 따라서 useCallback 사용해 이를 방지</p></blockquote><ul><li>props로 전달해야 할 함수를 만들 때는 useCallback을 사용하여 함수를 감싸는 것을 습관화하자.</li><li>[] 빈 배열 넣으면 컴포넌트가 렌더링될 때만 함수 생성</li></ul><br><h1 id="6-useRef"><a href="#6-useRef" class="headerlink" title="6. useRef"></a>6. useRef</h1><p><strong>① 특정 DOM 선택</strong>, <strong>② 컴포넌트 안의 변수 관리</strong></p><ul><li><p><code>ref</code> : ① React에서 DOM 선택 할 때 (input에 focus, 스크롤 위치 등)</p><pre><code>    ② 컴포넌트 안에서 조회 및 수정 할 수 있는 변수를 관리할 때</code></pre><p>  <code>useRef</code> : 함수형 컴포넌트에서 <code>ref</code> 사용 시 (Hook함수)</p></li></ul><h3 id="6-1-useRef-특정-DOM-선택"><a href="#6-1-useRef-특정-DOM-선택" class="headerlink" title="6.1 useRef - 특정 DOM 선택"></a>6.1 useRef - 특정 DOM 선택</h3><p><code>useRef()</code> 사용해 객체 만들고 원하는 DOM에 <code>ref</code> 값으로 설정하면 <code>.current</code> 는 우리가 원하는 DOM을 가리킴</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nameInput = useRef();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> onReset = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setInputs(&#123;</span><br><span class="line">      name: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      nickname: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    nameInput.current.focus();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        name=<span class="string">&quot;name&quot;</span></span><br><span class="line">        placeholder=<span class="string">&quot;이름&quot;</span></span><br><span class="line">        onChange=&#123;onChange&#125;</span><br><span class="line">        value=&#123;name&#125;</span><br><span class="line">        ref=&#123;nameInput&#125;</span><br><span class="line">            /&gt;</span><br></pre></td></tr></table></figure><ul><li><code>useRef()</code> 를 사용 할 때 파라미터를 넣어주면, 이 값이 <code>.current</code> 의 기본값이 됨  ex) <code>const nextId = useRef(4);</code></li></ul><br><h3 id="6-2-useRef-컴포넌트-안-변수-관리"><a href="#6-2-useRef-컴포넌트-안-변수-관리" class="headerlink" title="6.2 useRef - 컴포넌트 안 변수 관리"></a>6.2 useRef - 컴포넌트 안 변수 관리</h3><p>useState : 상태가 바뀌면 리렌더링<br>useRef : 상태가 바뀌어도 컴포넌트의 리렌더링이 되게 하고 싶지 않을 때 사용<br>               (ex. todos 배열의 id값)</p><ul><li><code>setTimeout</code>, <code>setInterval</code> 을 통해서 만들어진 <code>id</code></li><li>외부 라이브러리를 사용하여 생성된 인스턴스</li><li>scroll 위치</li><li>App 컴포넌트에서 <code>useRef</code> 를 사용해 변수 관리 → App에서 배열선언 후 UserList에게 props로 전달</li></ul><br><hr><p><strong>Reference</strong></p><ul><li>김민준, 리액트를 다루는 기술</li><li>조현영 - 웹 게임을 만들며 배우는 React (<a href="https://www.inflearn.com/course/web-game-React#">https://www.inflearn.com/course/web-game-React#</a>)</li></ul>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/">StudyLog</category>
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/React/">React</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/React/">React</category>
      
      
      <comments>https://hanseul-lee.github.io/2021/01/01/React-8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[React] 컴포넌트</title>
      <link>https://hanseul-lee.github.io/2021/01/01/React-3/</link>
      <guid>https://hanseul-lee.github.io/2021/01/01/React-3/</guid>
      <pubDate>Fri, 01 Jan 2021 04:34:02 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;리액트는 컴포넌트를 기반으로 데이터를 주고 받는다. 컴포넌트는 일종의 UI조각으로 컴포넌트의 생성과 외부에서 정보를 주는 props, 컴포넌트 내부의 변경할 수 있는 state에 대해 알아보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><!-- toc --><h1 id="컴포넌트-Component"><a href="#컴포넌트-Component" class="headerlink" title="컴포넌트(Component)"></a>컴포넌트(Component)</h1><p>: 일종의 UI 조각<br><br></p><div class="figure center" style="width:;"><img class="fig-img" src="1.png" alt="component"><span class="caption">component</span></div><br><ul><li>컴포넌트 생성 방법 : ① 함수, ② class<br>현재는 함수형과 Hook을 함께 사용할 것을 권장함</li><li><strong>컴포넌트 이름은 항상 대문자로 시작</strong></li><li>class 형태 컴포넌트에서는 <code>render</code>함수와 내부에서 JSX를 return해줘야 함</li><li><code>ReactDOM.render(element, 루트노드)</code> : 컴포넌트를 페이지에 렌더링<br>(브라우저 상에서 리액트 컴포넌트를 보여줄 때)</li></ul><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><ul><li>컴포넌트 외부에서 컴포넌트에게 주는 데이터<br>부모 컴포넌트가 자식 컴포넌트에게 주는 값 (읽기전용)</li><li>{props}<strong>.defaultProps</strong> : props 기본값 설정</li><li>{props}<strong>.children:</strong> 컴포넌트 태그 사이 내용  ex. <code>&lt;Hello&gt;리액트&lt;/Hello&gt;</code></li><li>{props}.<strong>propTypes:</strong> props의 필수 타입 지정</li><li>{props}.<strong>isRequired :</strong> 필수 propTypes 설정</li></ul><br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span>;</span><br><span class="line"></span><br><span class="line">MyComponent.propTypes = &#123;</span><br><span class="line">  name: PropTypes.string,</span><br><span class="line">  favoriteNumber: PropTypes.number.isRequired</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>클래스형 컴포넌트에서는 render함수에서 this.props로 사용</li></ul><br><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><ul><li><p>컴포넌트 내부에서 변경할 수 있는 데이터</p></li><li><p>동적인 데이터를 다룰 때 사용</p></li><li><p><code>setState(), useState()</code> : state 값 변경 시 사용<br>(주의) 직접 state값을 변경해주면 안됨! 반드시 세터함수 이용</p></li></ul><br><div class="figure center" style="width:600px;"><img class="fig-img" src="2.png" style="width:600px;"alt="props와 state"><span class="caption">props와 state</span></div><div class="figure center" style="width:600px;"><img class="fig-img" src="3.png" style="width:600px;"alt="render함수"><span class="caption">render함수</span></div><br><hr><p><strong>Reference</strong></p><ul><li>김민준, 리액트를 다루는 기술</li><li><a href="https://slides.com/woongjae">https://slides.com/woongjae</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/">StudyLog</category>
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/React/">React</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/React/">React</category>
      
      
      <comments>https://hanseul-lee.github.io/2021/01/01/React-3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>URL의 구조</title>
      <link>https://hanseul-lee.github.io/2020/12/24/20-12-24-URL/</link>
      <guid>https://hanseul-lee.github.io/2020/12/24/20-12-24-URL/</guid>
      <pubDate>Thu, 24 Dec 2020 05:52:14 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;URI(Uniform Resource Identifier) 는 인터넷에 있는 접근가능한 자원을 나타내는 유일한 주소를 일관되게 표현하는 형식을 일컫는다. URI의 하위 개념으로는 URL과 URN이 있다. URL의 구조에 대해 자세히 알아보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><p><strong>URI(Uniform Resource Identifier)</strong> 는 인터넷에 있는 접근가능한 자원을 나타내는 유일한 주소를 일관되게 표현하는 형식을 일컫는다.<br>URI의 하위 개념으로는 URL과 URN이 있다.</p><br><div class="figure center" style="width:700px;"><img class="fig-img" src="uri.png" style="width:700px;"alt="URI의 구조"><span class="caption">URI의 구조</span></div><br><h1 id="URL의-구조"><a href="#URL의-구조" class="headerlink" title="URL의 구조"></a>URL의 구조</h1><p>다음 URL을 보며 구조를 파악해 보자.</p><br><div class="figure center" style="width:1000px;"><img class="fig-img" src="0.png" style="width:1000px;"alt=""></div><!-- ```http://www.example.com:80/path/to/myfile.html?key1=value1&key2=value2#SomewhereInTheDocument``` --><br><h3 id="1-Protocol-Scheme"><a href="#1-Protocol-Scheme" class="headerlink" title="1. Protocol(Scheme)"></a>1. Protocol(Scheme)</h3><div class="figure center" style="width:600px;"><img class="fig-img" src="1.png" style="width:600px;"alt=""></div><br><ul><li><code>http(Hyper Text Transfer Protocol)</code>는 프로토콜(규약)이다.<br>URL의 첫 파트이자 웹에서 서버와 클라이언트간에 어떤 방법으로 자원을 접근할지 알려준다.  </li><li>요즘은 https를 기본 프로토콜로 쓰는데, http에 보안이 강화된 버전이다.</li><li>브라우저에서 가장 많이 사용되는 https/http외에도 mailto: (이메일 주소를 지정하는 프로토콜), ftp: (파일을 주고받는 프로토콜) 등 다양한 프로토콜이 존재한다.</li></ul><br><h3 id="2-Domain-Name"><a href="#2-Domain-Name" class="headerlink" title="2. Domain Name"></a>2. Domain Name</h3><div class="figure center" style="width:600px;"><img class="fig-img" src="2.png" style="width:600px;"alt=""></div><br><ul><li>도메인 네임은 URL에서 웹서버의 위치를 지정한다.</li><li>직접 IP 주소(ex. 127.0.0.1)를 사용하는 것도 가능하다.</li></ul><br><h3 id="3-Port"><a href="#3-Port" class="headerlink" title="3. Port"></a>3. Port</h3><div class="figure center" style="width:600px;"><img class="fig-img" src="3.png" style="width:600px;"alt=""></div><br><ul><li>웹서버에서 자원을 접근하기 위해 사용하는 관문.</li><li>표준 HTTP 포트는 80번 HTTPS는 443이다. 표준 포트를 사용한다면 포트번호는 보통 생략한다.</li></ul><br><h3 id="4-Path"><a href="#4-Path" class="headerlink" title="4. Path"></a>4. Path</h3><div class="figure center" style="width:600px;"><img class="fig-img" src="4.png" style="width:600px;"alt=""></div><br><ul><li>웹서버에서 자원에 대한 경로</li><li>초기의 웹에서는 웹서버상에서 물리적 파일 위치를 나타넸지만, 지금은 실제 물리적 경로를 나타내지 않고, 웹 서버에서 추상화하여 보여준다.</li><li>루트 자원을 나타내려면 “/”을 사용한다.</li></ul><br><h3 id="5-Query-Parameters"><a href="#5-Query-Parameters" class="headerlink" title="5. Query Parameters"></a>5. Query Parameters</h3><div class="figure center" style="width:600px;"><img class="fig-img" src="5.png" style="width:600px;"alt=""></div><br><ul><li>&amp; 기호로 구분된 키/값으로 짝을 이룬 리스트</li><li>키와 값은 =문자로 구분한다.</li></ul><br><h3 id="6-Fragment-identifier-Anchor"><a href="#6-Fragment-identifier-Anchor" class="headerlink" title="6. Fragment identifier(Anchor)"></a>6. Fragment identifier(Anchor)</h3><div class="figure center" style="width:600px;"><img class="fig-img" src="6.png" style="width:600px;"alt=""></div><br><ul><li>세부항목에 대한 책갈피 역할</li><li>ex. 특정 스크롤 위치로 이동(목차 등)</li><li>요청이 서버에 보내지지 않는다.</li></ul><br><hr><p><strong>Reference</strong></p><ul><li><a href="https://poiemaweb.com/js-spa">https://poiemaweb.com/js-spa</a></li><li><a href="https://developer.mozilla.org/ko/docs/Learn/Common_questions/What_is_a_URL">https://developer.mozilla.org/ko/docs/Learn/Common_questions/What_is_a_URL</a></li><li><a href="https://ko.wikipedia.org/wiki/%ED%86%B5%ED%95%A9_%EC%9E%90%EC%9B%90_%EC%8B%9D%EB%B3%84%EC%9E%90s">https://ko.wikipedia.org/wiki/%ED%86%B5%ED%95%A9_%EC%9E%90%EC%9B%90_%EC%8B%9D%EB%B3%84%EC%9E%90</a></li><li><a href="https://www.betterweb.or.kr/blog/url%EC%9D%B4%EB%9E%80/">https://www.betterweb.or.kr/blog/url%EC%9D%B4%EB%9E%80/</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/">StudyLog</category>
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/etc/">etc</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/URL/">URL</category>
      
      
      <comments>https://hanseul-lee.github.io/2020/12/24/20-12-24-URL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[React] Router : history, match, location</title>
      <link>https://hanseul-lee.github.io/2020/12/24/React-12/</link>
      <guid>https://hanseul-lee.github.io/2020/12/24/React-12/</guid>
      <pubDate>Thu, 24 Dec 2020 01:05:17 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;history, match, location은 리액트 라우트로 사용된 컴포넌트에 전달되는 props 중 하나로, 이 객체들를 통해 컴포넌트 내에 구현하는 메서드에서 라우터 API를 호출할 수 있다.  &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h1 id="Router-props"><a href="#Router-props" class="headerlink" title="Router props"></a>Router props</h1><p>history, match, location은 리액트 라우트로 사용된 컴포넌트에 전달되는 props 중 하나로, 이 객체들를 통해 컴포넌트 내에 구현하는 메서드에서 라우터 API를 호출할 수 있다. </p><p><code>console.log(props)</code>를 해주면 다음과 같은 결과를 볼 수 있다.</p><br><div class="figure center" style="width:700px;"><img class="fig-img" src="2020-12-24-14-29-52.png" style="width:700px;"alt="console.log(props)"><span class="caption">console.log(props)</span></div><p>반환된 객체(props)에서 history, location, match가 담겨있는 것을 확인할 수 있다.</p><Br><h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><p>history 객체는 브라우저의 history와 유사하다.<br>스택(stack)에 현재까지 이동한 url 경로들이 담겨있는 형태로 주소를 임의로 변경하거나 되돌아갈 수 있도록 해준다.<br>history객체는 mutable하므로 history.location보다는 location을 직접 사용해 주기를 권장한다.</p><Br><div class="figure center" style="width:700px;"><img class="fig-img" src="2020-12-24-14-38-17.png" style="width:700px;"alt=""></div><Br><ul><li><strong>action</strong> : [string] 최근에 수행된 action (PUSH, REPLACE or POP)</li><li><strong>block(prompt)</strong> : [function] history 스택의 PUSH/POP 동작을 제어</li><li><strong>go(n)</strong> : [function] : history 스택의 포인터를 n번째로 이동</li><li><strong>goBack()</strong> : [function] 이전 페이지로 이동</li><li><strong>goForward()</strong> : [function] 앞 페이지로 이동</li><li><strong>length</strong> : [number] 전체 history 스택의 길이</li><li><strong>location</strong> : [JSON object] 최근 경로 정보</li><li><strong>push(path, [state])</strong> : [function] 새로운 경로를 history 스택으로 푸시하여 페이지를 이동</li><li><strong>replace(path, [state])</strong> : [function] 최근 경로를 history 스택에서 교체하여 페이지를 이동</li></ul><Br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 뒤로 이동</span></span><br><span class="line">handleGoBack = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.props.history.goBack();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 홈으로 이동</span></span><br><span class="line">handleGoHome = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.props.history.push(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">componentDidMount() &#123;</span><br><span class="line">  <span class="comment">// 페이지에 변화가 생기려고 할 때마다 정말 나갈 것인지 질문함</span></span><br><span class="line">  <span class="built_in">this</span>.unblock = <span class="built_in">this</span>.props.history.block(<span class="string">&#x27;정말 돌아가시겠습니까?&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><Br><h2 id="location"><a href="#location" class="headerlink" title="location"></a>location</h2><p><strong>location 객체에는 현재 페이지의 정보를 가지고 있다.</strong><br>대표적으로 location.search로 현재 url의 쿼리 스트링을 가져올 수 있다.</p><Br><div class="figure center" style="width:700px;"><img class="fig-img" src="2020-12-24-14-41-01.png" style="width:700px;"alt=""></div><Br><ul><li>예제1</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route</span><br><span class="line">  render=&#123;<span class="function">(<span class="params">&#123; location &#125;</span>) =&gt;</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h2&gt;존재하지 않는 페이지 입니다.&lt;/h2&gt;</span><br><span class="line">      &lt;p&gt;&#123;location.pathname&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><ul><li>예제2</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> About = <span class="function">(<span class="params">&#123; location &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> query = qs.parse(location.search, &#123;</span><br><span class="line">    ignoreQueryPrefix: <span class="literal">true</span>, <span class="comment">// 문자열 맨 앞의 ? 생략</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> showDetail = query.detail === <span class="string">&#x27;true&#x27;</span>; <span class="comment">// 쿼리의 파싱 결과값은 항상 문자열이라는 것에 주의</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;소개&lt;/h1&gt;</span><br><span class="line">      &lt;p&gt;안녕하세요 라라랜드 맛있는 레몬워터입니다.&lt;/p&gt;</span><br><span class="line">      &#123;showDetail &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>제가 제일 좋아하는 음료수랍니다.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br><h2 id="match"><a href="#match" class="headerlink" title="match"></a>match</h2><p><strong>match 객체에는 ‘Route path’와 URL이 매칭된 것에 대한 정보가 담겨져있다.</strong><br>대표적으로 match.params로 path에 설정한 파라미터값을 가져올 수 있다.</p><Br><div class="figure center" style="width:700px;"><img class="fig-img" src="2020-12-24-14-42-05.png" style="width:700px;"alt=""></div><Br><ul><li><strong>isExact</strong> : [boolean] true일 경우 전체 경로가 완전히 매칭될 경우에만 요청을 수행</li><li><strong>params</strong> : [JSON object] url path로 전달된 파라미터 객체 </li><li><strong>path</strong> : [string] 라우터에 정의된 path</li><li><strong>url</strong> : [string] 실제 클라이언트로부터 요청된 url path</li></ul><Br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Profile = <span class="function">(<span class="params">&#123; match &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; username &#125; = match.params;</span><br><span class="line">  <span class="keyword">const</span> user = data[username];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>존재하지 않는 사용자입니다.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h3&gt;&#123;user.name&#125;의 프로필&lt;/h3&gt;</span><br><span class="line">      &lt;p&gt;&#123;user.description&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br><hr><p><strong>Reference</strong></p><ul><li>김민준, 리액트를 다루는 기술</li><li><a href="https://reactrouter.com/web/api/history">https://reactrouter.com/web/api/history</a></li><li><a href="https://gongbu-ing.tistory.com/45">https://gongbu-ing.tistory.com/45</a></li><li><a href="https://medium.com/@han7096/react-router-v4-%EC%A0%95%EB%A6%AC-e9931b63dcae">https://medium.com/@han7096/react-router-v4-%EC%A0%95%EB%A6%AC-e9931b63dcae</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/">StudyLog</category>
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/React/">React</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/React/">React</category>
      
      
      <comments>https://hanseul-lee.github.io/2020/12/24/React-12/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[VS Code] VS Code에서 md파일 미리보기</title>
      <link>https://hanseul-lee.github.io/2020/12/24/20-12-24-VScode/</link>
      <guid>https://hanseul-lee.github.io/2020/12/24/20-12-24-VScode/</guid>
      <pubDate>Wed, 23 Dec 2020 22:20:03 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;VS Code에서 md파일 미리보기 기능을 통해 markdown을 실시간으로 확인해보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><p>Visual Studio Code에서 .md를 확장명으로 작성하면 markdowm으로 문서를 작성할 수 있다.<br>기본적으로 github 블로그에서 글을 작성할 때 md파일로 작성하는 데 가끔 github README.md나 Velog에서 아래 사진처럼 실시간으로 완성된 포스팅을 보여주는 게 부러울 때가 있었다. </p><!-- ![velog](2020-12-24-07-31-53.png) --><div class="figure center" style="width:700px;"><img class="fig-img" src="2020-12-24-07-31-53.png" style="width:700px;"alt="Velog 글 작성 시 화면"><span class="caption">Velog 글 작성 시 화면</span></div><br><p>그런데 VS Code에서도 이렇게 실시간으로 md파일을 보여주는 미리보기가 존재한다는 걸 알게되었다.<br>단축키 <code>Ctrl + Alt + v</code>를 통해 다음과 같이 확인할 수 있다. </p><br><div class="figure center" style="width:700px;"><img class="fig-img" src="2020-12-24-07-26-23.png" style="width:700px;"alt="VS Code에서 지원하는 md파일 미리보기"><span class="caption">VS Code에서 지원하는 md파일 미리보기</span></div><p>지금은 markdown에 익숙해졌지만, 이렇게 미리보기를 통해 실시간으로 확인한다면 훨씬 유용할 것 같다.</p>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/">StudyLog</category>
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/Tip/">Tip</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/VS-Code/">VS Code</category>
      
      
      <comments>https://hanseul-lee.github.io/2020/12/24/20-12-24-VScode/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[React] 컴포넌트 스타일링</title>
      <link>https://hanseul-lee.github.io/2020/12/20/React-9/</link>
      <guid>https://hanseul-lee.github.io/2020/12/20/React-9/</guid>
      <pubDate>Sun, 20 Dec 2020 00:49:03 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;리액트는 Vue, Angular와는 다르게 스타일이 스코핑되지 않는다는 문제점을 가지고 있다. 따라서 이를 해결하기 위해 리액트에서 컴포넌트를 스타일링하는 다양한 방식을 알아보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><p>리액트는 Vue, Angular와는 다르게 스타일이 스코핑되지 않는다는 문제점을 가지고 있다. 즉, CSS가 캡슐화되지 않아 예기치 못한 문제가 발생하기 쉽고 이를 자동화시켜주기 위해 다양한 방법들이 제시되었다. 리액트에서 컴포넌트를 스타일링하는 방법으로는 크게 다음과 같은 4가지로 나눌 수 있다.</p><br><ol><li><strong>일반 CSS</strong></li><li><strong>Sass</strong></li><li><strong>CSS Module</strong></li><li><strong>styled-components</strong></li></ol><h1 id="1-일반-CSS"><a href="#1-일반-CSS" class="headerlink" title="1. 일반 CSS"></a>1. 일반 CSS</h1><p>일반 CSS로 CSS 스타일링을 하는 방법은 2가지가 있다.</p><br><ol><li><p>네이밍 규칙 이용<br>BEM과 같이 이름을 지을 때 일종의 규칙을 준수하여 작성</p></li><li><p>CSS Selector<br>CSS class의 상속 관계를 이용해 스타일 적용</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* App.css */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 기존 */</span></span><br><span class="line"><span class="selector-class">.App-logo</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* CSS Selecotr 사용 */</span></span><br><span class="line"><span class="selector-class">.App</span> <span class="selector-class">.logo</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><br><h1 id="2-Sass"><a href="#2-Sass" class="headerlink" title="2. Sass"></a>2. Sass</h1><p><strong>Sass</strong>(Syntactically Awesome StyleSheets)는 CSS 전처리기로 CSS의 한계와 단점을 보완하여 보다 가독성이 높고 코드의 재사용에 유리한 CSS를 생성하기 위해 탄생했다.</p><ul><li>Sass에서는 두 가지 확장자 .scss와 .sass를 지원하는데 기존 CSS와 작성방법이 비슷한 .scss를 사용하는 것을 권장한다.</li><li>스타일 코드를 계층적으로 구조화해 가독성이 높고, 스타일 코드의 재활용성을 높여주거나 설정을 커스터마이징하는 다양한 기능 및 라이브러리를 제공한다는 장점 또한 지니고 있다.</li></ul><p>먼저 node-sass 라이브러리를 설치한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install node-sass</span><br><span class="line">$ npm start</span><br></pre></td></tr></table></figure><p>이 후 .scss 파일에 sass문법을 적용해 스타일링을 해가면 기존 CSS를 사용하는 것보다 훨씬 가독성 좋은 스타일링을 구현할 수 있다.</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* App.scss */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.App</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.logo</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40vmin</span>;</span><br><span class="line">    <span class="attribute">pointer-events</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h1 id="3-CSS-Module"><a href="#3-CSS-Module" class="headerlink" title="3. CSS Module"></a>3. CSS Module</h1><ul><li>클래스 이름을 [filename]_[classname]__[hash] 형태로 자동 변환해 이름의 중첩을 방지.</li><li>자동으로 변환되므로 클래스 네이밍 시 BEM과 같이 복잡하게 규칙 정하지 않고 마음대로 사용 가능함.</li><li><code>.module.css</code> 확장자로 파일 저장 시 CSS Module 적용됨.</li></ul><h3 id="classnames"><a href="#classnames" class="headerlink" title="classnames"></a>classnames</h3><ul><li>class를 조건부로 설정할 때 유용한 라이브러리</li></ul><br><h1 id="4-styled-components"><a href="#4-styled-components" class="headerlink" title="4. styled-components"></a>4. styled-components</h1><ul><li>자바스크립트 파일 안에 스타일을 선언하는 방식(CSS-in-JS)</li><li>스타일을 선언하며 바로 컴포넌트 생성 가능</li><li>Tagged 템플릿 리터럴</li></ul><br><hr><p><strong>Reference</strong></p><ul><li>김민준, 리액트를 다루는 기술</li><li><a href="poiemaweb.com/">poiemaweb.com/</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/">StudyLog</category>
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/React/">React</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/React/">React</category>
      
      
      <comments>https://hanseul-lee.github.io/2020/12/20/React-9/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[React] JSX 문법</title>
      <link>https://hanseul-lee.github.io/2020/12/18/React-2/</link>
      <guid>https://hanseul-lee.github.io/2020/12/18/React-2/</guid>
      <pubDate>Thu, 17 Dec 2020 16:01:01 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;리액트에서 JSX 문법을 사용해 XML형태 코드를 Javascript로 손쉽게 변환할 수 있다. JSX 문법의 규칙에 대해 자세히 알아보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><p><strong>JSX(Javascript XML)</strong> : 리액트에서 XML형태 코드를 Javascript로 변환<br><br></p><ul><li><p>최상위 요소는 하나만 존재해야 함</p></li><li><p>최상위 요소 리턴하는 경우, () 로 감싸야 함</p></li><li><p>태그는 꼭 닫아야 하고,  자식요소가 없을 시 self closing을 사용함.</p><ul><li><code>&lt;p&gt;Hello, World&lt;/p&gt;</code></li><li><code>&lt;br /&gt;</code></li></ul></li><li><p>2개 이상의 엘리먼트는 무조건 하나의 태그로 감싸야 함<br>만약, 불필요한 div 생성 시, Fragment 사용(태그 이름 없이 작성)</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;&gt;</span><br><span class="line">  &lt;div&gt;<span class="number">2</span>개 이상의&lt;/div&gt;</span><br><span class="line">  &lt;p&gt;태그는 감싸자&lt;/p&gt;</span><br><span class="line">&lt;/&gt;</span><br></pre></td></tr></table></figure><br></li><li><p>JSX내부에서 Javascript 변수를 표현할 땐 {}로 감싸야 함</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;이렇게&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>JavaScript 값을 보여줄 땐, &#123;name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br></li><li><p>인라인 style은 객체 형태로 작성하고, camelCase로 네이밍 함.</p></li><li><p>class를 설정 할 때는 <code>class</code>가 아닌 <code>className</code>으로 설정해야 함.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> style = &#123;</span><br><span class="line">  background: <span class="string">&#x27;grey&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  &lt;div style=&#123;style&#125;&gt;</span><br><span class="line">    &lt;div className=<span class="string">&quot;my-style&quot;</span>&gt;</span><br><span class="line">      style과 className</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><br></li><li><p>JSX 내부 주석 : <code>&#123;/* 내부 주석은 이렇게*/&#125;</code><br>태그 내부 주석 : <code>// 태그 내 주석은 이렇게</code></p></li></ul><hr><p><strong>Reference</strong></p><ul><li>김민준, 리액트를 다루는 기술</li></ul>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/">StudyLog</category>
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/React/">React</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/React/">React</category>
      
      
      <comments>https://hanseul-lee.github.io/2020/12/18/React-2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[git] git 명령어 정리</title>
      <link>https://hanseul-lee.github.io/2020/12/17/20-12-17-git-cheatSheet/</link>
      <guid>https://hanseul-lee.github.io/2020/12/17/20-12-17-git-cheatSheet/</guid>
      <pubDate>Thu, 17 Dec 2020 04:56:47 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;git 명령어를 보다 유용하게 사용하기 위해 자주 사용하는 명령어를 정리하였습니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><!-- toc --><p>git 명령어를 보다 유용하게 사용하기 위해 자주 사용하는 명령어를 정리하였습니다. </p><br><h1 id="전체-흐름-요약"><a href="#전체-흐름-요약" class="headerlink" title="전체 흐름 요약"></a>전체 흐름 요약</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">            -add-&gt;      -commit-&gt;     -push-&gt;</span><br><span class="line">+-------------+-------------+------------+-------------+</span><br><span class="line">| Working dir |    Index    | Local repo | Remote repo |</span><br><span class="line">+-------------+-------------+------------+-------------+</span><br><span class="line">         &lt;-checkout-                 &lt;-fetch-</span><br></pre></td></tr></table></figure><br><ol><li><p>github에 <strong>원격 저장소</strong> 생성한다.</p><ul><li><strong>원격 저장소 (Remote repository)</strong> : github와 같이 외부 서버의 원격 프로젝트 저장소</li></ul></li><li><p><strong>로컬 저장소</strong>의 <strong>작업 디렉토리</strong>에서 파일을 작성한다.</p><ul><li><strong>로컬 저장소 (Local repository)</strong> : 본인의 컴퓨터에 저장된 프로젝트 저장소</li><li><strong>작업 디렉토리(Working directory)</strong>: 실제 파일이 위치한 디렉토리.</li></ul></li><li><p><code>git add [파일이름]</code> 또는 <code>git add .</code>을 통해 변경된 파일들을 <strong>스테이징</strong>해 <strong>Index</strong> 영역에 등록한다.</p><ul><li><strong>스테이징(Staging)</strong>: 확정할 변경 사항을 준비시키는 것.</li><li><strong>인덱스(Index)</strong>: 확정할 준비가 된 변경 사항들이 모인 영역.</li></ul></li><li><p><code>git commit -m &quot;commit message&quot;</code> 명령으로 스테이징된(Staged) 변경 사항을 commit해 로컬 저장소에 등록한다.</p><ul><li><strong>Commit</strong>: 인덱스의 변경 사항들을 확정하는 것. </li></ul></li><li><p>원격 저장소를 clone 해 로컬 저장소와 연결한다. 이후 push해 커밋된 변경사항들을 원격 저장소에 게시한다.</p><ul><li><strong>Push</strong>: 확정된 변경 사항을 원격 저장소에 게시하는 것.</li><li><strong>origin</strong>: 로컬 저장소의 원본 원격 저장소<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone [내 repo 주소]</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure></li></ul></li></ol><br><h1 id="git-cheat-sheet"><a href="#git-cheat-sheet" class="headerlink" title="git cheat sheet"></a>git cheat sheet</h1><p>참고로 git 명령어를 사용함에 있어 다음과 같은 git cheat sheet를 사용하면 보다 유용하게 명령어를 파악할 수 있다.<br><br></p><div class="figure center" style="width:800px;"><img class="fig-img" src="cheatSheet.png" style="width:800px;"alt="git cheat sheet"><span class="caption">git cheat sheet</span></div><br><hr><p><strong>Reference</strong></p><ul><li><a href="https://git-scm.com/docs">https://git-scm.com/docs</a></li><li><a href="https://parksb.github.io/article/28.html">https://parksb.github.io/article/28.html</a></li><li><a href="https://github.blog/2015-07-29-git-2-5-including-multiple-worktrees-and-triangular-workflows/">https://github.blog/2015-07-29-git-2-5-including-multiple-worktrees-and-triangular-workflows/</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/">StudyLog</category>
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/git/">git</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/git/">git</category>
      
      <category domain="https://hanseul-lee.github.io/tags/github/">github</category>
      
      
      <comments>https://hanseul-lee.github.io/2020/12/17/20-12-17-git-cheatSheet/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[git] gitHub에 new repository 생성하기</title>
      <link>https://hanseul-lee.github.io/2020/12/17/20-12-17-git-newRepo/</link>
      <guid>https://hanseul-lee.github.io/2020/12/17/20-12-17-git-newRepo/</guid>
      <pubDate>Thu, 17 Dec 2020 03:21:32 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;github에 new repository 생성하는 방법을 알아봅시다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h2 id="1-GitHub-Repository-생성"><a href="#1-GitHub-Repository-생성" class="headerlink" title="1. GitHub Repository 생성"></a>1. GitHub Repository 생성</h2><div class="figure center" style="width:700px;"><img class="fig-img" src="1.jpg" style="width:700px;"alt=""></div><br><p>GitHub에서 다음과 같이 새로운 Repository name을 입력하고 Create repository 버튼을 눌러 새 Repository를 생성한다. </p><Br><h2 id="2-Initialize-repository"><a href="#2-Initialize-repository" class="headerlink" title="2. Initialize repository"></a>2. Initialize repository</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>위의 명령어를 통해 해당 프로젝트 폴더 내에 숨겨진 .git 폴더를 생성하고 이제 Git은 현재 repository에 대한 모든 변경 사항들을 추적 및 관리하게 된다.</p><br><h2 id="3-새로운-폴더-파일-만들고-작업-생성"><a href="#3-새로운-폴더-파일-만들고-작업-생성" class="headerlink" title="3. 새로운 폴더(파일) 만들고 작업 생성"></a>3. 새로운 폴더(파일) 만들고 작업 생성</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add . </span><br><span class="line">git commit -m <span class="string">&quot;commit massage&quot;</span></span><br></pre></td></tr></table></figure><p>새로운 repository에 올릴 폴더(파일)을 만들고 코드를 작성한 뒤, add, commit을 해준다.</p><br><h2 id="4-원격-저장소와-연결-후-push"><a href="#4-원격-저장소와-연결-후-push" class="headerlink" title="4. 원격 저장소와 연결 후 push"></a>4. 원격 저장소와 연결 후 push</h2><div class="figure center" style="width:700px;"><img class="fig-img" src="4.jpg" style="width:700px;"alt="repository 주소 복사하기"><span class="caption">repository 주소 복사하기</span></div><p>생성된 repository에서 code 버튼을 누른 후, 이를 복사해 <code>git remote add origin [repository 주소]</code>명령으로 local과 remote repository를 연결해 준다. </p><ul><li>Local repository : 본인의 컴퓨터에 저장된 프로젝트 저장소</li><li>Remote repository : 로컬이 아닌 외부 서버의 원격 프로젝트 저장소</li></ul><p>이 후 <code>git remote -v | --verbose</code> 를 통해 원격 저장소 목록을 불러와 연결된 것을 확인할 수 있다. 이 후, 로컬에서 작업한 파일을 원격 저장소로 push 해주면 된다. -u(–set-upstream)를 통해 upstream origin 정보를 설정한 후에는 해당 브랜치에서 <code>git push</code>만 입력해줘도 push가 가능하다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin [repository 주소]</span><br><span class="line">git remote -v</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><h2 id="error-fatal-refusing-to-merge-unrelated-histories"><a href="#error-fatal-refusing-to-merge-unrelated-histories" class="headerlink" title="error - fatal: refusing to merge unrelated histories"></a>error - fatal: refusing to merge unrelated histories</h2><p>만약 git pull이나 push를 할 때 <code>fatal: refusing to merge unrelated histories</code> 에러가 뜨는 경우가 있다. 이는 로컬 저장소와 원격지의 저장소의 기록(History)을 비교했을 때 소스코드의 차이가 심한 저장소의 경우, 병합 오류가 날 것을 대비하여 오류 메시지를 띄우는 것이다. 다음과 같은 명령어를 통해 해결 할 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin 브랜치명 --allow-unrelated-histories</span><br></pre></td></tr></table></figure><br><hr><p><strong>Reference</strong></p><ul><li><a href="https://git-scm.com/docs/git-remote">https://git-scm.com/docs/git-remote</a></li><li><a href="https://velog.io/@kho5420/Git-GitHub-%EB%A0%88%ED%8C%8C%EC%A7%80%ED%86%A0%EB%A6%ACRepository-%EC%83%9D%EC%84%B1%ED%95%98%EA%B3%A0-%EC%86%8C%EC%8A%A4-%EC%98%AC%EB%A6%AC%EA%B8%B0">[Git] GitHub 레파지토리(Repository) 생성하고 소스 올리기</a></li><li><a href="https://parksb.github.io/article/28.html">https://parksb.github.io/article/28.html</a></li><li><a href="https://nochoco-lee.tistory.com/34?category=343045">https://nochoco-lee.tistory.com/34?category=343045</a></li><li><a href="https://ndb796.tistory.com/275">https://ndb796.tistory.com/275</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/">StudyLog</category>
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/git/">git</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/git/">git</category>
      
      <category domain="https://hanseul-lee.github.io/tags/gitHub/">gitHub</category>
      
      
      <comments>https://hanseul-lee.github.io/2020/12/17/20-12-17-git-newRepo/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[git] Default 브랜치명 변경하기 (master -&gt; main)</title>
      <link>https://hanseul-lee.github.io/2020/12/17/20-12-16-git-branch-main/</link>
      <guid>https://hanseul-lee.github.io/2020/12/17/20-12-16-git-branch-main/</guid>
      <pubDate>Thu, 17 Dec 2020 02:26:36 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;github의 default의 브랜치명을 master에서 main으로 변경하는 방법을 알아봅시다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h1 id="github의-default-브랜치가-main으로-바뀌다"><a href="#github의-default-브랜치가-main으로-바뀌다" class="headerlink" title="github의 default 브랜치가 main으로 바뀌다"></a>github의 default 브랜치가 main으로 바뀌다</h1><div class="figure center" style="width:600px;"><img class="fig-img" src="main.jpg" style="width:600px;"alt=""></div><br><p>2020년 10월, <a href="https://github.blog/changelog/2020-10-01-the-default-branch-for-newly-created-repositories-is-now-main/">github 공식 블로그</a>는 default 브랜치의 명칭이 main으로 바뀌었음을 알렸다. 이는 이전부터 꾸준히 진행된 논쟁인 master/slave, balcklist/whitelist와 같이 인종차별적인 단어의 문제를 개선하려는 움직임에서 시작되었다. 따라서 github 역시 이러한 움직임에 동참하여 default 브랜치를 기존 <code>master</code>에서 <code>main</code>으로 변경하였고 올해 말부터 master로 생성했던 기존 브랜치의 이름 또한 원할하게 변경 가능하게 작업중이라고 한다.</p><br><h1 id="기존-Repository의-Default-branch-이름을-변경하고-싶다면"><a href="#기존-Repository의-Default-branch-이름을-변경하고-싶다면" class="headerlink" title="기존 Repository의 Default branch 이름을 변경하고 싶다면?"></a>기존 Repository의 Default branch 이름을 변경하고 싶다면?</h1><p>따라서 기존 Repository에서 master로 만들어져있는 default 브랜치 이름을 main으로 변경하고 싶다면 다음과 같이 바꿀 수 있다.</p><br><h3 id="step1"><a href="#step1" class="headerlink" title="step1."></a>step1.</h3><ul><li>git branch 명령어 “-m/-M” 옵션을 사용해 브랜치 이름을 변경하고 remote 저장소에 push<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -m master main</span><br><span class="line">$ git push -u origin main</span><br></pre></td></tr></table></figure></li></ul><h3 id="step2"><a href="#step2" class="headerlink" title="step2."></a>step2.</h3><ul><li>Github Repository 설정 변경</li></ul><div class="figure center" style="width:950px;"><img class="fig-img" src="step2.jpg" style="width:950px;"alt=""></div><br><h3 id="step3"><a href="#step3" class="headerlink" title="step3."></a>step3.</h3><ul><li>기존 브랜치 삭제</li></ul><div class="figure center" style="width:950px;"><img class="fig-img" src="step3.jpg" style="width:950px;"alt=""></div><p>이를 통해 기존 master로 되어있는 default 브랜치명을 main으로 바꿀 수 있다.</p><br><hr><p><strong>Reference</strong></p><ul><li><a href="https://github.blog/changelog/2020-10-01-the-default-branch-for-newly-created-repositories-is-now-main/">github blog</a></li><li><a href="https://github.com/github/renaming/#later-this-year">github/renaming</a></li><li><a href="https://kyeoneee.tistory.com/72">https://kyeoneee.tistory.com/72</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/">StudyLog</category>
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/git/">git</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/git/">git</category>
      
      <category domain="https://hanseul-lee.github.io/tags/github/">github</category>
      
      
      <comments>https://hanseul-lee.github.io/2020/12/17/20-12-16-git-branch-main/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[js연습] Darkmode 구현하기</title>
      <link>https://hanseul-lee.github.io/2020/12/10/20-12-10-darkmode/</link>
      <guid>https://hanseul-lee.github.io/2020/12/10/20-12-10-darkmode/</guid>
      <pubDate>Thu, 10 Dec 2020 11:04:01 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;[JS연습] Darkmode 구현&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;20-12-10 수업내용 복습 및 정리</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><!-- toc --></li></ul><h1 id="Darkmode-코드"><a href="#Darkmode-코드" class="headerlink" title="Darkmode 코드"></a>Darkmode 코드</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Light / Dark Mode - Toggle button<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/css?family=Open+Sans:300,400&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/css/all.min.css&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      body &#123;</span><br><span class="line">        font-family: &quot;Open Sans&quot;;</span><br><span class="line">        font-weight: 300;</span><br><span class="line"><span class="css">        <span class="comment">/* display: none; */</span></span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.title</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#db5b33</span>;</span></span><br><span class="line">        font-weight: 300;</span><br><span class="line">        text-align: center;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.toggle-button</span> &#123;</span></span><br><span class="line">        position: relative;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 50px;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="comment">/* 토글 버튼 내부의 원 */</span></span></span><br><span class="line"><span class="css">      <span class="selector-class">.toggle-button</span> &gt; <span class="selector-class">.toggle-button-switch</span> &#123;</span></span><br><span class="line">        position: absolute;</span><br><span class="line">        top: 2px;</span><br><span class="line">        left: 2px;</span><br><span class="line">        width: 46px;</span><br><span class="line">        height: 46px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">        border-radius: 100%;</span><br><span class="line"><span class="css">        <span class="selector-tag">transition</span>: <span class="selector-tag">left</span> 0<span class="selector-class">.3s</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="comment">/* 토글 버튼의 바탕 */</span></span></span><br><span class="line"><span class="css">      <span class="selector-class">.toggle-button</span> &gt; <span class="selector-class">.toggle-button-text</span> &#123;</span></span><br><span class="line">        overflow: hidden;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#3dbf87</span>;</span></span><br><span class="line">        border-radius: 25px;</span><br><span class="line"><span class="css">        <span class="selector-tag">box-shadow</span>: 2<span class="selector-tag">px</span> 2<span class="selector-tag">px</span> 5<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(50, 50, 50, 0<span class="selector-class">.75</span>);</span></span><br><span class="line"><span class="css">        <span class="selector-tag">transition</span>: <span class="selector-tag">background-color</span> 0<span class="selector-class">.3s</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="comment">/* 토글 버튼의 텍스트 */</span></span></span><br><span class="line"><span class="css">      <span class="selector-class">.toggle-button</span> &gt; <span class="selector-class">.toggle-button-text</span> &gt; <span class="selector-class">.toggle-button-text-on</span>,</span></span><br><span class="line"><span class="css">      <span class="selector-class">.toggle-button</span> &gt; <span class="selector-class">.toggle-button-text</span> &gt; <span class="selector-class">.toggle-button-text-off</span> &#123;</span></span><br><span class="line">        float: left;</span><br><span class="line">        width: 50%;</span><br><span class="line">        line-height: 50px;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">        text-align: center;</span><br><span class="line">      &#125;</span><br><span class="line">      article &#123;</span><br><span class="line">        width: 960px;</span><br><span class="line">        margin: 50px auto 0;</span><br><span class="line"><span class="css">        <span class="selector-tag">font-size</span>: 1<span class="selector-class">.5em</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">      <span class="comment">/* Dark Theme */</span></span></span><br><span class="line"><span class="css">      <span class="selector-tag">body</span><span class="selector-class">.dark</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#232323</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.toggle-button</span> &gt; <span class="selector-class">.toggle-button-switch</span> &#123;</span></span><br><span class="line">        left: 52px;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.toggle-button</span> &gt; <span class="selector-class">.toggle-button-text</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#fc3164</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-tag">article</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Light / Dark Mode - Toggle Button<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toggle-button&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toggle-button-switch&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toggle-button-text&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toggle-button-text-on&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;far fa-sun fa-lg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toggle-button-text-off&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;far fa-moon fa-lg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">      Lorem ipsum dolor, sit amet consectetur adipisicing elit. Laborum optio ab</span><br><span class="line">      porro magni in sunt ipsam, doloremque minima, itaque sapiente consequatur,</span><br><span class="line">      repellat velit voluptatum accusantium aperiam. Nostrum sunt reprehenderit</span><br><span class="line">      nemo!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.addEventListener(<span class="string">&quot;DOMContentLoded&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.body.classList.toggle(<span class="string">&quot;dark&quot;</span>, <span class="built_in">localStorage</span>.getItem(<span class="string">&quot;theme&quot;</span>));</span></span><br><span class="line">      &#125;);</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> $toggleButton = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.toggle-button&quot;</span>);</span></span><br><span class="line"><span class="javascript">      $toggleButton.onclick = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.body.classList.toggle(<span class="string">&quot;dark&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> theme = <span class="built_in">localStorage</span>.getItem(<span class="string">&quot;theme&quot;</span>);</span></span><br><span class="line">        if (theme) &#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">localStorage</span>.removeItem(<span class="string">&quot;theme&quot;</span>);</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">localStorage</span>.setItem(<span class="string">&quot;theme&quot;</span>, <span class="string">&quot;dark&quot;</span>);</span></span><br><span class="line"><span class="javascript">          <span class="built_in">document</span>.body.classList.add(<span class="string">&quot;dark&quot;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="수업-내용-복습-및-정리"><a href="#수업-내용-복습-및-정리" class="headerlink" title="수업 내용 복습 및 정리"></a>수업 내용 복습 및 정리</h1><h3 id="1-코드-시작-전-세팅"><a href="#1-코드-시작-전-세팅" class="headerlink" title="1. 코드 시작 전 세팅"></a>1. 코드 시작 전 세팅</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &lt;project-folder&gt;</span><br><span class="line"><span class="comment"># package.json 생성</span></span><br><span class="line">$ npm init -y</span><br><span class="line"><span class="comment"># install eslint &amp; friends</span></span><br><span class="line">$ npm install eslint eslint-config-airbnb-base eslint-plugin-import eslint-plugin-html --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 이 후 프로젝트 루트에 .eslintrc.json 파일을 생성하고 필요에 따라 아래와 같이 룰셋을 변경</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://poiemaweb.com/eslint#5-eslintrcjson">.eslintrc.json 룰셋 참고 - poiemaweb</a></li><li>만약 새로운 폴더 생성 시, package.json과 .eslintrc.json파일 복사 후 package.json의 name을 바꿔주고 <code>npm i</code> 해주면 됨.</li></ul><Br><h3 id="2-CSS-vs-JS"><a href="#2-CSS-vs-JS" class="headerlink" title="2. CSS vs JS"></a>2. CSS vs JS</h3><ul><li>CSS로 처리할 수 있다면 최대한 JS보단 CSS로 처리하려고 할 것<br>왜냐하면 CSS의 반응 속도가 JS보다 더 빠르기 때문</li><li>ex)<br>Light모드와 Dark모드 변경사항을 CSS에 담고 JS에서는 class추가, 제거로 제어할 것<br><del>JS 내부에서 변경사항 일일히 적어주기</del> (X)</li></ul><h3 id="3-html-body선택하기"><a href="#3-html-body선택하기" class="headerlink" title="3. html body선택하기"></a>3. html body선택하기</h3><ul><li><code>document.querySelector(&#39;.body&#39;)</code>가 아니라 <code>document.body</code>로 하는 것이 더 간결하고 좋음</li></ul><h3 id="4-Local-storage"><a href="#4-Local-storage" class="headerlink" title="4. Local storage"></a>4. Local storage</h3><ul><li><p><a href="https://developer.mozilla.org/ko/docs/Web/API/Window/localStorage">MDN - LocalStrage 참고</a> <br>+) 예제만 보지말고 위의 정의부터 꼼꼼히 다 살펴볼 것</p></li><li><p><strong>HTTP vs Session</strong><br>토글한 Darkmode 상태를 창을 닫고 나서 다시 접속할 때에도 기억하고 싶다면 Storage을 사용하자.<br>(쿠키와 DB는 배보다 배꼽이 큰 격이므로 배제한다.)</p><ul><li>HTTP 통신 : 단방향 (무전기) / Storage : 양방향<ul><li>HTTP 통신의 특징은 Connectionless와 Stateless이다.<ul><li>Connectionless(비연결지향)<br>클라이언트에서 서버에 요청을 보내면 서버는 클라이언트에 응답을 하고 접속을 끊음.</li><li>Stateless(상태정보유지안함)<br>HTTP통신은 요청을 응답하고 접속을 끊기 때문에 클라이언트 상태정보를 알 수 없음.</li></ul></li><li>Storage<br>localStorage의 데이터는 만료되지 않고 sessionStorage의 페이지를 닫을 때 사라진다.</li></ul></li></ul></li></ul><p>(Reference : <a href="https://developer.mozilla.org/ko/docs/Web/API/Window/localStorage">MDN - LocalStrage</a>, <a href="https://chrisjune-13837.medium.com/web-%EC%BF%A0%ED%82%A4-%EC%84%B8%EC%85%98%EC%9D%B4%EB%9E%80-aa6bcb327582">[WEB] 쿠키, 세션이란?</a>)</p><br><h3 id="5-모든-페이지가-렌더링되고-다크-모드-적용되는-현상-해결하기"><a href="#5-모든-페이지가-렌더링되고-다크-모드-적용되는-현상-해결하기" class="headerlink" title="5. 모든 페이지가 렌더링되고 다크 모드 적용되는 현상 해결하기"></a>5. 모든 페이지가 렌더링되고 다크 모드 적용되는 현상 해결하기</h3><p>전역에 다 크모드 적용을 감지하고 이를 적용하는 코드를 작성하면 화면이 한 번 라이트 모드로 적용된 후 뒤이어 다크 모드로 변경된다. 이를 해결하기 위해 다음과 같은 2가지 방법을 사용할 수 있다.</p><ol><li><code>window.onload</code></li><li><code>window.DOMContentLoded</code></li></ol><p>1의 window.onload는 <strong>DOMContentLoaded 이벤트가 발생한 이후, 브라우저의 모든 리소스(이미지, 폰트, script 등)의 로딩이 완료되었을 때</strong> 발생하고, 2의 DOMContentLoaded는 <strong>HTML 문서의 로드와 파싱이 완료되어 DOM 생성이 완료되었을 때</strong> 발생한다. 따라서 결론만 말하자면 2의 DOMContentLoadedrk 훨씬 빠르게 발생하고 유용하다.</p><p>먼저 <code>window.onload</code>를 사용하는 방법을 살펴보면 다음과 같다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CSS</span></span><br><span class="line">body &#123; <span class="attr">display</span>: none; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JS</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.body.classList.toggle(<span class="string">&#x27;dark&#x27;</span>, <span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;theme&#x27;</span>))</span><br><span class="line">  <span class="built_in">document</span>.body.style.display = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>하지만 css에서 display:none을 해주지 않으면 기존처럼 렌더링이 모두 완료된 화면이 먼저 보이기 때문에 아래와 같이 <code>DOMContentLoaded</code>를 사용하는 것이 보다 간편하고 바람직하다. 참고로 DOMContentLoaded는 addEventListener를 통해서만 사용가능하다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;DOMContentLoded&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.body.classList.toggle(<span class="string">&quot;dark&quot;</span>, <span class="built_in">localStorage</span>.getItem(<span class="string">&quot;theme&quot;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><h3 id="6-브라우저-기본-다크모드-감지하기"><a href="#6-브라우저-기본-다크모드-감지하기" class="headerlink" title="6. 브라우저 기본 다크모드 감지하기"></a>6. 브라우저 기본 다크모드 감지하기</h3><ul><li><a href="https://css-tricks.com/a-complete-guide-to-dark-mode-on-the-web/">A Complete Guide to Dark Mode on the Web</a><br>나아가 위 사이트를 통해 브라우저에서 기본으로 다크모드를 설정했을 때 이를 감지해 자동으로 적용하는 코드(<code>prefers-color-scheme</code>)에 대해 알아 볼 수 있다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/">StudyLog</category>
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/js%EC%97%B0%EC%8A%B5/">js연습</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/javascript/">javascript</category>
      
      
      <comments>https://hanseul-lee.github.io/2020/12/10/20-12-10-darkmode/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>20-12-10 목요일 TIL</title>
      <link>https://hanseul-lee.github.io/2020/12/10/20-12-10-TIL/</link>
      <guid>https://hanseul-lee.github.io/2020/12/10/20-12-10-TIL/</guid>
      <pubDate>Thu, 10 Dec 2020 09:18:19 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;20-12-10 목요일 TIL&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JS 수업 보강 (darkmode, star-rating 실습)</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --></li></ul><h2 id="오늘-할-일-계획"><a href="#오늘-할-일-계획" class="headerlink" title="오늘 할 일 (계획)"></a>오늘 할 일 (계획)</h2><ol><li><del>JS 복습 - 38, 39, 4</del></li><li><del>웅모 강사님 수업듣기(2시 ~ 5시)</del></li><li>React - Fastcampus 인강듣기(4 ~ 12)</li></ol><h2 id="오늘-한-일-피드백"><a href="#오늘-한-일-피드백" class="headerlink" title="오늘 한 일 (피드백)"></a>오늘 한 일 (피드백)</h2><ol><li>JS복습 및 정리 완료 -&gt; notion</li><li>오늘 수업 정리(darkmode, star-rating 실습)<ul><li><a href="">darkmode</a></li><li><a href="">star-rating</a></li></ul></li></ol><h3 id="배운점"><a href="#배운점" class="headerlink" title="배운점"></a>배운점</h3><ol><li><p><strong>CSS로 처리할 수 있다면 최대한 JS보단 CSS로 처리하려고 할 것</strong><br>왜냐햐면 CSS로 처리하는 것이 훨씬 빠르며 코드를 간단하게 구현할 수 있기 때문에</p><br></li><li><p><strong>강사님 코딩 스타일</strong><br>일단 되게 해라 → 그 다음부터 진짜 코딩시작(코드 리팩토링)</p><ul><li>예시<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 리팩토링 전</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.body.contains(<span class="string">&#x27;dark&#x27;</span>)) <span class="built_in">document</span>.body.classList.remove(<span class="string">&#x27;dark&#x27;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">document</span>.body.classList.add(<span class="string">&#x27;dark&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 리팩토링 후</span></span><br><span class="line"><span class="built_in">document</span>.body.classList.toggle(<span class="string">&#x27;dark&#x27;</span>);</span><br></pre></td></tr></table></figure><Br></li></ul></li><li><p>코드 시작 전 세팅</p><ol><li><code>$ cd &lt;project-folder&gt;</code> </li><li><code>$ npm init -y</code> package.json 생성 </li><li><code>$ npm install eslint eslint-config-airbnb-base eslint-plugin-import eslint-plugin-html --save-dev</code><br>install eslint &amp; friends 설치</li><li>이후 프로젝트 루트에 .eslintrc.json 파일을 생성하고 필요에 따라 아래와 같이 룰셋을 변경<br><a href="https://poiemaweb.com/eslint#5-eslintrcjson">.eslintrc.json 룰셋 참고 - poiemaweb</a></li><li>만약 새로운 코드 폴더 생성 시, package.json과 .eslintrc.json파일 복사 후 package.json의 name을 바꿔주고 <code>npm i</code> 해주면 됨.<br></li></ol></li></ol>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/TIL/">TIL</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/TIL/">TIL</category>
      
      
      <comments>https://hanseul-lee.github.io/2020/12/10/20-12-10-TIL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[미니 프로젝트] WATFLICHA - 영화 정보 사이트</title>
      <link>https://hanseul-lee.github.io/2020/12/05/20-11-20-WATFLICHA/</link>
      <guid>https://hanseul-lee.github.io/2020/12/05/20-11-20-WATFLICHA/</guid>
      <pubDate>Sat, 05 Dec 2020 02:46:21 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;[미니 프로젝트]&lt;br&gt;WATFLICHA ( 1차 : 20.11.16 ~ 20.11.20 / 2차 : 20.11.22 ~ 20.12.06)&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><blockquote><p>패스트 캠퍼스 FE스쿨 Javascript 프로젝트에서 진행한 프로젝트 사이트 WATFLICHA입니다.<br><a href="https://github.com/hanseul-lee/WATFLECHA">WATFLICHA github</a></p></blockquote><br><div class="figure center" style="width:;"><img class="fig-img" src="main.png" alt=""></div><br><h1 id="프로젝트-목표"><a href="#프로젝트-목표" class="headerlink" title="프로젝트 목표"></a>프로젝트 목표</h1><blockquote><p>넷플리스나 왓챠와 같은 OTT서비스를 클론 코딩 및 개선하여 WATFLECHA라는 영화 정보 사이트를 구현한다.</p></blockquote><h1 id="서비스-기능"><a href="#서비스-기능" class="headerlink" title="서비스 기능"></a>서비스 기능</h1><h3 id="1-로그인-페이지"><a href="#1-로그인-페이지" class="headerlink" title="1. 로그인 페이지"></a>1. 로그인 페이지</h3><ul><li>아이디, 비밀번호 값이 공백이거나, 회원가입 한 아이디가 없으면 에러 메세지를 출력해준다.</li><li>아이디 정보 저장 버튼을 체크했을 시, 한 번이라도 로그인하였다면 다음 로그인 화면에서 아이디가 남아있도록 했다.</li><li>아이디, 비밀번호를 올바르게 입력한 경우, 왓플릭차 메인페이지로 로그인되어 이동한다. 이때 이름, 아이디, 선호장르, 로그인 정보 저장 여부 및 현재 로그인 상태가 local storage에 담긴다.</li></ul><h3 id="2-회원가입-페이지"><a href="#2-회원가입-페이지" class="headerlink" title="2. 회원가입 페이지"></a>2. 회원가입 페이지</h3><ul><li>이름, 아이디, 비밀번호 입력 창에 공백 또는 정해진 아이디, 비밀번호 생성 규칙에 맞지 않은 경우 에러 메세지를 출력해준다.</li><li>아이디와 비밀번호는 4 ~ 15자리 영문 혹은 숫자, 이름은 1자 이상 영문, 한글, 숫자를 입력할 수 있게 했다.</li><li>비밀번호와 재확인 입력창이 같지 않은 경우, 에러 메세지를 출력해준다.</li><li>선호 장르를 선택하지 않은 경우, 에러 메세지를 출력해준다.</li><li>모든 조건을 맞춘 경우, 입력한 이름, 아이디, 비밀번호, 선호 장르를 DB에 전송하고 회원가입이 완료된다.</li></ul><h3 id="3-회원-정보-수정-페이지"><a href="#3-회원-정보-수정-페이지" class="headerlink" title="3. 회원 정보 수정 페이지"></a>3. 회원 정보 수정 페이지</h3><ul><li>이름, 비밀번호, 장르를 수정할 수 있다. (아이디는 수정 불가)</li><li>연필 아이콘 클릭 시 입력창에 값을 입력할 수 있다.</li><li>DB에 담긴 기존 정보와 비교해 값이 변경된 경우, 입력창 색이 초록색으로 바뀐다.</li><li>입력한 아이디, 비밀번호, 이름이 정규표현식 조건과 맞지 않는다면 에러 메세지를 출력해준다.</li><li>기존 비밀번호 및 비밀번호와 재확인 입력창이 같지 않은 경우, 에러 메세지를 출력해준다.</li><li>모든 조건에 맞게 정보를 수정하였을 경우, 입력한 이름, 아이디, 비밀번호, 선호 장르를 DB와 local storage(비밀번호 제외)에 전송하고 회원가입이 완료된다.</li></ul><h3 id="4-메인-페이지"><a href="#4-메인-페이지" class="headerlink" title="4. 메인 페이지"></a>4. 메인 페이지</h3><ul><li>메인화면 가장 위쪽에 화면이 꽉 차도록 영화 예고편을 무한 재생되도록 보여준다.</li><li>상단의 원하는 장르 클릭 시, 선택된 장르 페이지로 넘어간다.</li><li>영화 API에서 TOP20, 최신 영화 및 취향 저격 영화에 맞는 영화 목록을 불러와 슬라이드 형식으로 제공한다.</li><li>슬라이드의 이전, 다음 버튼 클릭 시, 좌우로 슬라이드가 넘어간다. 넘어간 슬라이드는 무한형식으로 일정 슬라이드를 넘어가면 처음이나 맨 끝으로 돌아간다.</li></ul><h3 id="5-팝업-페이지"><a href="#5-팝업-페이지" class="headerlink" title="5. 팝업 페이지"></a>5. 팝업 페이지</h3><ul><li>메인, 장르, 검색, 찜하기 페이지에서 원하는 영화를 클릭했을 때 팝업창이 보인다.</li><li>영화 API를 통해 제목, 평점, 예고편, 줄거리, 개봉일, 장르, 총 상영 시간, 출연 배우 정보가 렌더링 되도록 했다.</li><li>하트 버튼을 누르면 하트 애니메이션이 나타나고 ‘찜 완료!’로 표시가 되며, 북마크에 찜한 영화가 담긴다.</li><li>찜한 영화에서 다시 하트 버튼을 누르면 글자가 ‘찜하기’로 바뀌고 북마크에서 찜한 영화를 제거한다.</li></ul><h3 id="6-장르-페이지"><a href="#6-장르-페이지" class="headerlink" title="6. 장르 페이지"></a>6. 장르 페이지</h3><ul><li>메인 페이지에서 선택한 장르의 영화들이 렌더링 된다.</li><li>장르 페이지에서 다른 장르 클릭 시, 선택한 장르의 영화들이 렌더링 된다.</li><li>페이지네이션을 구현해 사용자가 원하는 페이지로 이동할 수 있게 했다.</li></ul><h3 id="7-검색-페이지"><a href="#7-검색-페이지" class="headerlink" title="7. 검색 페이지"></a>7. 검색 페이지</h3><ul><li>원하는 영화를 검색하면 검색 API에 의해 검색된 정보가 렌더링 된다.</li><li>더 보기 버튼 클릭 시, 다음 페이지가 아래에 이어 렌더링 되며 마지막 페이지라면 더 보기 버튼이 사라진다.</li></ul><h3 id="8-북마크-페이지"><a href="#8-북마크-페이지" class="headerlink" title="8. 북마크 페이지"></a>8. 북마크 페이지</h3><ul><li>DB에 저장된 북마크 영화들을 볼 수 있다.</li><li>북마크 페이지에서 팝업창을 통해 원하는 영화의 북마크를 제거할 수 있다.</li></ul><h1 id="개발기간"><a href="#개발기간" class="headerlink" title="개발기간"></a>개발기간</h1><hr><p>1차 구현 : 20.11.16 - 20.11.20<br>2차 구현 : 20.11.22 - 20.12.06</p><h1 id="기술스택-amp-툴"><a href="#기술스택-amp-툴" class="headerlink" title="기술스택 &amp; 툴"></a>기술스택 &amp; 툴</h1><hr><h3 id="Front-End"><a href="#Front-End" class="headerlink" title="Front-End"></a>Front-End</h3><ul><li>HTML</li><li>CSS</li><li>Javascript</li></ul><h3 id="협업"><a href="#협업" class="headerlink" title="협업"></a>협업</h3><ul><li>git/github</li><li>Slack</li></ul><h3 id="개발-프로세스"><a href="#개발-프로세스" class="headerlink" title="개발 프로세스"></a>개발 프로세스</h3><ul><li>Agile - Scrum</li></ul><br><h1 id="팀원"><a href="#팀원" class="headerlink" title="팀원"></a>팀원</h1><hr><ul><li><a href="https://github.com/Alex-Eojin">김어진</a> - 기획, 2,3 페이지 HTML/CSS/JS,<br>2차 구현(2,3 페이지 리팩토링, 6 장르 페이지 추가, 6,7 페이지 페이지네이션 추가)</li><li><a href="https://github.com/parksaneon">박상언</a> - 기획, 4,5 페이지 HTML/CSS/JS, 전반적인 진행사항 QA역할</li><li><a href="https://github.com/do-mandoo">원진솔</a> - 기획, 1 페이지 HTML/CSS/JS, github 관리</li><li><a href="https://github.com/hanseul-lee">이한슬</a> - 기획, 5,7,8 페이지 HTML/CSS/JS,<br>2차 구현(2,3 페이지 리팩토링, 6 장르 페이지 추가, 6,7 페이지 페이지네이션 추가)</li></ul>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/project/">project</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/Fastcampus/">Fastcampus</category>
      
      <category domain="https://hanseul-lee.github.io/tags/WATFLICHA/">WATFLICHA</category>
      
      
      <comments>https://hanseul-lee.github.io/2020/12/05/20-11-20-WATFLICHA/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
