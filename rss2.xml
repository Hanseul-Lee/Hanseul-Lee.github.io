<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>HS&#39;s blog</title>
    <link>https://hanseul-lee.github.io/</link>
    
    <atom:link href="https://hanseul-lee.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Tue, 05 Jan 2021 04:08:17 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[React] 리액트 라우터로 SPA 개발하기</title>
      <link>https://hanseul-lee.github.io/2021/01/05/React-13/</link>
      <guid>https://hanseul-lee.github.io/2021/01/05/React-13/</guid>
      <pubDate>Tue, 05 Jan 2021 04:33:09 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><!-- toc --><h3 id="프로젝트-생성-및-라이브러리-설치"><a href="#프로젝트-생성-및-라이브러리-설치" class="headerlink" title="프로젝트 생성 및 라이브러리 설치"></a>프로젝트 생성 및 라이브러리 설치</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npx create-react-app router-tutorial</span><br><span class="line">$ cd router-tutorial</span><br><span class="line">$ npm i react-router-dom</span><br></pre></td></tr></table></figure><h3 id="라우터-적용-BrowserRouter로-감싸기"><a href="#라우터-적용-BrowserRouter로-감싸기" class="headerlink" title="라우터 적용 - BrowserRouter로 감싸기"></a>라우터 적용 - BrowserRouter로 감싸기</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;BrowserRouter&gt;</span><br><span class="line">        &lt;App /&gt;</span><br><span class="line">    &lt;/BrowserRouter&gt;</span><br><span class="line">    documnet.getElementById(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="Route-컴포넌트로-특정-주소에-연결"><a href="#Route-컴포넌트로-특정-주소에-연결" class="headerlink" title="Route 컴포넌트로 특정 주소에 연결"></a><strong>Route 컴포넌트로 특정 주소에 연결</strong></h3><p>정확한 path만을 명시하려면 <code>exact</code>를 붙여준다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">&quot;주소규칙&quot;</span> component=&#123;보여줄 컴포넌트&#125; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;Route path=<span class="string">&quot;/profile&quot;</span> exact component=&#123;Profile&#125; /&gt;</span><br></pre></td></tr></table></figure><h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h3><p><code>&lt;a&gt;</code> 태그와 비슷하지만 페이지 전환되지 X</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Link to=<span class="string">&quot;주소&quot;</span>&gt;내용&lt;/Link&gt;</span><br><span class="line"></span><br><span class="line">&lt;Link to=<span class="string">&quot;/profile&quot;</span>&gt;프로필&lt;/Link&gt;</span><br></pre></td></tr></table></figure><h3 id="URL-parameter와-query"><a href="#URL-parameter와-query" class="headerlink" title="URL parameter와 query"></a>URL parameter와 query</h3><p>페이지에 유동적인 값을 전달할 때 사용</p><ul><li><strong>parameter</strong><br>특정 아이디나 이름을 사용하여 조회할 때<br>ex.  <code>/profile/lemon</code></li></ul><br><ul><li><strong>query</strong><br>특정 키워드를 검색하거나 페이지에 필요한 옵션을 전달할 때<br>ex. <code>/about?details=ture</code> <br><br>location의 search값에서 조회 가능<br>search에서 특정 값을 읽어오려면 문자열 → 객체 형태로 변환해야 함<br>쿼리 문자열을 객체로 변환할 때 qs 라이브러리 사용 <code>npm install qs</code></li></ul><p><strong>쿼리의 파싱 결과값</strong>은 항상 <strong>문자열</strong>이라는 것에 주의할 것 (숫자는 parseInt사용)</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> qs form <span class="string">&#x27;qs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> query = qs.parse(location.search, &#123;</span><br><span class="line">  ignoreQueryPrefix: <span class="literal">true</span>                  <span class="comment">// 문자열 맨 앞의 ? 생략</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br><h3 id="서브라우트-sub-Route"><a href="#서브라우트-sub-Route" class="headerlink" title="서브라우트(sub Route)"></a>서브라우트(sub Route)</h3><p>라우트 내부에 또 라우트를 정의하는 것</p><br><h3 id="withRouter"><a href="#withRouter" class="headerlink" title="withRouter"></a>withRouter</h3><p>HoC(High-order Component)로 라우트로 사용된 컴포넌트가 아니더라도 history, location, match에 접근가능하게 해 줌</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; withRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br></pre></td></tr></table></figure><br><h3 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h3><p>여러 Route를 감싸서 그 중 일치하는 단 하나의 라우트만을 렌더링<br>Not Found 페이지도 구현 가능</p><br><hr><p><strong>Reference</strong></p><ul><li>김민준, 리액트를 다루는 기술</li></ul>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/">StudyLog</category>
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/React/">React</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/React/">React</category>
      
      
      <comments>https://hanseul-lee.github.io/2021/01/05/React-13/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[React] Hooks</title>
      <link>https://hanseul-lee.github.io/2021/01/01/React-8/</link>
      <guid>https://hanseul-lee.github.io/2021/01/01/React-8/</guid>
      <pubDate>Fri, 01 Jan 2021 04:34:22 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;리액트 v16.8에 새로 도입된 Hooks에 대해 알아봅시다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><!-- toc --><p>*표시는 가장 빈번하게 사용되는 대표 Hooks 입니다.</p><br><h1 id="1-useState"><a href="#1-useState" class="headerlink" title="1. useState*"></a>1. useState*</h1><blockquote><p><strong>동적 상태 관리</strong></p></blockquote><p><code>const [state, setState] = useState(initialState);</code></p><ul><li>상태 유지 값과 그 값을 갱신하는 함수를 반환</li></ul><p><code>state</code> = initial state<br><code>setState</code> : state갱신 시 사용(Setter함수)</p><br><ul><li><p>주의<br>함수를 호출 (X) / 함수를 전달 (O)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onIncrease&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span> // 전달</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onIncrease()&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span> // 호출하면 안됨</span><br></pre></td></tr></table></figure></li><li><p>함수형 업데이트는 주로 나중에 컴포넌트를 최적화를 하게 될 때 사용</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> onIncrease = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//    setNumber(number + 1);</span></span><br><span class="line">    setNumber(<span class="function"><span class="params">prevNumber</span> =&gt;</span> prevNumber + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><br><h1 id="2-useEffect"><a href="#2-useEffect" class="headerlink" title="2. useEffect*"></a>2. useEffect*</h1><blockquote><p>리액트 컴포넌트가 <strong>렌더링될 때마다</strong> 특정 작업을 수행하도록 설정 <strong>(2번째 파라미터가 바뀔때)</strong></p></blockquote><br><ul><li><p>사용 예시</p><ol><li>마운트 될 때만 실행 (componentDidmount)<ul><li>2번째 파라미터(deps)로 <strong>[] 빈배열</strong></li></ul></li><li>특정 값이 업데이트될 때만 실행 (componentDidUpdate)<ul><li>2번째 파라미터(deps)로 <strong>검사하고 싶은 값</strong></li></ul></li><li>화면이 사라질때 실행 (componentWillUnmount)<br>컴포넌트 언마운트 전이나 업데이트 직전<ul><li>clean up함수 return</li></ul></li></ol></li><li><p>cf. componentDidUpdate만 하고 싶을 때 패턴 (componentDidmount는 X)</p></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mounted = useRef(<span class="literal">false</span>);</span><br><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!mounted.current) &#123;</span><br><span class="line">        mounted.currnet = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 실행하고 싶은 것</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;, [바뀌는 값])</span><br></pre></td></tr></table></figure><br><h1 id="3-useReducer"><a href="#3-useReducer" class="headerlink" title="3. useReducer"></a>3. useReducer</h1><blockquote><p><strong>상태관리 (상태 업데이트 로직 분리)</strong></p></blockquote><br><ul><li>리액트에서 리덕스 구현 가능 (+ Contexted API)</li><li>useState가 많아졌을 때, 이를 하나로 묶어 처리할 수 있게 줄여줌</li></ul><p><code>const [state, dispatch] = useReducer(reducer, &#123; 기본값 &#125;);</code><br><code>state</code> : 현재 상태<br><code>dispatch</code> : action을 발생시키는 함수<br><code>reducer</code> : state와 action을 전달받아 새로운 상태를 반환하는 함수</p><br><ul><li>state는 직접 변경할 수 없고, 이벤트에서 action을 dispatch해서 변경<br>어떻게 바꿀 것인지는 reducer에 기록</li><li>reducer함수에서 새로운 상태를 만들때는 반드시 불변성 지킬 것</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, dispatch] = useReducer(reducer, &#123; <span class="attr">value</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line">&lt;button onClick=&#123;<span class="function">() =&gt;</span> dispatch(&#123; <span class="attr">type</span>: <span class="string">&#x27;INCREMENT&#x27;</span> &#125;)&#125;&gt;+<span class="number">1</span>&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;...&#125;; <span class="comment">// 불변성을 지키면서 업데이트한 새로운 상태</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><ul><li>acrion의 이름은 대문자, 상수로 빼놓으면 좋음<br><code>const SET_WINNER = &#39;SET_WINNER&#39;;</code></li></ul><br><h1 id="4-useMemo"><a href="#4-useMemo" class="headerlink" title="4. useMemo"></a>4. useMemo</h1><blockquote><p><strong>복잡한 함수 결과값을 기억해 연산 최적화(2번째 파라미터가 바뀌기 전까지)</strong></p></blockquote><p>ex. 특정 값이 바뀌었을 때만 연산 실행 (list에 숫자 추가되었을때만 평균 계산)</p><ul><li>처음엔 함수 안에 console.log 넣고 필요할 때만 실행되는지 꼭 확인! (Hook은 함수의 전체를 재실행하는 문제 존재)</li><li>/ cf. useCallback: 함수 자체를 기억<br>/ cf. useRef: 일반 값을 기억</li></ul><br><h1 id="5-useCallback"><a href="#5-useCallback" class="headerlink" title="5. useCallback"></a>5. useCallback</h1><blockquote><p><strong>함수 재사용 - 함수 자체를 기억 (2번째 파라미터가 바뀌기 전까지)</strong><br>자식 컴포넌트에 props를 전달할 때 useCallback을 사용하지 않으면<br>렌더링 될 때마다 함수가 다시 생성되므로 자식은 props가 바뀌었다고 생각해 불필요한 리렌더링 발생<br>⇒ 따라서 useCallback 사용해 이를 방지</p></blockquote><ul><li>props로 전달해야 할 함수를 만들 때는 useCallback을 사용하여 함수를 감싸는 것을 습관화하자.</li><li>[] 빈 배열 넣으면 컴포넌트가 렌더링될 때만 함수 생성</li></ul><br><h1 id="6-useRef"><a href="#6-useRef" class="headerlink" title="6. useRef"></a>6. useRef</h1><p><strong>① 특정 DOM 선택</strong>, <strong>② 컴포넌트 안의 변수 관리</strong></p><ul><li><p><code>ref</code> : ① React에서 DOM 선택 할 때 (input에 focus, 스크롤 위치 등)</p><pre><code>    ② 컴포넌트 안에서 조회 및 수정 할 수 있는 변수를 관리할 때</code></pre><p>  <code>useRef</code> : 함수형 컴포넌트에서 <code>ref</code> 사용 시 (Hook함수)</p></li></ul><h3 id="6-1-useRef-특정-DOM-선택"><a href="#6-1-useRef-특정-DOM-선택" class="headerlink" title="6.1 useRef - 특정 DOM 선택"></a>6.1 useRef - 특정 DOM 선택</h3><p><code>useRef()</code> 사용해 객체 만들고 원하는 DOM에 <code>ref</code> 값으로 설정하면 <code>.current</code> 는 우리가 원하는 DOM을 가리킴</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nameInput = useRef();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> onReset = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setInputs(&#123;</span><br><span class="line">      name: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      nickname: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    nameInput.current.focus();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        name=<span class="string">&quot;name&quot;</span></span><br><span class="line">        placeholder=<span class="string">&quot;이름&quot;</span></span><br><span class="line">        onChange=&#123;onChange&#125;</span><br><span class="line">        value=&#123;name&#125;</span><br><span class="line">        ref=&#123;nameInput&#125;</span><br><span class="line">            /&gt;</span><br></pre></td></tr></table></figure><ul><li><code>useRef()</code> 를 사용 할 때 파라미터를 넣어주면, 이 값이 <code>.current</code> 의 기본값이 됨  ex) <code>const nextId = useRef(4);</code></li></ul><br><h3 id="6-2-useRef-컴포넌트-안-변수-관리"><a href="#6-2-useRef-컴포넌트-안-변수-관리" class="headerlink" title="6.2 useRef - 컴포넌트 안 변수 관리"></a>6.2 useRef - 컴포넌트 안 변수 관리</h3><p>useState : 상태가 바뀌면 리렌더링<br>useRef : 상태가 바뀌어도 컴포넌트의 리렌더링이 되게 하고 싶지 않을 때 사용<br>               (ex. todos 배열의 id값)</p><ul><li><code>setTimeout</code>, <code>setInterval</code> 을 통해서 만들어진 <code>id</code></li><li>외부 라이브러리를 사용하여 생성된 인스턴스</li><li>scroll 위치</li><li>App 컴포넌트에서 <code>useRef</code> 를 사용해 변수 관리 → App에서 배열선언 후 UserList에게 props로 전달</li></ul><br><hr><p><strong>Reference</strong></p><ul><li>김민준, 리액트를 다루는 기술</li><li>조현영 - 웹 게임을 만들며 배우는 React (<a href="https://www.inflearn.com/course/web-game-React#">https://www.inflearn.com/course/web-game-React#</a>)</li></ul>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/">StudyLog</category>
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/React/">React</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/React/">React</category>
      
      
      <comments>https://hanseul-lee.github.io/2021/01/01/React-8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[React] 컴포넌트</title>
      <link>https://hanseul-lee.github.io/2021/01/01/React-3/</link>
      <guid>https://hanseul-lee.github.io/2021/01/01/React-3/</guid>
      <pubDate>Fri, 01 Jan 2021 04:34:02 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;리액트는 컴포넌트를 기반으로 데이터를 주고 받는다. 컴포넌트는 일종의 UI조각으로 컴포넌트의 생성과 외부에서 정보를 주는 props, 컴포넌트 내부의 변경할 수 있는 state에 대해 알아보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><!-- toc --><h1 id="컴포넌트-Component"><a href="#컴포넌트-Component" class="headerlink" title="컴포넌트(Component)"></a>컴포넌트(Component)</h1><p>: 일종의 UI 조각<br><br></p><div class="figure center" style="width:;"><img class="fig-img" src="1.png" alt="component"><span class="caption">component</span></div><br><ul><li>컴포넌트 생성 방법 : ① 함수, ② class<br>현재는 함수형과 Hook을 함께 사용할 것을 권장함</li><li><strong>컴포넌트 이름은 항상 대문자로 시작</strong></li><li>class 형태 컴포넌트에서는 <code>render</code>함수와 내부에서 JSX를 return해줘야 함</li><li><code>ReactDOM.render(element, 루트노드)</code> : 컴포넌트를 페이지에 렌더링<br>(브라우저 상에서 리액트 컴포넌트를 보여줄 때)</li></ul><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><ul><li>컴포넌트 외부에서 컴포넌트에게 주는 데이터<br>부모 컴포넌트가 자식 컴포넌트에게 주는 값 (읽기전용)</li><li>{props}<strong>.defaultProps</strong> : props 기본값 설정</li><li>{props}<strong>.children:</strong> 컴포넌트 태그 사이 내용  ex. <code>&lt;Hello&gt;리액트&lt;/Hello&gt;</code></li><li>{props}.<strong>propTypes:</strong> props의 필수 타입 지정</li><li>{props}.<strong>isRequired :</strong> 필수 propTypes 설정</li></ul><br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span>;</span><br><span class="line"></span><br><span class="line">MyComponent.propTypes = &#123;</span><br><span class="line">  name: PropTypes.string,</span><br><span class="line">  favoriteNumber: PropTypes.number.isRequired</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>클래스형 컴포넌트에서는 render함수에서 this.props로 사용</li></ul><br><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><ul><li><p>컴포넌트 내부에서 변경할 수 있는 데이터</p></li><li><p>동적인 데이터를 다룰 때 사용</p></li><li><p><code>setState(), useState()</code> : state 값 변경 시 사용<br>(주의) 직접 state값을 변경해주면 안됨! 반드시 세터함수 이용</p></li></ul><br><div class="figure center" style="width:600px;"><img class="fig-img" src="2.png" style="width:600px;"alt="props와 state"><span class="caption">props와 state</span></div><div class="figure center" style="width:600px;"><img class="fig-img" src="3.png" style="width:600px;"alt="render함수"><span class="caption">render함수</span></div><br><hr><p><strong>Reference</strong></p><ul><li>김민준, 리액트를 다루는 기술</li><li><a href="https://slides.com/woongjae">https://slides.com/woongjae</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/">StudyLog</category>
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/React/">React</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/React/">React</category>
      
      
      <comments>https://hanseul-lee.github.io/2021/01/01/React-3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>URL의 구조</title>
      <link>https://hanseul-lee.github.io/2020/12/24/20-12-24-URL/</link>
      <guid>https://hanseul-lee.github.io/2020/12/24/20-12-24-URL/</guid>
      <pubDate>Thu, 24 Dec 2020 05:52:14 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;URI(Uniform Resource Identifier) 는 인터넷에 있는 접근가능한 자원을 나타내는 유일한 주소를 일관되게 표현하는 형식을 일컫는다. URI의 하위 개념으로는 URL과 URN이 있다. URL의 구조에 대해 자세히 알아보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><p><strong>URI(Uniform Resource Identifier)</strong> 는 인터넷에 있는 접근가능한 자원을 나타내는 유일한 주소를 일관되게 표현하는 형식을 일컫는다.<br>URI의 하위 개념으로는 URL과 URN이 있다.</p><br><div class="figure center" style="width:700px;"><img class="fig-img" src="uri.png" style="width:700px;"alt="URI의 구조"><span class="caption">URI의 구조</span></div><br><h1 id="URL의-구조"><a href="#URL의-구조" class="headerlink" title="URL의 구조"></a>URL의 구조</h1><p>다음 URL을 보며 구조를 파악해 보자.</p><br><div class="figure center" style="width:1000px;"><img class="fig-img" src="0.png" style="width:1000px;"alt=""></div><!-- ```http://www.example.com:80/path/to/myfile.html?key1=value1&key2=value2#SomewhereInTheDocument``` --><br><h3 id="1-Protocol-Scheme"><a href="#1-Protocol-Scheme" class="headerlink" title="1. Protocol(Scheme)"></a>1. Protocol(Scheme)</h3><div class="figure center" style="width:600px;"><img class="fig-img" src="1.png" style="width:600px;"alt=""></div><br><ul><li><code>http(Hyper Text Transfer Protocol)</code>는 프로토콜(규약)이다.<br>URL의 첫 파트이자 웹에서 서버와 클라이언트간에 어떤 방법으로 자원을 접근할지 알려준다.  </li><li>요즘은 https를 기본 프로토콜로 쓰는데, http에 보안이 강화된 버전이다.</li><li>브라우저에서 가장 많이 사용되는 https/http외에도 mailto: (이메일 주소를 지정하는 프로토콜), ftp: (파일을 주고받는 프로토콜) 등 다양한 프로토콜이 존재한다.</li></ul><br><h3 id="2-Domain-Name"><a href="#2-Domain-Name" class="headerlink" title="2. Domain Name"></a>2. Domain Name</h3><div class="figure center" style="width:600px;"><img class="fig-img" src="2.png" style="width:600px;"alt=""></div><br><ul><li>도메인 네임은 URL에서 웹서버의 위치를 지정한다.</li><li>직접 IP 주소(ex. 127.0.0.1)를 사용하는 것도 가능하다.</li></ul><br><h3 id="3-Port"><a href="#3-Port" class="headerlink" title="3. Port"></a>3. Port</h3><div class="figure center" style="width:600px;"><img class="fig-img" src="3.png" style="width:600px;"alt=""></div><br><ul><li>웹서버에서 자원을 접근하기 위해 사용하는 관문.</li><li>표준 HTTP 포트는 80번 HTTPS는 443이다. 표준 포트를 사용한다면 포트번호는 보통 생략한다.</li></ul><br><h3 id="4-Path"><a href="#4-Path" class="headerlink" title="4. Path"></a>4. Path</h3><div class="figure center" style="width:600px;"><img class="fig-img" src="4.png" style="width:600px;"alt=""></div><br><ul><li>웹서버에서 자원에 대한 경로</li><li>초기의 웹에서는 웹서버상에서 물리적 파일 위치를 나타넸지만, 지금은 실제 물리적 경로를 나타내지 않고, 웹 서버에서 추상화하여 보여준다.</li><li>루트 자원을 나타내려면 “/”을 사용한다.</li></ul><br><h3 id="5-Query-Parameters"><a href="#5-Query-Parameters" class="headerlink" title="5. Query Parameters"></a>5. Query Parameters</h3><div class="figure center" style="width:600px;"><img class="fig-img" src="5.png" style="width:600px;"alt=""></div><br><ul><li>&amp; 기호로 구분된 키/값으로 짝을 이룬 리스트</li><li>키와 값은 =문자로 구분한다.</li></ul><br><h3 id="6-Fragment-identifier-Anchor"><a href="#6-Fragment-identifier-Anchor" class="headerlink" title="6. Fragment identifier(Anchor)"></a>6. Fragment identifier(Anchor)</h3><div class="figure center" style="width:600px;"><img class="fig-img" src="6.png" style="width:600px;"alt=""></div><br><ul><li>세부항목에 대한 책갈피 역할</li><li>ex. 특정 스크롤 위치로 이동(목차 등)</li><li>요청이 서버에 보내지지 않는다.</li></ul><br><hr><p><strong>Reference</strong></p><ul><li><a href="https://poiemaweb.com/js-spa">https://poiemaweb.com/js-spa</a></li><li><a href="https://developer.mozilla.org/ko/docs/Learn/Common_questions/What_is_a_URL">https://developer.mozilla.org/ko/docs/Learn/Common_questions/What_is_a_URL</a></li><li><a href="https://ko.wikipedia.org/wiki/%ED%86%B5%ED%95%A9_%EC%9E%90%EC%9B%90_%EC%8B%9D%EB%B3%84%EC%9E%90s">https://ko.wikipedia.org/wiki/%ED%86%B5%ED%95%A9_%EC%9E%90%EC%9B%90_%EC%8B%9D%EB%B3%84%EC%9E%90</a></li><li><a href="https://www.betterweb.or.kr/blog/url%EC%9D%B4%EB%9E%80/">https://www.betterweb.or.kr/blog/url%EC%9D%B4%EB%9E%80/</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/">StudyLog</category>
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/etc/">etc</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/URL/">URL</category>
      
      
      <comments>https://hanseul-lee.github.io/2020/12/24/20-12-24-URL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[React] Router : history, match, location</title>
      <link>https://hanseul-lee.github.io/2020/12/24/React-12/</link>
      <guid>https://hanseul-lee.github.io/2020/12/24/React-12/</guid>
      <pubDate>Thu, 24 Dec 2020 01:05:17 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;history, match, location은 리액트 라우트로 사용된 컴포넌트에 전달되는 props 중 하나로, 이 객체들를 통해 컴포넌트 내에 구현하는 메서드에서 라우터 API를 호출할 수 있다.  &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h1 id="Router-props"><a href="#Router-props" class="headerlink" title="Router props"></a>Router props</h1><p>history, match, location은 리액트 라우트로 사용된 컴포넌트에 전달되는 props 중 하나로, 이 객체들를 통해 컴포넌트 내에 구현하는 메서드에서 라우터 API를 호출할 수 있다. </p><p><code>console.log(props)</code>를 해주면 다음과 같은 결과를 볼 수 있다.</p><br><div class="figure center" style="width:700px;"><img class="fig-img" src="2020-12-24-14-29-52.png" style="width:700px;"alt="console.log(props)"><span class="caption">console.log(props)</span></div><p>반환된 객체(props)에서 history, location, match가 담겨있는 것을 확인할 수 있다.</p><Br><h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><p>history 객체는 브라우저의 history와 유사하다.<br>스택(stack)에 현재까지 이동한 url 경로들이 담겨있는 형태로 주소를 임의로 변경하거나 되돌아갈 수 있도록 해준다.<br>history객체는 mutable하므로 history.location보다는 location을 직접 사용해 주기를 권장한다.</p><Br><div class="figure center" style="width:700px;"><img class="fig-img" src="2020-12-24-14-38-17.png" style="width:700px;"alt=""></div><Br><ul><li><strong>action</strong> : [string] 최근에 수행된 action (PUSH, REPLACE or POP)</li><li><strong>block(prompt)</strong> : [function] history 스택의 PUSH/POP 동작을 제어</li><li><strong>go(n)</strong> : [function] : history 스택의 포인터를 n번째로 이동</li><li><strong>goBack()</strong> : [function] 이전 페이지로 이동</li><li><strong>goForward()</strong> : [function] 앞 페이지로 이동</li><li><strong>length</strong> : [number] 전체 history 스택의 길이</li><li><strong>location</strong> : [JSON object] 최근 경로 정보</li><li><strong>push(path, [state])</strong> : [function] 새로운 경로를 history 스택으로 푸시하여 페이지를 이동</li><li><strong>replace(path, [state])</strong> : [function] 최근 경로를 history 스택에서 교체하여 페이지를 이동</li></ul><Br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 뒤로 이동</span></span><br><span class="line">handleGoBack = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.props.history.goBack();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 홈으로 이동</span></span><br><span class="line">handleGoHome = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.props.history.push(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">componentDidMount() &#123;</span><br><span class="line">  <span class="comment">// 페이지에 변화가 생기려고 할 때마다 정말 나갈 것인지 질문함</span></span><br><span class="line">  <span class="built_in">this</span>.unblock = <span class="built_in">this</span>.props.history.block(<span class="string">&#x27;정말 돌아가시겠습니까?&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><Br><h2 id="location"><a href="#location" class="headerlink" title="location"></a>location</h2><p><strong>location 객체에는 현재 페이지의 정보를 가지고 있다.</strong><br>대표적으로 location.search로 현재 url의 쿼리 스트링을 가져올 수 있다.</p><Br><div class="figure center" style="width:700px;"><img class="fig-img" src="2020-12-24-14-41-01.png" style="width:700px;"alt=""></div><Br><ul><li>예제1</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route</span><br><span class="line">  render=&#123;<span class="function">(<span class="params">&#123; location &#125;</span>) =&gt;</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h2&gt;존재하지 않는 페이지 입니다.&lt;/h2&gt;</span><br><span class="line">      &lt;p&gt;&#123;location.pathname&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><ul><li>예제2</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> About = <span class="function">(<span class="params">&#123; location &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> query = qs.parse(location.search, &#123;</span><br><span class="line">    ignoreQueryPrefix: <span class="literal">true</span>, <span class="comment">// 문자열 맨 앞의 ? 생략</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> showDetail = query.detail === <span class="string">&#x27;true&#x27;</span>; <span class="comment">// 쿼리의 파싱 결과값은 항상 문자열이라는 것에 주의</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;소개&lt;/h1&gt;</span><br><span class="line">      &lt;p&gt;안녕하세요 라라랜드 맛있는 레몬워터입니다.&lt;/p&gt;</span><br><span class="line">      &#123;showDetail &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>제가 제일 좋아하는 음료수랍니다.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br><h2 id="match"><a href="#match" class="headerlink" title="match"></a>match</h2><p><strong>match 객체에는 ‘Route path’와 URL이 매칭된 것에 대한 정보가 담겨져있다.</strong><br>대표적으로 match.params로 path에 설정한 파라미터값을 가져올 수 있다.</p><Br><div class="figure center" style="width:700px;"><img class="fig-img" src="2020-12-24-14-42-05.png" style="width:700px;"alt=""></div><Br><ul><li><strong>isExact</strong> : [boolean] true일 경우 전체 경로가 완전히 매칭될 경우에만 요청을 수행</li><li><strong>params</strong> : [JSON object] url path로 전달된 파라미터 객체 </li><li><strong>path</strong> : [string] 라우터에 정의된 path</li><li><strong>url</strong> : [string] 실제 클라이언트로부터 요청된 url path</li></ul><Br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Profile = <span class="function">(<span class="params">&#123; match &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; username &#125; = match.params;</span><br><span class="line">  <span class="keyword">const</span> user = data[username];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>존재하지 않는 사용자입니다.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h3&gt;&#123;user.name&#125;의 프로필&lt;/h3&gt;</span><br><span class="line">      &lt;p&gt;&#123;user.description&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br><hr><p><strong>Reference</strong></p><ul><li>김민준, 리액트를 다루는 기술</li><li><a href="https://reactrouter.com/web/api/history">https://reactrouter.com/web/api/history</a></li><li><a href="https://gongbu-ing.tistory.com/45">https://gongbu-ing.tistory.com/45</a></li><li><a href="https://medium.com/@han7096/react-router-v4-%EC%A0%95%EB%A6%AC-e9931b63dcae">https://medium.com/@han7096/react-router-v4-%EC%A0%95%EB%A6%AC-e9931b63dcae</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/">StudyLog</category>
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/React/">React</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/React/">React</category>
      
      
      <comments>https://hanseul-lee.github.io/2020/12/24/React-12/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[VS Code] VS Code에서 md파일 미리보기</title>
      <link>https://hanseul-lee.github.io/2020/12/24/20-12-24-VScode/</link>
      <guid>https://hanseul-lee.github.io/2020/12/24/20-12-24-VScode/</guid>
      <pubDate>Wed, 23 Dec 2020 22:20:03 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;VS Code에서 md파일 미리보기 기능을 통해 markdown을 실시간으로 확인해보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><p>Visual Studio Code에서 .md를 확장명으로 작성하면 markdowm으로 문서를 작성할 수 있다.<br>기본적으로 github 블로그에서 글을 작성할 때 md파일로 작성하는 데 가끔 github README.md나 Velog에서 아래 사진처럼 실시간으로 완성된 포스팅을 보여주는 게 부러울 때가 있었다. </p><!-- ![velog](2020-12-24-07-31-53.png) --><div class="figure center" style="width:700px;"><img class="fig-img" src="2020-12-24-07-31-53.png" style="width:700px;"alt="Velog 글 작성 시 화면"><span class="caption">Velog 글 작성 시 화면</span></div><br><p>그런데 VS Code에서도 이렇게 실시간으로 md파일을 보여주는 미리보기가 존재한다는 걸 알게되었다.<br>단축키 <code>Ctrl + Alt + v</code>를 통해 다음과 같이 확인할 수 있다. </p><br><div class="figure center" style="width:700px;"><img class="fig-img" src="2020-12-24-07-26-23.png" style="width:700px;"alt="VS Code에서 지원하는 md파일 미리보기"><span class="caption">VS Code에서 지원하는 md파일 미리보기</span></div><p>지금은 markdown에 익숙해졌지만, 이렇게 미리보기를 통해 실시간으로 확인한다면 훨씬 유용할 것 같다.</p>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/">StudyLog</category>
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/Tip/">Tip</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/VS-Code/">VS Code</category>
      
      
      <comments>https://hanseul-lee.github.io/2020/12/24/20-12-24-VScode/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[React] 컴포넌트 스타일링</title>
      <link>https://hanseul-lee.github.io/2020/12/20/React-9/</link>
      <guid>https://hanseul-lee.github.io/2020/12/20/React-9/</guid>
      <pubDate>Sun, 20 Dec 2020 00:49:03 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;리액트는 Vue, Angular와는 다르게 스타일이 스코핑되지 않는다는 문제점을 가지고 있다. 따라서 이를 해결하기 위해 리액트에서 컴포넌트를 스타일링하는 다양한 방식을 알아보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><p>리액트는 Vue, Angular와는 다르게 스타일이 스코핑되지 않는다는 문제점을 가지고 있다. 즉, CSS가 캡슐화되지 않아 예기치 못한 문제가 발생하기 쉽고 이를 자동화시켜주기 위해 다양한 방법들이 제시되었다. 리액트에서 컴포넌트를 스타일링하는 방법으로는 크게 다음과 같은 4가지로 나눌 수 있다.</p><br><ol><li><strong>일반 CSS</strong></li><li><strong>Sass</strong></li><li><strong>CSS Module</strong></li><li><strong>styled-components</strong></li></ol><h1 id="1-일반-CSS"><a href="#1-일반-CSS" class="headerlink" title="1. 일반 CSS"></a>1. 일반 CSS</h1><p>일반 CSS로 CSS 스타일링을 하는 방법은 2가지가 있다.</p><br><ol><li><p>네이밍 규칙 이용<br>BEM과 같이 이름을 지을 때 일종의 규칙을 준수하여 작성</p></li><li><p>CSS Selector<br>CSS class의 상속 관계를 이용해 스타일 적용</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* App.css */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 기존 */</span></span><br><span class="line"><span class="selector-class">.App-logo</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* CSS Selecotr 사용 */</span></span><br><span class="line"><span class="selector-class">.App</span> <span class="selector-class">.logo</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><br><h1 id="2-Sass"><a href="#2-Sass" class="headerlink" title="2. Sass"></a>2. Sass</h1><p><strong>Sass</strong>(Syntactically Awesome StyleSheets)는 CSS 전처리기로 CSS의 한계와 단점을 보완하여 보다 가독성이 높고 코드의 재사용에 유리한 CSS를 생성하기 위해 탄생했다.</p><ul><li>Sass에서는 두 가지 확장자 .scss와 .sass를 지원하는데 기존 CSS와 작성방법이 비슷한 .scss를 사용하는 것을 권장한다.</li><li>스타일 코드를 계층적으로 구조화해 가독성이 높고, 스타일 코드의 재활용성을 높여주거나 설정을 커스터마이징하는 다양한 기능 및 라이브러리를 제공한다는 장점 또한 지니고 있다.</li></ul><p>먼저 node-sass 라이브러리를 설치한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install node-sass</span><br><span class="line">$ npm start</span><br></pre></td></tr></table></figure><p>이 후 .scss 파일에 sass문법을 적용해 스타일링을 해가면 기존 CSS를 사용하는 것보다 훨씬 가독성 좋은 스타일링을 구현할 수 있다.</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* App.scss */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.App</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.logo</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40vmin</span>;</span><br><span class="line">    <span class="attribute">pointer-events</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h1 id="3-CSS-Module"><a href="#3-CSS-Module" class="headerlink" title="3. CSS Module"></a>3. CSS Module</h1><ul><li>클래스 이름을 [filename]_[classname]__[hash] 형태로 자동 변환해 이름의 중첩을 방지.</li><li>자동으로 변환되므로 클래스 네이밍 시 BEM과 같이 복잡하게 규칙 정하지 않고 마음대로 사용 가능함.</li><li><code>.module.css</code> 확장자로 파일 저장 시 CSS Module 적용됨.</li></ul><h3 id="classnames"><a href="#classnames" class="headerlink" title="classnames"></a>classnames</h3><ul><li>class를 조건부로 설정할 때 유용한 라이브러리</li></ul><br><h1 id="4-styled-components"><a href="#4-styled-components" class="headerlink" title="4. styled-components"></a>4. styled-components</h1><ul><li>자바스크립트 파일 안에 스타일을 선언하는 방식(CSS-in-JS)</li><li>스타일을 선언하며 바로 컴포넌트 생성 가능</li><li>Tagged 템플릿 리터럴</li></ul><br><hr><p><strong>Reference</strong></p><ul><li>김민준, 리액트를 다루는 기술</li><li><a href="poiemaweb.com/">poiemaweb.com/</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/">StudyLog</category>
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/React/">React</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/React/">React</category>
      
      
      <comments>https://hanseul-lee.github.io/2020/12/20/React-9/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[React] JSX 문법</title>
      <link>https://hanseul-lee.github.io/2020/12/18/React-2/</link>
      <guid>https://hanseul-lee.github.io/2020/12/18/React-2/</guid>
      <pubDate>Thu, 17 Dec 2020 16:01:01 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;리액트에서 JSX 문법을 사용해 XML형태 코드를 Javascript로 손쉽게 변환할 수 있다. JSX 문법의 규칙에 대해 자세히 알아보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><p><strong>JSX(Javascript XML)</strong> : 리액트에서 XML형태 코드를 Javascript로 변환<br><br></p><ul><li><p>최상위 요소는 하나만 존재해야 함</p></li><li><p>최상위 요소 리턴하는 경우, () 로 감싸야 함</p></li><li><p>태그는 꼭 닫아야 하고,  자식요소가 없을 시 self closing을 사용함.</p><ul><li><code>&lt;p&gt;Hello, World&lt;/p&gt;</code></li><li><code>&lt;br /&gt;</code></li></ul></li><li><p>2개 이상의 엘리먼트는 무조건 하나의 태그로 감싸야 함<br>만약, 불필요한 div 생성 시, Fragment 사용(태그 이름 없이 작성)</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;&gt;</span><br><span class="line">  &lt;div&gt;<span class="number">2</span>개 이상의&lt;/div&gt;</span><br><span class="line">  &lt;p&gt;태그는 감싸자&lt;/p&gt;</span><br><span class="line">&lt;/&gt;</span><br></pre></td></tr></table></figure><br></li><li><p>JSX내부에서 Javascript 변수를 표현할 땐 {}로 감싸야 함</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;이렇게&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>JavaScript 값을 보여줄 땐, &#123;name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br></li><li><p>인라인 style은 객체 형태로 작성하고, camelCase로 네이밍 함.</p></li><li><p>class를 설정 할 때는 <code>class</code>가 아닌 <code>className</code>으로 설정해야 함.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> style = &#123;</span><br><span class="line">  background: <span class="string">&#x27;grey&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  &lt;div style=&#123;style&#125;&gt;</span><br><span class="line">    &lt;div className=<span class="string">&quot;my-style&quot;</span>&gt;</span><br><span class="line">      style과 className</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><br></li><li><p>JSX 내부 주석 : <code>&#123;/* 내부 주석은 이렇게*/&#125;</code><br>태그 내부 주석 : <code>// 태그 내 주석은 이렇게</code></p></li></ul><hr><p><strong>Reference</strong></p><ul><li>김민준, 리액트를 다루는 기술</li></ul>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/">StudyLog</category>
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/React/">React</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/React/">React</category>
      
      
      <comments>https://hanseul-lee.github.io/2020/12/18/React-2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[git] git 명령어 정리</title>
      <link>https://hanseul-lee.github.io/2020/12/17/20-12-17-git-cheatSheet/</link>
      <guid>https://hanseul-lee.github.io/2020/12/17/20-12-17-git-cheatSheet/</guid>
      <pubDate>Thu, 17 Dec 2020 04:56:47 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;git 명령어를 보다 유용하게 사용하기 위해 자주 사용하는 명령어를 정리하였습니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><!-- toc --><p>git 명령어를 보다 유용하게 사용하기 위해 자주 사용하는 명령어를 정리하였습니다. </p><br><h1 id="전체-흐름-요약"><a href="#전체-흐름-요약" class="headerlink" title="전체 흐름 요약"></a>전체 흐름 요약</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">            -add-&gt;      -commit-&gt;     -push-&gt;</span><br><span class="line">+-------------+-------------+------------+-------------+</span><br><span class="line">| Working dir |    Index    | Local repo | Remote repo |</span><br><span class="line">+-------------+-------------+------------+-------------+</span><br><span class="line">         &lt;-checkout-                 &lt;-fetch-</span><br></pre></td></tr></table></figure><br><ol><li><p>github에 <strong>원격 저장소</strong> 생성한다.</p><ul><li><strong>원격 저장소 (Remote repository)</strong> : github와 같이 외부 서버의 원격 프로젝트 저장소</li></ul></li><li><p><strong>로컬 저장소</strong>의 <strong>작업 디렉토리</strong>에서 파일을 작성한다.</p><ul><li><strong>로컬 저장소 (Local repository)</strong> : 본인의 컴퓨터에 저장된 프로젝트 저장소</li><li><strong>작업 디렉토리(Working directory)</strong>: 실제 파일이 위치한 디렉토리.</li></ul></li><li><p><code>git add [파일이름]</code> 또는 <code>git add .</code>을 통해 변경된 파일들을 <strong>스테이징</strong>해 <strong>Index</strong> 영역에 등록한다.</p><ul><li><strong>스테이징(Staging)</strong>: 확정할 변경 사항을 준비시키는 것.</li><li><strong>인덱스(Index)</strong>: 확정할 준비가 된 변경 사항들이 모인 영역.</li></ul></li><li><p><code>git commit -m &quot;commit message&quot;</code> 명령으로 스테이징된(Staged) 변경 사항을 commit해 로컬 저장소에 등록한다.</p><ul><li><strong>Commit</strong>: 인덱스의 변경 사항들을 확정하는 것. </li></ul></li><li><p>원격 저장소를 clone 해 로컬 저장소와 연결한다. 이후 push해 커밋된 변경사항들을 원격 저장소에 게시한다.</p><ul><li><strong>Push</strong>: 확정된 변경 사항을 원격 저장소에 게시하는 것.</li><li><strong>origin</strong>: 로컬 저장소의 원본 원격 저장소<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone [내 repo 주소]</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure></li></ul></li></ol><br><h1 id="git-cheat-sheet"><a href="#git-cheat-sheet" class="headerlink" title="git cheat sheet"></a>git cheat sheet</h1><p>참고로 git 명령어를 사용함에 있어 다음과 같은 git cheat sheet를 사용하면 보다 유용하게 명령어를 파악할 수 있다.<br><br></p><div class="figure center" style="width:800px;"><img class="fig-img" src="cheatSheet.png" style="width:800px;"alt="git cheat sheet"><span class="caption">git cheat sheet</span></div><br><hr><p><strong>Reference</strong></p><ul><li><a href="https://git-scm.com/docs">https://git-scm.com/docs</a></li><li><a href="https://parksb.github.io/article/28.html">https://parksb.github.io/article/28.html</a></li><li><a href="https://github.blog/2015-07-29-git-2-5-including-multiple-worktrees-and-triangular-workflows/">https://github.blog/2015-07-29-git-2-5-including-multiple-worktrees-and-triangular-workflows/</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/">StudyLog</category>
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/git/">git</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/git/">git</category>
      
      <category domain="https://hanseul-lee.github.io/tags/github/">github</category>
      
      
      <comments>https://hanseul-lee.github.io/2020/12/17/20-12-17-git-cheatSheet/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[git] gitHub에 new repository 생성하기</title>
      <link>https://hanseul-lee.github.io/2020/12/17/20-12-17-git-newRepo/</link>
      <guid>https://hanseul-lee.github.io/2020/12/17/20-12-17-git-newRepo/</guid>
      <pubDate>Thu, 17 Dec 2020 03:21:32 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;github에 new repository 생성하는 방법을 알아봅시다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h2 id="1-GitHub-Repository-생성"><a href="#1-GitHub-Repository-생성" class="headerlink" title="1. GitHub Repository 생성"></a>1. GitHub Repository 생성</h2><div class="figure center" style="width:700px;"><img class="fig-img" src="1.jpg" style="width:700px;"alt=""></div><br><p>GitHub에서 다음과 같이 새로운 Repository name을 입력하고 Create repository 버튼을 눌러 새 Repository를 생성한다. </p><Br><h2 id="2-Initialize-repository"><a href="#2-Initialize-repository" class="headerlink" title="2. Initialize repository"></a>2. Initialize repository</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>위의 명령어를 통해 해당 프로젝트 폴더 내에 숨겨진 .git 폴더를 생성하고 이제 Git은 현재 repository에 대한 모든 변경 사항들을 추적 및 관리하게 된다.</p><br><h2 id="3-새로운-폴더-파일-만들고-작업-생성"><a href="#3-새로운-폴더-파일-만들고-작업-생성" class="headerlink" title="3. 새로운 폴더(파일) 만들고 작업 생성"></a>3. 새로운 폴더(파일) 만들고 작업 생성</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add . </span><br><span class="line">git commit -m <span class="string">&quot;commit massage&quot;</span></span><br></pre></td></tr></table></figure><p>새로운 repository에 올릴 폴더(파일)을 만들고 코드를 작성한 뒤, add, commit을 해준다.</p><br><h2 id="4-원격-저장소와-연결-후-push"><a href="#4-원격-저장소와-연결-후-push" class="headerlink" title="4. 원격 저장소와 연결 후 push"></a>4. 원격 저장소와 연결 후 push</h2><div class="figure center" style="width:700px;"><img class="fig-img" src="4.jpg" style="width:700px;"alt="repository 주소 복사하기"><span class="caption">repository 주소 복사하기</span></div><p>생성된 repository에서 code 버튼을 누른 후, 이를 복사해 <code>git remote add origin [repository 주소]</code>명령으로 local과 remote repository를 연결해 준다. </p><ul><li>Local repository : 본인의 컴퓨터에 저장된 프로젝트 저장소</li><li>Remote repository : 로컬이 아닌 외부 서버의 원격 프로젝트 저장소</li></ul><p>이 후 <code>git remote -v | --verbose</code> 를 통해 원격 저장소 목록을 불러와 연결된 것을 확인할 수 있다. 이 후, 로컬에서 작업한 파일을 원격 저장소로 push 해주면 된다. -u(–set-upstream)를 통해 upstream origin 정보를 설정한 후에는 해당 브랜치에서 <code>git push</code>만 입력해줘도 push가 가능하다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin [repository 주소]</span><br><span class="line">git remote -v</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><h2 id="error-fatal-refusing-to-merge-unrelated-histories"><a href="#error-fatal-refusing-to-merge-unrelated-histories" class="headerlink" title="error - fatal: refusing to merge unrelated histories"></a>error - fatal: refusing to merge unrelated histories</h2><p>만약 git pull이나 push를 할 때 <code>fatal: refusing to merge unrelated histories</code> 에러가 뜨는 경우가 있다. 이는 로컬 저장소와 원격지의 저장소의 기록(History)을 비교했을 때 소스코드의 차이가 심한 저장소의 경우, 병합 오류가 날 것을 대비하여 오류 메시지를 띄우는 것이다. 다음과 같은 명령어를 통해 해결 할 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin 브랜치명 --allow-unrelated-histories</span><br></pre></td></tr></table></figure><br><hr><p><strong>Reference</strong></p><ul><li><a href="https://git-scm.com/docs/git-remote">https://git-scm.com/docs/git-remote</a></li><li><a href="https://velog.io/@kho5420/Git-GitHub-%EB%A0%88%ED%8C%8C%EC%A7%80%ED%86%A0%EB%A6%ACRepository-%EC%83%9D%EC%84%B1%ED%95%98%EA%B3%A0-%EC%86%8C%EC%8A%A4-%EC%98%AC%EB%A6%AC%EA%B8%B0">[Git] GitHub 레파지토리(Repository) 생성하고 소스 올리기</a></li><li><a href="https://parksb.github.io/article/28.html">https://parksb.github.io/article/28.html</a></li><li><a href="https://nochoco-lee.tistory.com/34?category=343045">https://nochoco-lee.tistory.com/34?category=343045</a></li><li><a href="https://ndb796.tistory.com/275">https://ndb796.tistory.com/275</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/">StudyLog</category>
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/git/">git</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/git/">git</category>
      
      <category domain="https://hanseul-lee.github.io/tags/gitHub/">gitHub</category>
      
      
      <comments>https://hanseul-lee.github.io/2020/12/17/20-12-17-git-newRepo/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[git] Default 브랜치명 변경하기 (master -&gt; main)</title>
      <link>https://hanseul-lee.github.io/2020/12/17/20-12-16-git-branch-main/</link>
      <guid>https://hanseul-lee.github.io/2020/12/17/20-12-16-git-branch-main/</guid>
      <pubDate>Thu, 17 Dec 2020 02:26:36 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;github의 default의 브랜치명을 master에서 main으로 변경하는 방법을 알아봅시다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h1 id="github의-default-브랜치가-main으로-바뀌다"><a href="#github의-default-브랜치가-main으로-바뀌다" class="headerlink" title="github의 default 브랜치가 main으로 바뀌다"></a>github의 default 브랜치가 main으로 바뀌다</h1><div class="figure center" style="width:600px;"><img class="fig-img" src="main.jpg" style="width:600px;"alt=""></div><br><p>2020년 10월, <a href="https://github.blog/changelog/2020-10-01-the-default-branch-for-newly-created-repositories-is-now-main/">github 공식 블로그</a>는 default 브랜치의 명칭이 main으로 바뀌었음을 알렸다. 이는 이전부터 꾸준히 진행된 논쟁인 master/slave, balcklist/whitelist와 같이 인종차별적인 단어의 문제를 개선하려는 움직임에서 시작되었다. 따라서 github 역시 이러한 움직임에 동참하여 default 브랜치를 기존 <code>master</code>에서 <code>main</code>으로 변경하였고 올해 말부터 master로 생성했던 기존 브랜치의 이름 또한 원할하게 변경 가능하게 작업중이라고 한다.</p><br><h1 id="기존-Repository의-Default-branch-이름을-변경하고-싶다면"><a href="#기존-Repository의-Default-branch-이름을-변경하고-싶다면" class="headerlink" title="기존 Repository의 Default branch 이름을 변경하고 싶다면?"></a>기존 Repository의 Default branch 이름을 변경하고 싶다면?</h1><p>따라서 기존 Repository에서 master로 만들어져있는 default 브랜치 이름을 main으로 변경하고 싶다면 다음과 같이 바꿀 수 있다.</p><br><h3 id="step1"><a href="#step1" class="headerlink" title="step1."></a>step1.</h3><ul><li>git branch 명령어 “-m/-M” 옵션을 사용해 브랜치 이름을 변경하고 remote 저장소에 push<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -m master main</span><br><span class="line">$ git push -u origin main</span><br></pre></td></tr></table></figure></li></ul><h3 id="step2"><a href="#step2" class="headerlink" title="step2."></a>step2.</h3><ul><li>Github Repository 설정 변경</li></ul><div class="figure center" style="width:950px;"><img class="fig-img" src="step2.jpg" style="width:950px;"alt=""></div><br><h3 id="step3"><a href="#step3" class="headerlink" title="step3."></a>step3.</h3><ul><li>기존 브랜치 삭제</li></ul><div class="figure center" style="width:950px;"><img class="fig-img" src="step3.jpg" style="width:950px;"alt=""></div><p>이를 통해 기존 master로 되어있는 default 브랜치명을 main으로 바꿀 수 있다.</p><br><hr><p><strong>Reference</strong></p><ul><li><a href="https://github.blog/changelog/2020-10-01-the-default-branch-for-newly-created-repositories-is-now-main/">github blog</a></li><li><a href="https://github.com/github/renaming/#later-this-year">github/renaming</a></li><li><a href="https://kyeoneee.tistory.com/72">https://kyeoneee.tistory.com/72</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/">StudyLog</category>
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/git/">git</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/git/">git</category>
      
      <category domain="https://hanseul-lee.github.io/tags/github/">github</category>
      
      
      <comments>https://hanseul-lee.github.io/2020/12/17/20-12-16-git-branch-main/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[js연습] Darkmode 구현하기</title>
      <link>https://hanseul-lee.github.io/2020/12/10/20-12-10-darkmode/</link>
      <guid>https://hanseul-lee.github.io/2020/12/10/20-12-10-darkmode/</guid>
      <pubDate>Thu, 10 Dec 2020 11:04:01 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;[JS연습] Darkmode 구현&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;20-12-10 수업내용 복습 및 정리</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><!-- toc --></li></ul><h1 id="Darkmode-코드"><a href="#Darkmode-코드" class="headerlink" title="Darkmode 코드"></a>Darkmode 코드</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Light / Dark Mode - Toggle button<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/css?family=Open+Sans:300,400&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/css/all.min.css&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      body &#123;</span><br><span class="line">        font-family: &quot;Open Sans&quot;;</span><br><span class="line">        font-weight: 300;</span><br><span class="line"><span class="css">        <span class="comment">/* display: none; */</span></span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.title</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#db5b33</span>;</span></span><br><span class="line">        font-weight: 300;</span><br><span class="line">        text-align: center;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.toggle-button</span> &#123;</span></span><br><span class="line">        position: relative;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 50px;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="comment">/* 토글 버튼 내부의 원 */</span></span></span><br><span class="line"><span class="css">      <span class="selector-class">.toggle-button</span> &gt; <span class="selector-class">.toggle-button-switch</span> &#123;</span></span><br><span class="line">        position: absolute;</span><br><span class="line">        top: 2px;</span><br><span class="line">        left: 2px;</span><br><span class="line">        width: 46px;</span><br><span class="line">        height: 46px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">        border-radius: 100%;</span><br><span class="line"><span class="css">        <span class="selector-tag">transition</span>: <span class="selector-tag">left</span> 0<span class="selector-class">.3s</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="comment">/* 토글 버튼의 바탕 */</span></span></span><br><span class="line"><span class="css">      <span class="selector-class">.toggle-button</span> &gt; <span class="selector-class">.toggle-button-text</span> &#123;</span></span><br><span class="line">        overflow: hidden;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#3dbf87</span>;</span></span><br><span class="line">        border-radius: 25px;</span><br><span class="line"><span class="css">        <span class="selector-tag">box-shadow</span>: 2<span class="selector-tag">px</span> 2<span class="selector-tag">px</span> 5<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(50, 50, 50, 0<span class="selector-class">.75</span>);</span></span><br><span class="line"><span class="css">        <span class="selector-tag">transition</span>: <span class="selector-tag">background-color</span> 0<span class="selector-class">.3s</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="comment">/* 토글 버튼의 텍스트 */</span></span></span><br><span class="line"><span class="css">      <span class="selector-class">.toggle-button</span> &gt; <span class="selector-class">.toggle-button-text</span> &gt; <span class="selector-class">.toggle-button-text-on</span>,</span></span><br><span class="line"><span class="css">      <span class="selector-class">.toggle-button</span> &gt; <span class="selector-class">.toggle-button-text</span> &gt; <span class="selector-class">.toggle-button-text-off</span> &#123;</span></span><br><span class="line">        float: left;</span><br><span class="line">        width: 50%;</span><br><span class="line">        line-height: 50px;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">        text-align: center;</span><br><span class="line">      &#125;</span><br><span class="line">      article &#123;</span><br><span class="line">        width: 960px;</span><br><span class="line">        margin: 50px auto 0;</span><br><span class="line"><span class="css">        <span class="selector-tag">font-size</span>: 1<span class="selector-class">.5em</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">      <span class="comment">/* Dark Theme */</span></span></span><br><span class="line"><span class="css">      <span class="selector-tag">body</span><span class="selector-class">.dark</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#232323</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.toggle-button</span> &gt; <span class="selector-class">.toggle-button-switch</span> &#123;</span></span><br><span class="line">        left: 52px;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-class">.toggle-button</span> &gt; <span class="selector-class">.toggle-button-text</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#fc3164</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-tag">article</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Light / Dark Mode - Toggle Button<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toggle-button&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toggle-button-switch&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toggle-button-text&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toggle-button-text-on&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;far fa-sun fa-lg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toggle-button-text-off&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;far fa-moon fa-lg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">      Lorem ipsum dolor, sit amet consectetur adipisicing elit. Laborum optio ab</span><br><span class="line">      porro magni in sunt ipsam, doloremque minima, itaque sapiente consequatur,</span><br><span class="line">      repellat velit voluptatum accusantium aperiam. Nostrum sunt reprehenderit</span><br><span class="line">      nemo!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.addEventListener(<span class="string">&quot;DOMContentLoded&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.body.classList.toggle(<span class="string">&quot;dark&quot;</span>, <span class="built_in">localStorage</span>.getItem(<span class="string">&quot;theme&quot;</span>));</span></span><br><span class="line">      &#125;);</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> $toggleButton = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.toggle-button&quot;</span>);</span></span><br><span class="line"><span class="javascript">      $toggleButton.onclick = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.body.classList.toggle(<span class="string">&quot;dark&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> theme = <span class="built_in">localStorage</span>.getItem(<span class="string">&quot;theme&quot;</span>);</span></span><br><span class="line">        if (theme) &#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">localStorage</span>.removeItem(<span class="string">&quot;theme&quot;</span>);</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">localStorage</span>.setItem(<span class="string">&quot;theme&quot;</span>, <span class="string">&quot;dark&quot;</span>);</span></span><br><span class="line"><span class="javascript">          <span class="built_in">document</span>.body.classList.add(<span class="string">&quot;dark&quot;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="수업-내용-복습-및-정리"><a href="#수업-내용-복습-및-정리" class="headerlink" title="수업 내용 복습 및 정리"></a>수업 내용 복습 및 정리</h1><h3 id="1-코드-시작-전-세팅"><a href="#1-코드-시작-전-세팅" class="headerlink" title="1. 코드 시작 전 세팅"></a>1. 코드 시작 전 세팅</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &lt;project-folder&gt;</span><br><span class="line"><span class="comment"># package.json 생성</span></span><br><span class="line">$ npm init -y</span><br><span class="line"><span class="comment"># install eslint &amp; friends</span></span><br><span class="line">$ npm install eslint eslint-config-airbnb-base eslint-plugin-import eslint-plugin-html --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 이 후 프로젝트 루트에 .eslintrc.json 파일을 생성하고 필요에 따라 아래와 같이 룰셋을 변경</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://poiemaweb.com/eslint#5-eslintrcjson">.eslintrc.json 룰셋 참고 - poiemaweb</a></li><li>만약 새로운 폴더 생성 시, package.json과 .eslintrc.json파일 복사 후 package.json의 name을 바꿔주고 <code>npm i</code> 해주면 됨.</li></ul><Br><h3 id="2-CSS-vs-JS"><a href="#2-CSS-vs-JS" class="headerlink" title="2. CSS vs JS"></a>2. CSS vs JS</h3><ul><li>CSS로 처리할 수 있다면 최대한 JS보단 CSS로 처리하려고 할 것<br>왜냐하면 CSS의 반응 속도가 JS보다 더 빠르기 때문</li><li>ex)<br>Light모드와 Dark모드 변경사항을 CSS에 담고 JS에서는 class추가, 제거로 제어할 것<br><del>JS 내부에서 변경사항 일일히 적어주기</del> (X)</li></ul><h3 id="3-html-body선택하기"><a href="#3-html-body선택하기" class="headerlink" title="3. html body선택하기"></a>3. html body선택하기</h3><ul><li><code>document.querySelector(&#39;.body&#39;)</code>가 아니라 <code>document.body</code>로 하는 것이 더 간결하고 좋음</li></ul><h3 id="4-Local-storage"><a href="#4-Local-storage" class="headerlink" title="4. Local storage"></a>4. Local storage</h3><ul><li><p><a href="https://developer.mozilla.org/ko/docs/Web/API/Window/localStorage">MDN - LocalStrage 참고</a> <br>+) 예제만 보지말고 위의 정의부터 꼼꼼히 다 살펴볼 것</p></li><li><p><strong>HTTP vs Session</strong><br>토글한 Darkmode 상태를 창을 닫고 나서 다시 접속할 때에도 기억하고 싶다면 Storage을 사용하자.<br>(쿠키와 DB는 배보다 배꼽이 큰 격이므로 배제한다.)</p><ul><li>HTTP 통신 : 단방향 (무전기) / Storage : 양방향<ul><li>HTTP 통신의 특징은 Connectionless와 Stateless이다.<ul><li>Connectionless(비연결지향)<br>클라이언트에서 서버에 요청을 보내면 서버는 클라이언트에 응답을 하고 접속을 끊음.</li><li>Stateless(상태정보유지안함)<br>HTTP통신은 요청을 응답하고 접속을 끊기 때문에 클라이언트 상태정보를 알 수 없음.</li></ul></li><li>Storage<br>localStorage의 데이터는 만료되지 않고 sessionStorage의 페이지를 닫을 때 사라진다.</li></ul></li></ul></li></ul><p>(Reference : <a href="https://developer.mozilla.org/ko/docs/Web/API/Window/localStorage">MDN - LocalStrage</a>, <a href="https://chrisjune-13837.medium.com/web-%EC%BF%A0%ED%82%A4-%EC%84%B8%EC%85%98%EC%9D%B4%EB%9E%80-aa6bcb327582">[WEB] 쿠키, 세션이란?</a>)</p><br><h3 id="5-모든-페이지가-렌더링되고-다크-모드-적용되는-현상-해결하기"><a href="#5-모든-페이지가-렌더링되고-다크-모드-적용되는-현상-해결하기" class="headerlink" title="5. 모든 페이지가 렌더링되고 다크 모드 적용되는 현상 해결하기"></a>5. 모든 페이지가 렌더링되고 다크 모드 적용되는 현상 해결하기</h3><p>전역에 다 크모드 적용을 감지하고 이를 적용하는 코드를 작성하면 화면이 한 번 라이트 모드로 적용된 후 뒤이어 다크 모드로 변경된다. 이를 해결하기 위해 다음과 같은 2가지 방법을 사용할 수 있다.</p><ol><li><code>window.onload</code></li><li><code>window.DOMContentLoded</code></li></ol><p>1의 window.onload는 <strong>DOMContentLoaded 이벤트가 발생한 이후, 브라우저의 모든 리소스(이미지, 폰트, script 등)의 로딩이 완료되었을 때</strong> 발생하고, 2의 DOMContentLoaded는 <strong>HTML 문서의 로드와 파싱이 완료되어 DOM 생성이 완료되었을 때</strong> 발생한다. 따라서 결론만 말하자면 2의 DOMContentLoadedrk 훨씬 빠르게 발생하고 유용하다.</p><p>먼저 <code>window.onload</code>를 사용하는 방법을 살펴보면 다음과 같다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CSS</span></span><br><span class="line">body &#123; <span class="attr">display</span>: none; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JS</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.body.classList.toggle(<span class="string">&#x27;dark&#x27;</span>, <span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;theme&#x27;</span>))</span><br><span class="line">  <span class="built_in">document</span>.body.style.display = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>하지만 css에서 display:none을 해주지 않으면 기존처럼 렌더링이 모두 완료된 화면이 먼저 보이기 때문에 아래와 같이 <code>DOMContentLoaded</code>를 사용하는 것이 보다 간편하고 바람직하다. 참고로 DOMContentLoaded는 addEventListener를 통해서만 사용가능하다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;DOMContentLoded&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.body.classList.toggle(<span class="string">&quot;dark&quot;</span>, <span class="built_in">localStorage</span>.getItem(<span class="string">&quot;theme&quot;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><h3 id="6-브라우저-기본-다크모드-감지하기"><a href="#6-브라우저-기본-다크모드-감지하기" class="headerlink" title="6. 브라우저 기본 다크모드 감지하기"></a>6. 브라우저 기본 다크모드 감지하기</h3><ul><li><a href="https://css-tricks.com/a-complete-guide-to-dark-mode-on-the-web/">A Complete Guide to Dark Mode on the Web</a><br>나아가 위 사이트를 통해 브라우저에서 기본으로 다크모드를 설정했을 때 이를 감지해 자동으로 적용하는 코드(<code>prefers-color-scheme</code>)에 대해 알아 볼 수 있다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/">StudyLog</category>
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/js%EC%97%B0%EC%8A%B5/">js연습</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/javascript/">javascript</category>
      
      
      <comments>https://hanseul-lee.github.io/2020/12/10/20-12-10-darkmode/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>20-12-10 목요일 TIL</title>
      <link>https://hanseul-lee.github.io/2020/12/10/20-12-10-TIL/</link>
      <guid>https://hanseul-lee.github.io/2020/12/10/20-12-10-TIL/</guid>
      <pubDate>Thu, 10 Dec 2020 09:18:19 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;20-12-10 목요일 TIL&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JS 수업 보강 (darkmode, star-rating 실습)</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --></li></ul><h2 id="오늘-할-일-계획"><a href="#오늘-할-일-계획" class="headerlink" title="오늘 할 일 (계획)"></a>오늘 할 일 (계획)</h2><ol><li><del>JS 복습 - 38, 39, 4</del></li><li><del>웅모 강사님 수업듣기(2시 ~ 5시)</del></li><li>React - Fastcampus 인강듣기(4 ~ 12)</li></ol><h2 id="오늘-한-일-피드백"><a href="#오늘-한-일-피드백" class="headerlink" title="오늘 한 일 (피드백)"></a>오늘 한 일 (피드백)</h2><ol><li>JS복습 및 정리 완료 -&gt; notion</li><li>오늘 수업 정리(darkmode, star-rating 실습)<ul><li><a href="">darkmode</a></li><li><a href="">star-rating</a></li></ul></li></ol><h3 id="배운점"><a href="#배운점" class="headerlink" title="배운점"></a>배운점</h3><ol><li><p><strong>CSS로 처리할 수 있다면 최대한 JS보단 CSS로 처리하려고 할 것</strong><br>왜냐햐면 CSS로 처리하는 것이 훨씬 빠르며 코드를 간단하게 구현할 수 있기 때문에</p><br></li><li><p><strong>강사님 코딩 스타일</strong><br>일단 되게 해라 → 그 다음부터 진짜 코딩시작(코드 리팩토링)</p><ul><li>예시<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 리팩토링 전</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.body.contains(<span class="string">&#x27;dark&#x27;</span>)) <span class="built_in">document</span>.body.classList.remove(<span class="string">&#x27;dark&#x27;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">document</span>.body.classList.add(<span class="string">&#x27;dark&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 리팩토링 후</span></span><br><span class="line"><span class="built_in">document</span>.body.classList.toggle(<span class="string">&#x27;dark&#x27;</span>);</span><br></pre></td></tr></table></figure><Br></li></ul></li><li><p>코드 시작 전 세팅</p><ol><li><code>$ cd &lt;project-folder&gt;</code> </li><li><code>$ npm init -y</code> package.json 생성 </li><li><code>$ npm install eslint eslint-config-airbnb-base eslint-plugin-import eslint-plugin-html --save-dev</code><br>install eslint &amp; friends 설치</li><li>이후 프로젝트 루트에 .eslintrc.json 파일을 생성하고 필요에 따라 아래와 같이 룰셋을 변경<br><a href="https://poiemaweb.com/eslint#5-eslintrcjson">.eslintrc.json 룰셋 참고 - poiemaweb</a></li><li>만약 새로운 코드 폴더 생성 시, package.json과 .eslintrc.json파일 복사 후 package.json의 name을 바꿔주고 <code>npm i</code> 해주면 됨.<br></li></ol></li></ol>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/TIL/">TIL</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/TIL/">TIL</category>
      
      
      <comments>https://hanseul-lee.github.io/2020/12/10/20-12-10-TIL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[미니 프로젝트] WATFLICHA - 영화 정보 사이트</title>
      <link>https://hanseul-lee.github.io/2020/12/05/20-11-20-WATFLICHA/</link>
      <guid>https://hanseul-lee.github.io/2020/12/05/20-11-20-WATFLICHA/</guid>
      <pubDate>Sat, 05 Dec 2020 02:46:21 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;[미니 프로젝트]&lt;br&gt;WATFLICHA ( 1차 : 20.11.16 ~ 20.11.20 / 2차 : 20.11.22 ~ 20.12.06)&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><blockquote><p>패스트 캠퍼스 FE스쿨 Javascript 프로젝트에서 진행한 프로젝트 사이트 WATFLICHA입니다.<br><a href="https://github.com/hanseul-lee/WATFLECHA">WATFLICHA github</a></p></blockquote><br><div class="figure center" style="width:;"><img class="fig-img" src="main.png" alt=""></div><br><h1 id="프로젝트-목표"><a href="#프로젝트-목표" class="headerlink" title="프로젝트 목표"></a>프로젝트 목표</h1><blockquote><p>넷플리스나 왓챠와 같은 OTT서비스를 클론 코딩 및 개선하여 WATFLECHA라는 영화 정보 사이트를 구현한다.</p></blockquote><h1 id="서비스-기능"><a href="#서비스-기능" class="headerlink" title="서비스 기능"></a>서비스 기능</h1><h3 id="1-로그인-페이지"><a href="#1-로그인-페이지" class="headerlink" title="1. 로그인 페이지"></a>1. 로그인 페이지</h3><ul><li>아이디, 비밀번호 값이 공백이거나, 회원가입 한 아이디가 없으면 에러 메세지를 출력해준다.</li><li>아이디 정보 저장 버튼을 체크했을 시, 한 번이라도 로그인하였다면 다음 로그인 화면에서 아이디가 남아있도록 했다.</li><li>아이디, 비밀번호를 올바르게 입력한 경우, 왓플릭차 메인페이지로 로그인되어 이동한다. 이때 이름, 아이디, 선호장르, 로그인 정보 저장 여부 및 현재 로그인 상태가 local storage에 담긴다.</li></ul><h3 id="2-회원가입-페이지"><a href="#2-회원가입-페이지" class="headerlink" title="2. 회원가입 페이지"></a>2. 회원가입 페이지</h3><ul><li>이름, 아이디, 비밀번호 입력 창에 공백 또는 정해진 아이디, 비밀번호 생성 규칙에 맞지 않은 경우 에러 메세지를 출력해준다.</li><li>아이디와 비밀번호는 4 ~ 15자리 영문 혹은 숫자, 이름은 1자 이상 영문, 한글, 숫자를 입력할 수 있게 했다.</li><li>비밀번호와 재확인 입력창이 같지 않은 경우, 에러 메세지를 출력해준다.</li><li>선호 장르를 선택하지 않은 경우, 에러 메세지를 출력해준다.</li><li>모든 조건을 맞춘 경우, 입력한 이름, 아이디, 비밀번호, 선호 장르를 DB에 전송하고 회원가입이 완료된다.</li></ul><h3 id="3-회원-정보-수정-페이지"><a href="#3-회원-정보-수정-페이지" class="headerlink" title="3. 회원 정보 수정 페이지"></a>3. 회원 정보 수정 페이지</h3><ul><li>이름, 비밀번호, 장르를 수정할 수 있다. (아이디는 수정 불가)</li><li>연필 아이콘 클릭 시 입력창에 값을 입력할 수 있다.</li><li>DB에 담긴 기존 정보와 비교해 값이 변경된 경우, 입력창 색이 초록색으로 바뀐다.</li><li>입력한 아이디, 비밀번호, 이름이 정규표현식 조건과 맞지 않는다면 에러 메세지를 출력해준다.</li><li>기존 비밀번호 및 비밀번호와 재확인 입력창이 같지 않은 경우, 에러 메세지를 출력해준다.</li><li>모든 조건에 맞게 정보를 수정하였을 경우, 입력한 이름, 아이디, 비밀번호, 선호 장르를 DB와 local storage(비밀번호 제외)에 전송하고 회원가입이 완료된다.</li></ul><h3 id="4-메인-페이지"><a href="#4-메인-페이지" class="headerlink" title="4. 메인 페이지"></a>4. 메인 페이지</h3><ul><li>메인화면 가장 위쪽에 화면이 꽉 차도록 영화 예고편을 무한 재생되도록 보여준다.</li><li>상단의 원하는 장르 클릭 시, 선택된 장르 페이지로 넘어간다.</li><li>영화 API에서 TOP20, 최신 영화 및 취향 저격 영화에 맞는 영화 목록을 불러와 슬라이드 형식으로 제공한다.</li><li>슬라이드의 이전, 다음 버튼 클릭 시, 좌우로 슬라이드가 넘어간다. 넘어간 슬라이드는 무한형식으로 일정 슬라이드를 넘어가면 처음이나 맨 끝으로 돌아간다.</li></ul><h3 id="5-팝업-페이지"><a href="#5-팝업-페이지" class="headerlink" title="5. 팝업 페이지"></a>5. 팝업 페이지</h3><ul><li>메인, 장르, 검색, 찜하기 페이지에서 원하는 영화를 클릭했을 때 팝업창이 보인다.</li><li>영화 API를 통해 제목, 평점, 예고편, 줄거리, 개봉일, 장르, 총 상영 시간, 출연 배우 정보가 렌더링 되도록 했다.</li><li>하트 버튼을 누르면 하트 애니메이션이 나타나고 ‘찜 완료!’로 표시가 되며, 북마크에 찜한 영화가 담긴다.</li><li>찜한 영화에서 다시 하트 버튼을 누르면 글자가 ‘찜하기’로 바뀌고 북마크에서 찜한 영화를 제거한다.</li></ul><h3 id="6-장르-페이지"><a href="#6-장르-페이지" class="headerlink" title="6. 장르 페이지"></a>6. 장르 페이지</h3><ul><li>메인 페이지에서 선택한 장르의 영화들이 렌더링 된다.</li><li>장르 페이지에서 다른 장르 클릭 시, 선택한 장르의 영화들이 렌더링 된다.</li><li>페이지네이션을 구현해 사용자가 원하는 페이지로 이동할 수 있게 했다.</li></ul><h3 id="7-검색-페이지"><a href="#7-검색-페이지" class="headerlink" title="7. 검색 페이지"></a>7. 검색 페이지</h3><ul><li>원하는 영화를 검색하면 검색 API에 의해 검색된 정보가 렌더링 된다.</li><li>더 보기 버튼 클릭 시, 다음 페이지가 아래에 이어 렌더링 되며 마지막 페이지라면 더 보기 버튼이 사라진다.</li></ul><h3 id="8-북마크-페이지"><a href="#8-북마크-페이지" class="headerlink" title="8. 북마크 페이지"></a>8. 북마크 페이지</h3><ul><li>DB에 저장된 북마크 영화들을 볼 수 있다.</li><li>북마크 페이지에서 팝업창을 통해 원하는 영화의 북마크를 제거할 수 있다.</li></ul><h1 id="개발기간"><a href="#개발기간" class="headerlink" title="개발기간"></a>개발기간</h1><hr><p>1차 구현 : 20.11.16 - 20.11.20<br>2차 구현 : 20.11.22 - 20.12.06</p><h1 id="기술스택-amp-툴"><a href="#기술스택-amp-툴" class="headerlink" title="기술스택 &amp; 툴"></a>기술스택 &amp; 툴</h1><hr><h3 id="Front-End"><a href="#Front-End" class="headerlink" title="Front-End"></a>Front-End</h3><ul><li>HTML</li><li>CSS</li><li>Javascript</li></ul><h3 id="협업"><a href="#협업" class="headerlink" title="협업"></a>협업</h3><ul><li>git/github</li><li>Slack</li></ul><h3 id="개발-프로세스"><a href="#개발-프로세스" class="headerlink" title="개발 프로세스"></a>개발 프로세스</h3><ul><li>Agile - Scrum</li></ul><br><h1 id="팀원"><a href="#팀원" class="headerlink" title="팀원"></a>팀원</h1><hr><ul><li><a href="https://github.com/Alex-Eojin">김어진</a> - 기획, 2,3 페이지 HTML/CSS/JS,<br>2차 구현(2,3 페이지 리팩토링, 6 장르 페이지 추가, 6,7 페이지 페이지네이션 추가)</li><li><a href="https://github.com/parksaneon">박상언</a> - 기획, 4,5 페이지 HTML/CSS/JS, 전반적인 진행사항 QA역할</li><li><a href="https://github.com/do-mandoo">원진솔</a> - 기획, 1 페이지 HTML/CSS/JS, github 관리</li><li><a href="https://github.com/hanseul-lee">이한슬</a> - 기획, 5,7,8 페이지 HTML/CSS/JS,<br>2차 구현(2,3 페이지 리팩토링, 6 장르 페이지 추가, 6,7 페이지 페이지네이션 추가)</li></ul>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/project/">project</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/Fastcampus/">Fastcampus</category>
      
      <category domain="https://hanseul-lee.github.io/tags/WATFLICHA/">WATFLICHA</category>
      
      
      <comments>https://hanseul-lee.github.io/2020/12/05/20-11-20-WATFLICHA/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[미니 프로젝트] WATFLICHA - 2차 구현 TIL (2주차 : 20.11.30 ~ 20.12.06)</title>
      <link>https://hanseul-lee.github.io/2020/12/03/20-11-30-WATFLECHA3/</link>
      <guid>https://hanseul-lee.github.io/2020/12/03/20-11-30-WATFLECHA3/</guid>
      <pubDate>Wed, 02 Dec 2020 16:21:23 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;[미니 프로젝트] WATFLICHA - 2차 구현 TIL&lt;br&gt;( 2차 구현 2주차: 20.11.30 ~ 20.12.06 )&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h1 id="WATFLICHA-2차-구현-TIL"><a href="#WATFLICHA-2차-구현-TIL" class="headerlink" title="WATFLICHA 2차 구현 TIL"></a>WATFLICHA 2차 구현 TIL</h1><p>( 2차 구현 2주차: 20.11.30 ~ 20.12.06 )</p><h2 id="20-11-30-월요일"><a href="#20-11-30-월요일" class="headerlink" title="20-11-30 월요일"></a>20-11-30 월요일</h2><ul><li><strong>페이지 구현 내용</strong><ol><li>정보수정 페이지 리팩토링 진행중</li></ol><ul><li>기본적인 레이아웃 및 이벤트 위임으로 focusout 됐을 때 input창 border 색 변화 틀 구현</li><li>수정 활성화 연필 아이콘 추가<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$penIcon.onclick = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  $modiIfName.toggleAttribute(<span class="string">&#x27;disabled&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>이름 수정 기능 구현 완료</li><li>비밀번호 수정 기능 구현중</li></ul></li></ul><Br><h2 id="20-12-02-수요일"><a href="#20-12-02-수요일" class="headerlink" title="20-12-02 수요일"></a>20-12-02 수요일</h2><ul><li><strong>페이지 구현 내용</strong><ol><li>정보수정 페이지 리팩토링 진행중</li></ol><ul><li>submit 버튼 클릭 이벤트 완성<ul><li>에러 존재하는 지 확인</li><li>에러 없을 시 localStorage로 바뀐 정보 보내기(이름, 장르)</li><li>에러 없을 시 DB로 바뀐 정보 보내기(이름, 비밀번호, 장르)</li></ul></li><li>비밀번호 변경 input 디버깅중</li></ul></li></ul><br><h3 id="오늘의-배운점"><a href="#오늘의-배운점" class="headerlink" title="오늘의 배운점"></a><strong>오늘의 배운점</strong></h3><ol><li>input창에 스페이스 바 입력 방지<br>trim()을 써서 거르는 것보다 아예 입력을 막는 방법이 더 유용하다는 것을 배웠다.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">child.onkeydown = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> kcode = e.keyCode;</span><br><span class="line">  <span class="keyword">if</span>(kcode === <span class="number">32</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><br><ol start="2"><li>key값으로 매개변수 넣고 싶을 때 점 표현식이 아닌 대괄호 표현식으로!!<br>key 매개변수에는 ‘문자’로 넣어주기<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">showChangedInput(name, input)  <span class="comment">// (X)</span></span><br><span class="line">showChangedInput(<span class="string">&#x27;name&#x27;</span>, input) <span class="comment">// (O)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> showChangedInput = <span class="function">(<span class="params">key, input</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (input.value !== user[key]) &#123;</span><br><span class="line">    showGreenInput(input);</span><br><span class="line">   <span class="comment">// 이하 생략</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">showChahngedInput(<span class="string">&#x27;name&#x27;</span>, input)</span><br></pre></td></tr></table></figure></li></ol><br><ol start="3"><li>fetch가 onfocusout 안에 있으면 focusout 됐을 때 계속해서 호출되므로 전역이나 조건을 주고 한번만 불러주고 변수 가져와 사용하기!</li></ol><br><ol start="4"><li>화살표 함수에서 return이 없으면 {} 로 꼭 묶어주기!!<br>예를 들어, 아래처럼 반복문 안에 if문 넣어주고 싶을 때 =&gt;(화살표 함수) 뒤 {}를 안 해줘서 계속 에러가 나왔었다.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[...$pw].forEach(<span class="function"><span class="params">input</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (input.classList.contains(<span class="string">&#x27;changedColor&#x27;</span>)) &#123;</span><br><span class="line">      input.classList.remove(<span class="string">&#x27;changedColor&#x27;</span>);</span><br><span class="line">      input.nextElementSibling.textContent = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (input.classList.contains(<span class="string">&#x27;errorColor&#x27;</span>)) &#123;</span><br><span class="line">      input.classList.remove(<span class="string">&#x27;errorColor&#x27;</span>);</span><br><span class="line">      input.nextElementSibling.textContent = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><br><ol start="5"><li>값 변경 이벤트 (<a href="https://poiemaweb.com/fastcampus/event#25-%EA%B0%92-%EB%B3%80%EA%B2%BD-%EC%9D%B4%EB%B2%A4%ED%8A%B8">poiemaweb 참고</a>)<div class="figure center" style="width:;"><img class="fig-img" src="값변경이벤트.jpg" alt=""></div></li></ol><ul><li>oninput :input(text, checkbox, radio), select, textarea 요소의 값이 입력되었을 때.</li><li>onchange: input(text, checkbox, radio), select, textarea 요소의 값이 변경되었을 때.</li></ul><br><ol start="6"><li>같은 form 밑의 자식 구조로 되어있지 않을 때<br><code>[...$iconInput.children]</code>이 아니라 <code>div.querySelector(&#39;input&#39;)</code>으로! <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ([...$modiIfForm.children].find(<span class="function"><span class="params">input</span> =&gt;</span> input.classList.contains(<span class="string">&#x27;errorColor&#x27;</span>)) </span><br><span class="line">|| [...$iconInput].find(<span class="function"><span class="params">div</span> =&gt;</span> div.querySelector(<span class="string">&#x27;input&#x27;</span>).classList.contains(<span class="string">&#x27;errorColor&#x27;</span>))</span><br></pre></td></tr></table></figure></li></ol><br><ol start="7"><li><p>뒤로가기</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$cancleBt.onclick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">window</span>.history.back(); <span class="comment">// 방법1</span></span><br><span class="line">  <span class="built_in">window</span>.history.go(<span class="number">-1</span>); <span class="comment">// 방법2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><br><ol start="8"><li>깔끔하게 만드는 것에 목숨걸지 말 것<br>일단 완성한 다음에 리팩토링하는 게 더 중요하다</li></ol><h2 id="20-12-03-목요일"><a href="#20-12-03-목요일" class="headerlink" title="20-12-03 목요일"></a>20-12-03 목요일</h2><ul><li><strong>페이지 구현 내용</strong><ol><li>정보수정 페이지 리팩토링 진행중</li></ol><ul><li>submit 버튼 클릭 이벤트 완성<ul><li>에러 존재하는 지 확인</li><li>에러 없을 시 localStorage로 바뀐 정보 보내기(이름, 장르)</li><li>에러 없을 시 DB로 바뀐 정보 보내기(이름, 비밀번호, 장르)</li></ul></li><li>비밀번호 변경 input 디버깅중</li></ul></li></ul><h2 id="20-12-04-금요일"><a href="#20-12-04-금요일" class="headerlink" title="20-12-04 금요일"></a>20-12-04 금요일</h2><ul><li><strong>페이지 구현 내용</strong><ol><li>정보수정 페이지 리팩토링 진행중</li></ol><ul><li>submit 버튼 클릭 이벤트 완성<ul><li>에러 존재하는 지 확인</li><li>에러 없을 시 localStorage로 바뀐 정보 보내기(이름, 장르)</li><li>에러 없을 시 DB로 바뀐 정보 보내기(이름, 비밀번호, 장르)</li></ul></li><li>비밀번호 변경 input 디버깅중</li></ul></li></ul><h2 id="20-12-05-amp-20-12-06-토-일요일"><a href="#20-12-05-amp-20-12-06-토-일요일" class="headerlink" title="20-12-05 &amp; 20-12-06 토,일요일"></a>20-12-05 &amp; 20-12-06 토,일요일</h2>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/project/">project</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/">프로젝트</category>
      
      <category domain="https://hanseul-lee.github.io/tags/Fastcampus/">Fastcampus</category>
      
      <category domain="https://hanseul-lee.github.io/tags/WATFLICHA/">WATFLICHA</category>
      
      
      <comments>https://hanseul-lee.github.io/2020/12/03/20-11-30-WATFLECHA3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Agile] 애자일 방법론과 스크럼, 스프린트</title>
      <link>https://hanseul-lee.github.io/2020/11/29/20-11-29-Agile/</link>
      <guid>https://hanseul-lee.github.io/2020/11/29/20-11-29-Agile/</guid>
      <pubDate>Sun, 29 Nov 2020 06:45:21 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;[Agile] 애자일 방법론과 스크럼, 스프린트&lt;br&gt;대표적인 개발 프로세스 방법론인 애자일 방법론과 스크럼, 스프린트에 대해 알아보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h1 id="애자일-Agile-이란"><a href="#애자일-Agile-이란" class="headerlink" title="애자일(Agile)이란?"></a>애자일(Agile)이란?</h1><p>Agile은 소프트 웨어 개발 방법론 중 하나이다. 먼저 Agile의 사전적 의미를 알아보자면 아래와 같다. </p><blockquote><p>Agile : 민첩함, 기민한, 날렵함, 좋은 것을 빠르고 낭비없게 만드는 것</p></blockquote><p>즉, 애자일 방법론은 요구사항이 변화하는 것을 당연한 전제로 두고, 변화하는 요구사항에 민첩하게, 기민하게, 날렵하게 대응하며 소프트웨어 개발을 하기 위한 방법에 대한 이론이다. 유동적이고 빠르게 변화하는 소프트웨어 개발은 계획에 의존하며 형식적인 절차를 따라야 하는 고전적인 방법(폭포수 모델 등)을 따르는 것이 큰 취약점으로 다가온다. 따라서 이러한 문제를 해결하기 위해 문서에 의존하는 것이 아닌, less document-oriented, code-oriented를 통해 보다 효율적인 개발을 지향하려는 목적으로 탄생하였다.<br><br></p><div class="figure center" style="width:800px;"><img class="fig-img" src="02.png" style="width:800px;"alt="고전적인 폭포수 방법론과 Agile 방법론 비교"><span class="caption">고전적인 폭포수 방법론과 Agile 방법론 비교</span></div><p>애자일 개발 프로세스란 특정 방법론을 가리키는 것이 아니라 ‘좋은 것을 빠르고 낭비없게 만드는’ 다양한 방법론 전체를 일컫는다. 그 예로 스크럼(Scrum), 익스트림 프로그래밍(XP), 칸반(Kanban) 등이 있으며 가장 대표적인 것이 스크럼이다. </p><br><h1 id="스크럼-Scrum"><a href="#스크럼-Scrum" class="headerlink" title="스크럼(Scrum)"></a>스크럼(Scrum)</h1><blockquote><p>스크럼(Scrum)은 프로젝트 관리를 위한 상호, 점진적 개발 방법론이며, 애자일 소프트웨어 공학 중의 하나이다. - 위키백과 -</p></blockquote><p>스크럼에서 사용하는 주요 용어와 함께 아래 그림을 통해 스크럼 프로세스에 대해 알아보자.</p><h3 id="주요-용어"><a href="#주요-용어" class="headerlink" title="주요 용어"></a>주요 용어</h3><ul><li><dl><dt>백 로그(Backlog)</dt><dd>프로젝트 수행에 필요한 사항에 대한 목록.</dd></dl></li><li><dl><dt>스프린트(Sprint)</dt><dd>반복적인 개발 주기. 일반적으로 이터레이션(iteration)이라고 하며, 스크럼에서는 이를 스프린트라고 한다. 보통 1주 ~ 4주의 기간을 상황과 조직에 맞게 선정한다. 이 기간동안 팀원들은 단거리 전력질주(sprint)하듯 자신이 맡은 업무를 수행한다.</dd></dl></li></ul><div class="figure center" style="width:400px;"><img class="fig-img" src="04.jpg" style="width:400px;"alt=""></div><ul><li><dl><dt>스프린트 백로그(Sprint Backlog)</dt><dd>각각의 스프린트 목표에 도달하기 위해 필요한 작업 목록</dd></dl></li><li><dl><dt>제품 백로그(Product Backlog)</dt><dd>전체 기간동안 개발할 백로그, 개발할 제품에 대한 요구 사항 목록</dd></dl></li><li><dl><dt>Product Ownder(PO)</dt><dd>제품 책임자, 제품에 대한 요구사항, 백로그를 작성하는 주체.<br>보통 소프트웨어 개발자보다는 제품을 사용할 고객이나 비즈니스 요구사항을 정의할 수 있는 사람이 좋다.</dd></dl></li><li><dl><dt>Scrum Master(SM)</dt><dd>프로젝트 관리자, 스크럼이 잘 수행될 수 있도록 도와주는 역할. 최대한 객관적인 시각에서 스크럼의 원칙들이 잘 적용될 수 있도록 이끌어주고 문제를 해결하는 역할을 한다. 팀마다 성향이나 일하는 방식이 다르므로 해당 팀에 따라 팀원들의 목소리에 귀를 귀울이고 PO 및 외부 관계자들과 타협을 맡기도 한다.</dd></dl></li></ul><br><h3 id="스크럼-프로세스"><a href="#스크럼-프로세스" class="headerlink" title="스크럼 프로세스"></a>스크럼 프로세스</h3><div class="figure center" style="width:750px;"><img class="fig-img" src="03.jpg" style="width:750px;"alt="Agile 스크럼 프로세스"><span class="caption">Agile 스크럼 프로세스</span></div><ol><li>PO가 제품 백로그를 작성한다.</li><li>스크럼 팀원 전체가 스프린트 계획 미팅을 진행한다. (스프린트 목표 설정, 백로그 작성)</li><li>스프린트 주기(약 1 ~ 4주)동안 프로젝트를 진행한다.</li><li>매일 스크럼 미팅(Daily Scrum Meeting)을 통해 각자의 이슈를 공유한다.</li><li>스프린트 종료 시 모든 이해관계자가 모인 자리에서 회의(Sprint Review)를 진행한다. 중요한 소스 코드 리뷰 등 팀원들의 산출물을 함께 살펴본다.</li><li>스프린트 회고(Sprint Retrospective).<br>스프린트 기간 중 잘한 것, 다음 스프린트 시 개선할 점 등을 도출하며 한 단계 발전된 팀으로 다음 스프린트를 수행할 준비를 한다.</li><li>다시 1번으로 돌아가 반복한다.</li></ol><p>이처럼 스크럼은 팀 단위의 개발 프로젝트에 있어 보다 효율적으로 업무에 집중할 수 있도록 하는 것을 지향한다. 따라서 다수의 유명한 IT기업에도 이러한 방식을 실제 업무에 적용하는 사례를 빈번하게 볼 수 있다. 애자일 프로세스는 전통적 프로세스에 비해 업무의 효율성을 증가시킨다. 나아가 팀 단위로 소통하며 팀원 스스로가 주도적인 목표 설정을 하게 되므로 팀원간 의사소통이 원할해지며 팀원 간 결속력을 강화시킨다.</p><br><hr><p><strong>Reference</strong></p><ul><li><a href="https://miro.com/blog/choose-between-agile-lean-scrum-kanban/">https://miro.com/blog/choose-between-agile-lean-scrum-kanban/</a></li><li><a href="https://ko.wikipedia.org/wiki/%EC%95%A0%EC%9E%90%EC%9D%BC_%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4_%EA%B0%9C%EB%B0%9C">위키백과 : 애자일 소프트웨어 개발</a>, <a href="https://ko.wikipedia.org/wiki/%EC%8A%A4%ED%81%AC%EB%9F%BC_(%EC%95%A0%EC%9E%90%EC%9D%BC_%EA%B0%9C%EB%B0%9C_%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4)">위키백과 : 스크럼 (애자일 개발 프로세스)</a></li><li><a href="https://velog.io/@dooyou21/%EC%8A%A4%ED%94%84%EB%A6%B0%ED%8A%B8-%EC%8A%A4%ED%81%AC%EB%9F%BC-%EC%95%A0%EC%9E%90%EC%9D%BC">스프린트, 스크럼, 애자일</a></li><li><a href="https://brunch.co.kr/@insuk/5">애자일이 무엇인가요?</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/">StudyLog</category>
      
      <category domain="https://hanseul-lee.github.io/categories/StudyLog/etc/">etc</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/Agile/">Agile</category>
      
      
      <comments>https://hanseul-lee.github.io/2020/11/29/20-11-29-Agile/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[미니 프로젝트] WATFLICHA - 2차 구현 TIL (1주차 : 20.11.23 ~ 20.11.29)</title>
      <link>https://hanseul-lee.github.io/2020/11/25/20-11-25-WATFLECHA2/</link>
      <guid>https://hanseul-lee.github.io/2020/11/25/20-11-25-WATFLECHA2/</guid>
      <pubDate>Wed, 25 Nov 2020 02:19:35 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;[미니 프로젝트] WATFLICHA - 2차 구현 TIL&lt;br&gt;( 2차 구현 1주차: 20.11.23 ~ 20.11.29 )&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h1 id="WATFLICHA-2차-구현-TIL"><a href="#WATFLICHA-2차-구현-TIL" class="headerlink" title="WATFLICHA 2차 구현 TIL"></a>WATFLICHA 2차 구현 TIL</h1><p>( 2차 구현 1주차: 20.11.23 ~ 20.11.29 )</p><h2 id="20-11-23-월요일"><a href="#20-11-23-월요일" class="headerlink" title="20-11-23 월요일"></a>20-11-23 월요일</h2><ul><li>2차 구현 계획 세우기<ol><li>search 페이지 더보기 구현</li><li>genre 페이지 구현 및 main 과 연동</li><li>발표 당시 피드백 내용 고치기(회원가입 및 회원수정)</li><li>기타 자잘한 CSS 및 코드 수정</li></ol></li></ul><h2 id="20-11-23-화요일"><a href="#20-11-23-화요일" class="headerlink" title="20-11-23 화요일"></a>20-11-23 화요일</h2><ul><li><strong>페이지 구현 내용</strong><ol><li>serch 페이지 구현 방향성 설정</li><li>2의 genre 페이지 구현 및 main 과 연동을 위해 모듈 사용을 시도해봤지만 계속해서 오류가 나왔다. 모듈 사용이 익숙하지 않고 전역이 아닌 비동기 코드로 모듈을 export했기 때문이라고 생각했는데 해결 방법을 최대한 더 찾기로 했다. 만약 못 찾으면 그 대신 최후의 수단으로 localStorage를 사용하기로 했다.</li></ol></li></ul><h2 id="20-11-23-수요일"><a href="#20-11-23-수요일" class="headerlink" title="20-11-23 수요일"></a>20-11-23 수요일</h2><ul><li><strong>git organization 생성</strong><br>기존 git fork해서 사용하는 방식으로는 내 repo에 commit로그가 찍히지 않는 단점이 있었다. 따라서 2차 구현을 위해 더 쉽게 merge하고 commit로그 반영도 함께 하기 위해 <a href="https://github.com/Fastcampus-project-WATFLECHA/WATFLECHA">git organization(WATFLECHA)</a>을 생성했다.</li></ul><br><ul><li><strong>페이지 구현 내용</strong></li></ul><ol><li><p>search 페이지 더보기 구현</p><ul><li>버튼 클릭 시 i++ 되며 API의 다음 페이지 렌더링</li><li>만약 API의 배열길이가 20이 아니면, 즉 마지막 페이지이면 버튼 display = none<div class="figure center" style="width:600px;"><img class="fig-img" src="더보기.png" style="width:600px;"alt="search 페이지 더보기 기능"><span class="caption">search 페이지 더보기 기능</span></div><br></li></ul></li><li><p>main의 nav 클릭 시 장르 id를 genre로 연동<br>main의 nav 클릭 시 장르 id를 가진 url 쿼리를 생성하고 이를 genre에서 가져와 API에 연동해 렌더링 하도록 구현<br><br>main과 genre를 연동해 정보를 주고받을 수 있도록 하는 방법을 찾느라 정말 애를 많이 먹었다.<br>크게 다음과 같이 3가지 방법을 생각했었는데 모두 조금씩 걸리는 부분이 있었다.</p><ol><li>localStorage 사용<br>but localStorage는 사용자 설정을 영구적으로 기억해야 할 필요가 있을 때(로그인 정보 등) 사용하는 목적이 크므로 보류</li><li>DB 사용<br>but 페이지 이동을 위해 굳이 DB를 낭비시키고 싶지 않음</li><li>모듈로 만들어 import, export 사용<br>but 모듈을 비동기로 사용하는 방법에서 막힘</li></ol></li></ol><p>따라서 금용님께 조언을 얻어 url의 query를 가져와 이용하는 방법을 도입하기로 했다.<br>먼저 각 main.html과 genre.html의 장르 메뉴의 a 태그에 다음과 같이 장르 API에서 추출한 고유 id를 쿼리로 넣어주었다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;genre-list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;action&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./genre.html?id=28&quot;</span>&gt;</span>액션<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;animation&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./genre.html?id=16&quot;</span>&gt;</span>애니메이션<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;romance&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./genre.html?id=10749&quot;</span>&gt;</span>로맨스<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;thriller&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./genre.html?id=53&quot;</span>&gt;</span>스릴러<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;sf&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./genre.html?id=878&quot;</span>&gt;</span>SF<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>그 후 genre.js에서 다음과 같이 쿼리의 id정보를 빼내는 방식을 사용해 이를 API에 넣어주었다. <a href="https://developer.mozilla.org/ko/docs/Web/API/URL">MDN의 URL</a>을 살펴보면 다음과 같이 url 내 쿼리에 접근할 수 있는 방법이 나와있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://some.site/?id=123</span></span><br><span class="line"><span class="keyword">const</span> parsedUrl = <span class="keyword">new</span> URL(<span class="built_in">window</span>.location.href);</span><br><span class="line"><span class="built_in">console</span>.log(parsedUrl.searchParams.get(<span class="string">&quot;id&quot;</span>)); <span class="comment">// &quot;123&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>new url()</code> : URL() 생성자는 매개변수로 제공한 URL을 나타내는 새로운 URL 객체를 반환</li><li><code>URL.searchParams</code> : URL 인터페이스의 searchParams 읽기 전용 속성은 URL 내의 GET 디코딩 된 쿼리 매개변수에 접근할 수 있는 URLSearchParams 객체를 반환</li></ul><br><p>이를 참고해 다음과 같이 코드를 작성했다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parsedUrl = <span class="keyword">new</span> URL(<span class="built_in">window</span>.location.href);</span><br><span class="line"><span class="keyword">const</span> urlId = parsedUrl.searchParams.get(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> resDiscover = <span class="keyword">await</span> fetch(<span class="string">`https://api.themoviedb.org/3/discover/movie?api_key=<span class="subst">$&#123;api_key&#125;</span>&amp;language=ko&amp;sort_by=popularity.desc&amp;include_adult=false&amp;include_video=false&amp;page=1&amp;with_genres=<span class="subst">$&#123;urlId&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">results</span>: movies &#125; = <span class="keyword">await</span> resDiscover.json();</span><br><span class="line"><span class="comment">// 이하 생략</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><ol start="3"><li>login 페이지 아이디 저장 버튼 HTML, CSS 수정<br>버튼 크기 확대 및 label과 id 연동해 함께 클릭하도록 수정</li><li>join 페이지 취소하기 버튼 CSS 수정<br>회원가입과 취소하기 버튼 색 다르게 구분하도록 수정<br>회원가입 세부조건 추가는 수정중</li></ol><div class="figure center" style="width:300px;"><img class="fig-img" src="회원가입버튼.png" style="width:300px;"alt="회원가입 취소버튼과 구분"><span class="caption">회원가입 취소버튼과 구분</span></div><br><h2 id="20-11-23-목요일"><a href="#20-11-23-목요일" class="headerlink" title="20-11-23 목요일"></a>20-11-23 목요일</h2><ul><li><p><strong>페이지 구현 내용</strong></p><ol><li>회원가입 페이지 리팩토링 진행중</li></ol></li><li><p>장르 페이지 페이지네이션 회의 with 어진</p></li><li><p>genre.js 암묵적 전역 이해</p></li></ul><h2 id="20-11-23-금요일"><a href="#20-11-23-금요일" class="headerlink" title="20-11-23 금요일"></a>20-11-23 금요일</h2><ul><li><strong>페이지 구현 내용</strong><ol><li>회원가입 페이지 리팩토링 진행중<br>input 창 focusout 됐을 때 이름, 아이디, 비밀번호 및 비밀번호 확인 조건 충족여부 확인하는 함수 구현</li></ol></li></ul><h2 id="20-11-23-토요일"><a href="#20-11-23-토요일" class="headerlink" title="20-11-23 토요일"></a>20-11-23 토요일</h2><ul><li><strong>페이지 구현 내용</strong><ol><li>회원가입 페이지 리팩토링 완성<br>어제 만든 input창 이벤트를 input창 각각에 주는 것이 아니라 반복문을 통해 한번에 조건 충족시킬 수 있도록 깔끔하게 바꿈 </li></ol></li></ul><div class="figure center" style="width:1000px;"><img class="fig-img" src="before.jpg" style="width:1000px;"alt="input 리팩토링 전과 후 코드 비교"><span class="caption">input 리팩토링 전과 후 코드 비교</span></div><p>  리팩토링 전 : onsubmit, 즉 회원가입 버튼 눌렀을 때만 조건 충족 여부 검사 후 alert이 보여짐<br>  리팩토링 진행중 : onblur 시, 실시간으로 각 input마다 조건 충족 여부 검사후 alert이 보여짐<br>  리팩토링 후 : onblur 시, 실시간으로 모든 input 반복문으로 순회 후 조건 충족 여부 검사</p><br><ol start="2"><li>signUp과 modiIf 페이지 CSS 통일</li></ol><br><ul><li>새로 배운 것</li></ul><ol><li>정규표현식으로 아이디 및 비밀번호 충족 시키는 조건 만들기<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 아이디 조건확인 및 중복확인</span></span><br><span class="line"><span class="keyword">const</span> checkValidId = <span class="keyword">async</span> (input) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 조건확인</span></span><br><span class="line">    <span class="comment">// 정규표현식 조건 : 4자이상 영어와 숫자</span></span><br><span class="line">    <span class="keyword">const</span> regId = <span class="regexp">/^[A-Za-z0-9+]&#123;4,15&#125;$/g</span>;</span><br><span class="line">    <span class="keyword">if</span>(!regId.test(input.value)) &#123;</span><br><span class="line">      showErrorInput(input);</span><br><span class="line">      input.nextElementSibling.textContent = <span class="string">&#x27;아이디는 4~12자 이상, 영어와 숫자로 입력해 주세요.&#x27;</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      showCorrectInput(input);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 이하 생략</span></span><br></pre></td></tr></table></figure></li><li>querySelectorAll로 지정된 요소를 순회하며 조건 만족 시켜주기<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> $signUpInput = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.signUp-input&#x27;</span>);</span><br><span class="line"></span><br><span class="line">[...$signUpInput].forEach(<span class="function"><span class="params">input</span> =&gt;</span> &#123;</span><br><span class="line">  input.onblur = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    checkblank(input);</span><br><span class="line">    <span class="keyword">if</span> (input.id === <span class="string">&#x27;id&#x27;</span>) checkValidId(input);</span><br><span class="line">    <span class="keyword">if</span> (input.id === <span class="string">&#x27;pw&#x27;</span>) checkValidPw(input);</span><br><span class="line">    <span class="keyword">if</span> (input.id === <span class="string">&#x27;repw&#x27;</span>) checkValidRepw(input);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>option의 value와 text 값 가져오기<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($preference.options[$preference.selectedIndex].value === <span class="string">&#x27;none&#x27;</span>) &#123;</span><br><span class="line">$preference.nextElementSibling.textContent = <span class="string">&#x27;선호 장르를 선택해 주세요&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li>form 요소 데이터를 한꺼번에 DB로 전송하기<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> formData = <span class="keyword">new</span> FormData($signUpForm);</span><br><span class="line"><span class="keyword">const</span> signUp = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> pair <span class="keyword">of</span> formData) &#123;</span><br><span class="line">  signUp[pair[<span class="number">0</span>]] = pair[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fetch(<span class="string">&#x27;/users&#x27;</span>, &#123;</span><br><span class="line">  method:<span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  headers: &#123; <span class="string">&#x27;content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;,</span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(signUp)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br></li></ol><h2 id="20-11-29-일요일"><a href="#20-11-29-일요일" class="headerlink" title="20-11-29 일요일"></a>20-11-29 일요일</h2><ul><li><strong>페이지 구현 내용</strong><ol><li>정보수정 페이지 리팩토링 시작<br>signUp과 modiIf 페이지 CSS통일</li></ol></li></ul>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/project/">project</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/">프로젝트</category>
      
      <category domain="https://hanseul-lee.github.io/tags/Fastcampus/">Fastcampus</category>
      
      <category domain="https://hanseul-lee.github.io/tags/WATFLICHA/">WATFLICHA</category>
      
      
      <comments>https://hanseul-lee.github.io/2020/11/25/20-11-25-WATFLECHA2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[미니 프로젝트] 20-11-20 금요일 미니프로젝트 마지막날 및 최종발표</title>
      <link>https://hanseul-lee.github.io/2020/11/20/20-11-20-TIL/</link>
      <guid>https://hanseul-lee.github.io/2020/11/20/20-11-20-TIL/</guid>
      <pubDate>Fri, 20 Nov 2020 00:11:48 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;20-11-20 금요일 미니프로젝트 마지막날 및 최종발표&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5일차 피드백 및 총정리</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --></li></ul><h2 id="오늘-한-것"><a href="#오늘-한-것" class="headerlink" title="오늘 한 것"></a>오늘 한 것</h2><ul><li>search 페이지 완성<ol><li>popup 눌렀을 때 화면이 맨 위로 올라가는 버그 고치기</li><li>독립적인 파일 스코프를 갖지 않는 JS의 문제점 때문에 변수명 합치고 통일하기</li></ol></li><li>팀원 각각 파트 연결되는 부분 통일하고 전체 페이지 git으로 합치기<ol><li>popup.js 하나로 만들기(변수명 통일, 중복되는 선언문 지우기 등)</li><li>로그아웃 시 주소창에 페이지 주소 입력해도 접근불가능하게 막기</li><li>localstorage에 curlog 키 추가하고 미로그인시 로그인페이지로 이동하게 하기</li><li>html titie 통일하기</li><li>이미지 파일 통일하기</li></ol></li><li>발표 연습(18:00 ~ 18:40)<ul><li>발표 PPT 준비</li><li>리허설 및 각자 질문해주기</li></ul></li><li>최종 발표(19:00 ~ 21:00)<ul><li>넷플릭스, 왓챠와 비교해 개선한 차이점 정리하기</li><li>다른 팀 발표 듣기 및 피드백</li><li>각자 맡은 파트 별로 발표</li></ul></li></ul><blockquote><p><a href="https://hanseul-lee.github.io/2020/12/05/20-11-20-WATFLICHA/">WATFLICHA 최종 완성본</a></p></blockquote><h1 id="미니프로젝트를-통해-얻고-싶은-것-gt-피드백"><a href="#미니프로젝트를-통해-얻고-싶은-것-gt-피드백" class="headerlink" title="미니프로젝트를 통해 얻고 싶은 것 =&gt; 피드백"></a>미니프로젝트를 통해 얻고 싶은 것 =&gt; 피드백</h1><ol><li><strong>git flow를 통한 협업과정 익히기</strong><br>저번 해커톤 때 git organization을 통해 협업을 했을 때보다 git flow를 쓰는 게 fork하는 한 단계를 더 거치기 때문에 까다롭다고 생각해서 걱정이 많았다. 심지어 리허설로 연습할 때랑 월요일에 시작할때도 오류도 많고 제대로 연습을 못했어서 git이 발목을 잡지는 않을까 생각도 들었다. 하지만 계속 팀원들과 주고받다보니 git flow도 익숙해지고 서로 오류도 찾아내며 고쳐서 git flow에 친숙함을 느끼게 된 시간이었다.<ul><li>전체 과정 정리<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 내레포주소</span><br><span class="line">git remote add pmorigin 팀장주소</span><br><span class="line">git flow init</span><br><span class="line"></span><br><span class="line">github에서 이슈 등록 -&gt; 팀장님에게 알려주기</span><br><span class="line">(<span class="comment">#123-로그인 페이지 구현)</span></span><br><span class="line"></span><br><span class="line">git flow feature start 브랜치이름</span><br><span class="line">파일에서 코드 작성</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;feat: #123-로그인구현&quot;</span></span><br><span class="line">git flow feature finish 브랜치이름</span><br><span class="line">git push origin develop</span><br><span class="line"></span><br><span class="line">github에서 Pull requests 요청</span><br><span class="line">(주의!!) 팀장 develop ← 자신의 브랜치</span><br><span class="line">팀장 - Pull request 받아들이고 합치기</span><br><span class="line">git pull pmorigin develop</span><br><span class="line">다시 새로운 브랜치 만들어서 작업</span><br></pre></td></tr></table></figure></li></ul></li></ol><br><ol start="2"><li><strong>API 사용하기(영화 API)</strong><br>영화 API는 <a href="developers.themoviedb.org">TMDB(The Movie DataBase)</a>의 API를 사용했다. TMDB는 전 세계적으로 가장 유명한 영화 DB를 가진 곳이고 이용 방법이 간단하기 때문이다. (구글에 movie API를 검색했을 때도 최상단에 나온다.)<br>다음과 같이 총 4개의 API를 사용했는데 동영상만 유튜브 API를 이용했다.<ul><li>영화 상세정보(Get Details)</li><li>영화 등장인물(Get Credits)</li><li>영화 검색(Search Movies)</li><li>영화 동영상(youtube API)</li></ul></li></ol><Br><ol start="3"><li><p><strong>HTML, CSS 까먹은 부분들 다시 되새기기</strong><br>우리는 디자인이 심플해서 HTML이나 CSS에서 크게 애를 먹은 부분은 없었던 것 같다. 또 중간에 능력자인 상언오빠에게 막히는 부분을 물어봐서 해결했기에 더 수월했다. 메인 페이지에 로고가 가운데 있으면서 오른쪽에 서브 메뉴가 있는 부분 등이 약간 까다로웠는데 다른 팀원들이 구현한 부분 중 내가 감이 안오는 부분도 혼자 시도해봐야겠다.</p><br></li><li><p><strong>async/await을 통해 비동기 처리하는 것 익히기</strong><br>2번에서 가져온 API를 사용할 때 async와 await으로 비동기 처리를 해야했다. 대부분 비슷한 과정이라 한 번 하고 나니 어렵지 않고 수월하게 할 수 있었다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 영화 API로 popup창 개별 정보 가져오기</span></span><br><span class="line">  <span class="keyword">const</span> resMovie = <span class="keyword">await</span> fetch(</span><br><span class="line">    <span class="string">`https://api.themoviedb.org/3/movie/<span class="subst">$&#123;selectedId&#125;</span>?api_key=<span class="subst">$&#123;api_key&#125;</span>&amp;language=ko`</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> movie = <span class="keyword">await</span> resMovie.json();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 배우 API</span></span><br><span class="line">  <span class="keyword">const</span> resActors = <span class="keyword">await</span> fetch(</span><br><span class="line">    <span class="string">`https://api.themoviedb.org/3/movie/<span class="subst">$&#123;selectedId&#125;</span>/credits?api_key=<span class="subst">$&#123;api_key&#125;</span>&amp;language=ko`</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> mainActors = <span class="keyword">await</span> resActors.json();</span><br><span class="line">  <span class="keyword">const</span> actors = mainActors.cast</span><br><span class="line">    .slice(<span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line">    .map(<span class="function">(<span class="params">actor</span>) =&gt;</span> actor.name)</span><br><span class="line">    .join(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">  popup(movie, actors);</span><br></pre></td></tr></table></figure><p>하지만 다음과 같이 db에 있는 정보를 모두 가져와서 가공하는 것이 아닌, 필요한 id만 가져와 유연하게 다루는 방법은 상언오빠의 도움으로 깔끔한 코딩을 할 수 있었다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> fetch(<span class="string">`/users/<span class="subst">$&#123;user.id&#125;</span>`</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;<span class="attr">bookmarks</span> : oldbookmarks&#125; = <span class="keyword">await</span> res.json();</span><br></pre></td></tr></table></figure></li></ol><br><ol start="5"><li><p><strong>local storgae 사용법 익히기</strong><br>저번 해커톤 때 썼던 sessionStorage와 localStorage는 비슷하면서도 차이점이 있다.(참고 : <a href="https://ko.javascript.info/localstorage">https://ko.javascript.info/localstorage</a>)<br>웹 스토리지 객체(web storage object)인 localStorage와 sessionStorage는 브라우저 내에 키-값 쌍을 저장할 수 있게 해준다. 또한, 두 스토리지 객체는 동일한 메서드와 프로퍼티를 제공한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setItem(key, value)  <span class="comment">// 키-값 쌍을 보관</span></span><br><span class="line">getItem(key) <span class="comment">// 키에 해당하는 값을 받아옴</span></span><br><span class="line">removeItem(key) <span class="comment">// 키와 해당 값을 삭제</span></span><br><span class="line">clear() <span class="comment">// 모든 것을 삭제</span></span><br><span class="line">key(index) <span class="comment">// 인덱스(index)에 해당하는 키를 받아옴</span></span><br><span class="line">length <span class="comment">// 저장된 항목의 개수</span></span><br></pre></td></tr></table></figure><p>이 둘은 제공하는 프로퍼티와 메서드는 같지만 LocalStorage의 기능이 훨씬 제한적이며, 다음과 같은 차이점이 있다.</p><ul><li>LocalStorage : 현재 떠 있는 탭 내에서만 유지</li><li>SessionStorage : 동일한 오리진(domain/port/protocol)을 가진 모든 창에서 공유, 브라우저나 OS가 재시작하더라도 데이터가 파기되지 않음.</li></ul></li></ol><ul><li>사용 예<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="built_in">JSON</span>.parse(<span class="built_in">localStorage</span>.getItem(<span class="string">&quot;login&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 미 로그인 시 로그인 페이지로 이동</span></span><br><span class="line"><span class="keyword">if</span> (!user.curlog) &#123;</span><br><span class="line">  <span class="built_in">window</span>.location.href = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// localStorage에 있는 이름을 화면에 렌더링</span></span><br><span class="line">$main__name.innerHTML = user.name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 로그아웃 버튼 클릭 시 localStorage의 curlog false로 변경</span></span><br><span class="line">$logOut.onclick = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">localStorage</span>.setItem(</span><br><span class="line">    <span class="string">&quot;login&quot;</span>,</span><br><span class="line">    <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">      id: localUser.id,</span><br><span class="line">      name: localUser.name,</span><br><span class="line">      genre: localUser.genre,</span><br><span class="line">      savelog: localUser.savelog,</span><br><span class="line">      curlog: <span class="literal">false</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><br><ol start="6"><li><strong>협업과정에서 유연하게 갈등 관리하는 법 익히기</strong><br>협업과정에서 처음에 주제를 다시 바꾸는 등 삐걱거리는 부분이 많아서 사실 걱정이 되었다. 또 아이디어 회의에서 내가 TV부분은 빼고 영화에만 집중하자고 의견을 강하게 주장해서 다른 팀원들이 불편했을 수도 있었을거란 생각도 들었다. 결과적으로 프로젝트는 성공적으로 마치고 팀원들과도 이전에 비해 더 친해졌지만 중간중간 배울 점들이 많았다.<ul><li>상언오빠와 API 맞추기<br>html, css 맞추는 부분에 있어서 오빠가 만든 nav가 내쪽으로 옮겨지는 데 있어서 계속 문제가 생긴 적이 있었다. 그때 친해지기 전이었는데 디버깅을 하는 과정에서 오빠가 에러가 날 때마다 장난으로 “상언님!”하고 불렀는데 결국 내가 오타를 내거나 css에서 태그를 넓게 지정해서 생긴 오류였다. 결국 내 잘못일 수 있는데 장난으로라도 혹여나 상대방 기분을 상하게 하지 않도록 주의하는 자세가 필요하다는 것을 배웠다. 또한 오랫동안 고생했던 디버깅이 알고보니 사소한 오타때문이었다는 것을 알았을 때 허망함을 다시 느끼지 않기 위해 작은 부분도 꼼꼼하게 코딩하는 습관이 곧 디버깅을 줄여주는 지름길이라는 것 또한 느꼈다.</li><li>어진이와 짝코딩<br>search 페이지를 만들때 어진이와 짝코딩으로 시작을 했다. 그 때 CSS를 완벽하게 만들고 갈 지, 아니면 대략적으로 만든 상태에서 JS부터 시작할 지에 대해 의견 충돌이 있었다. 그때 각자의 의견만 주장하는게 아니라 사다리타기로 ‘왕’이랑 ‘신하’를 만들어서 무조건 ‘왕’ 말에 따르고 존중해주기로 했다. 결국 내가 신하가 돼서 어진이 말에 “네~ 알겠습니다~” 하면서 무조건 따랐는데 분위기도 훨씬 유해지고 코딩도 더 수월하게 할 수 있어서 좋은 경험이었다. 꼭 그렇게 역할분담을 하지 않더라도 내가 한 발짝 물러나서 상대의 입장을 귀기울이는 자세가 필요하다는 것을 몸소 느끼는 시간이었다.</li><li>팀장님 진솔언니<br>이번 미니프로젝트를 할 때 팀장님인 진솔언니에게 좋은 follower이자 팀원이 되지 못한 것 같아 미안함과 아쉬움이 많다. 저번 해커톤 때 느낀 건데 내가 실력이 뛰어나지 않더라도 팀원들이 작은 의견 하나에도 나에게 컨펌을 받으며 팀장인 나를 존중해주는 모습이 정말 감사하게 느껴졌었다. 그런데 내가 팀원이 되었을 때 팀장님에게 그런 대우를 해주지 못한 거 같아 반성하게 된다. 사회생활을 하면서는 리더보다 follower의 입장에 더 많이 서게 될텐데 나는 아직 좋은 follower가 되기에 부족한 게 많은 것 같다.</li></ul></li></ol><h1 id="최종발표-피드백"><a href="#최종발표-피드백" class="headerlink" title="최종발표 피드백"></a>최종발표 피드백</h1><ul><li>API 선택 이유, 영화가 배열되는 순서 등 기준 명확히 하고 알아볼 것</li><li>발표도 실전처럼, 기술면접처럼 진지하게 임하기</li><li>구현하는 프로젝트의 의의를 포함하면 Best!<br>→ 클론코딩에서는 실제 사이트의 부족한 부분(1개라도 OK)을 이렇게 보완했다고 어필하는 게 중요함</li><li>내가 만든 페이지에 대해서는 완벽하게 대답할 수 있도록 준비하기</li><li>나뿐 아니라 다른 팀원들이 만든 페이지가 어떻게 구현했는지 제대로 알고 있을 것</li><li>미완성이나 2차구현 등 아쉬운 부분 끝까지 완성하기<br>→ 2차구현 시작 (20.11.23 ~ 20.12.06)<br>→ <a href="https://hanseul-lee.github.io/2020/12/05/20-11-20-WATFLICHA/">WATFLECHA 최종 완성본</a>  </li></ul>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/project/">project</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://hanseul-lee.github.io/tags/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/">프로젝트</category>
      
      <category domain="https://hanseul-lee.github.io/tags/Fastcampus/">Fastcampus</category>
      
      
      <comments>https://hanseul-lee.github.io/2020/11/20/20-11-20-TIL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[미니 프로젝트] 20-11-19 목요일 미니프로젝트 4일차</title>
      <link>https://hanseul-lee.github.io/2020/11/19/20-11-19-TIL/</link>
      <guid>https://hanseul-lee.github.io/2020/11/19/20-11-19-TIL/</guid>
      <pubDate>Wed, 18 Nov 2020 19:20:43 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;20-11-19 목요일 미니프로젝트 4일차&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4일차 피드백</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --></li></ul><h2 id="오늘-한-것-피드백"><a href="#오늘-한-것-피드백" class="headerlink" title="오늘 한 것(피드백)"></a>오늘 한 것(피드백)</h2><ul><li>bookmark 페이지 마무리</li><li>search 페이지 시작<ol><li>HTML, css 완성</li><li>API 렌더링 연동</li><li>API에 정보 없는 부분(예고편 동영상, 포스터 등) 준비중 이미지 대체</li><li>팝업창 연동</li><li>팝업창에서 좋아요 눌렀을 시 db에 반영되게 설정</li></ol></li><li>Scrum - 최종 점검을 위해 팀원들과 각자 구현한 페이지 피드백<br>모든 팀원이 모여서 각자 페이지 설명하고 디테일한 부분까지 버그가 나거나 수정해야 할 부분을 서로 피드백했다. 적게는 5개부터 많게는 12개까지 CSS 오차나 신경쓰이는 부분, 다른 페이지와 위치 연동되는 것부터 공통적으로 적용해야 할 것까지 피드백 받고, 고치고, 다시 피드백하고 고치고를 계속 반복했다. 나중에 알고 보니 이게 Agile 방법론의 Scrum을 우리도 모르게 실천하고 있었던거라 신기하기도 하고 기분이 좋았다.</li></ul><p>새롭게 search 페이지를 만들기 시작했다. 어진이와 함께 html, css 레이아웃을 잡고 영화검색 API를 사용하니 금방 완성할 수 있었다. 무엇보다 우리 디자인이 깔끔해서 많은 걸 안해도 결과물이 그럴듯하게 나와서 괜히 뿌듯했다. 나머지 팝업창 부분은 bookmark페이지와는 다르게 DB와 실시간 연동이 되게 해야했는데 상언오빠가 만들어둔 popup.js를 가져다 연동하는 작업을 했다. 중간중간 에러가 나는걸 계속 잡고 집에 가서도 렌더링 될 때 API에 없는 부분 때문에 레이아웃이 망가지지 않도록 준비중 이미지를 추가하는 등 세세한 부분에도 신경을 써서 완성했다.</p>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/project/">project</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://hanseul-lee.github.io/tags/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/">프로젝트</category>
      
      <category domain="https://hanseul-lee.github.io/tags/Fastcampus/">Fastcampus</category>
      
      
      <comments>https://hanseul-lee.github.io/2020/11/19/20-11-19-TIL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[미니 프로젝트] 20-11-18 수요일 미니프로젝트 3일차</title>
      <link>https://hanseul-lee.github.io/2020/11/18/20-11-18-TIL/</link>
      <guid>https://hanseul-lee.github.io/2020/11/18/20-11-18-TIL/</guid>
      <pubDate>Wed, 18 Nov 2020 12:18:37 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;20-11-18 수요일 미니프로젝트 3일차&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3일차 피드백</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --></li></ul><h2 id="오늘-한-것-피드백"><a href="#오늘-한-것-피드백" class="headerlink" title="오늘 한 것(피드백)"></a>오늘 한 것(피드백)</h2><ul><li>bookmark 페이지<ol><li>local storage와 연동</li><li>배우 API 연동해서 popup창에 출력</li><li>하트 클릭시 하트 이미지 팝업 후 1초 후 사라지는 것 구현</li><li>하트 버튼 클릭시 실시간으로 db와 연동해서 데이터에서 fetch 및 오류 수정</li></ol></li></ul><p>오늘 하루종일 하트 버튼을 db와 연동하는 걸 구현하느라 시간을 다 보냈다. 이것만 해결하면 될 줄 알았는데 별 거 아니라고 생각했는데 상언오빠와 둘이 하루종일 붙잡고 9시가 다 되어서야 겨우 오류를 다 잡고 끝냈다. 처음 80%를 하루만에 다 끝내서 어제까지만 해도 너무 빨리 끝난 거 아니냐고 신났었는데 나머지 20% 구현과 트러블 슈팅에 80% 시간을 쏟은 것 같다. 정말 디버깅의 어려움과 고충을 뼈저리게 느꼈다. </p>]]></content:encoded>
      
      
      <category domain="https://hanseul-lee.github.io/categories/project/">project</category>
      
      
      <category domain="https://hanseul-lee.github.io/tags/TIL/">TIL</category>
      
      <category domain="https://hanseul-lee.github.io/tags/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/">프로젝트</category>
      
      <category domain="https://hanseul-lee.github.io/tags/Fastcampus/">Fastcampus</category>
      
      
      <comments>https://hanseul-lee.github.io/2020/11/18/20-11-18-TIL/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
